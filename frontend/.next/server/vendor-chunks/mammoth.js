/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mammoth";
exports.ids = ["vendor-chunks/mammoth"];
exports.modules = {

/***/ "(ssr)/../node_modules/mammoth/lib/document-to-html.js":
/*!*******************************************************!*\
  !*** ../node_modules/mammoth/lib/document-to-html.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar promises = __webpack_require__(/*! ./promises */ \"(ssr)/../node_modules/mammoth/lib/promises.js\");\nvar documents = __webpack_require__(/*! ./documents */ \"(ssr)/../node_modules/mammoth/lib/documents.js\");\nvar htmlPaths = __webpack_require__(/*! ./styles/html-paths */ \"(ssr)/../node_modules/mammoth/lib/styles/html-paths.js\");\nvar results = __webpack_require__(/*! ./results */ \"(ssr)/../node_modules/mammoth/lib/results.js\");\nvar images = __webpack_require__(/*! ./images */ \"(ssr)/../node_modules/mammoth/lib/images.js\");\nvar Html = __webpack_require__(/*! ./html */ \"(ssr)/../node_modules/mammoth/lib/html/index.js\");\nvar writers = __webpack_require__(/*! ./writers */ \"(ssr)/../node_modules/mammoth/lib/writers/index.js\");\nexports.DocumentConverter = DocumentConverter;\nfunction DocumentConverter(options) {\n    return {\n        convertToHtml: function(element) {\n            var comments = _.indexBy(element.type === documents.types.document ? element.comments : [], \"commentId\");\n            var conversion = new DocumentConversion(options, comments);\n            return conversion.convertToHtml(element);\n        }\n    };\n}\nfunction DocumentConversion(options, comments) {\n    var noteNumber = 1;\n    var noteReferences = [];\n    var referencedComments = [];\n    options = _.extend({\n        ignoreEmptyParagraphs: true\n    }, options);\n    var idPrefix = options.idPrefix === undefined ? \"\" : options.idPrefix;\n    var ignoreEmptyParagraphs = options.ignoreEmptyParagraphs;\n    var defaultParagraphStyle = htmlPaths.topLevelElement(\"p\");\n    var styleMap = options.styleMap || [];\n    function convertToHtml(document) {\n        var messages = [];\n        var html = elementToHtml(document, messages, {});\n        var deferredNodes = [];\n        walkHtml(html, function(node) {\n            if (node.type === \"deferred\") {\n                deferredNodes.push(node);\n            }\n        });\n        var deferredValues = {};\n        return promises.mapSeries(deferredNodes, function(deferred) {\n            return deferred.value().then(function(value) {\n                deferredValues[deferred.id] = value;\n            });\n        }).then(function() {\n            function replaceDeferred(nodes) {\n                return flatMap(nodes, function(node) {\n                    if (node.type === \"deferred\") {\n                        return deferredValues[node.id];\n                    } else if (node.children) {\n                        return [\n                            _.extend({}, node, {\n                                children: replaceDeferred(node.children)\n                            })\n                        ];\n                    } else {\n                        return [\n                            node\n                        ];\n                    }\n                });\n            }\n            var writer = writers.writer({\n                prettyPrint: options.prettyPrint,\n                outputFormat: options.outputFormat\n            });\n            Html.write(writer, Html.simplify(replaceDeferred(html)));\n            return new results.Result(writer.asString(), messages);\n        });\n    }\n    function convertElements(elements, messages, options) {\n        return flatMap(elements, function(element) {\n            return elementToHtml(element, messages, options);\n        });\n    }\n    function elementToHtml(element, messages, options) {\n        if (!options) {\n            throw new Error(\"options not set\");\n        }\n        var handler = elementConverters[element.type];\n        if (handler) {\n            return handler(element, messages, options);\n        } else {\n            return [];\n        }\n    }\n    function convertParagraph(element, messages, options) {\n        return htmlPathForParagraph(element, messages).wrap(function() {\n            var content = convertElements(element.children, messages, options);\n            if (ignoreEmptyParagraphs) {\n                return content;\n            } else {\n                return [\n                    Html.forceWrite\n                ].concat(content);\n            }\n        });\n    }\n    function htmlPathForParagraph(element, messages) {\n        var style = findStyle(element);\n        if (style) {\n            return style.to;\n        } else {\n            if (element.styleId) {\n                messages.push(unrecognisedStyleWarning(\"paragraph\", element));\n            }\n            return defaultParagraphStyle;\n        }\n    }\n    function convertRun(run, messages, options) {\n        var nodes = function() {\n            return convertElements(run.children, messages, options);\n        };\n        var paths = [];\n        if (run.highlight !== null) {\n            var path = findHtmlPath({\n                type: \"highlight\",\n                color: run.highlight\n            });\n            if (path) {\n                paths.push(path);\n            }\n        }\n        if (run.isSmallCaps) {\n            paths.push(findHtmlPathForRunProperty(\"smallCaps\"));\n        }\n        if (run.isAllCaps) {\n            paths.push(findHtmlPathForRunProperty(\"allCaps\"));\n        }\n        if (run.isStrikethrough) {\n            paths.push(findHtmlPathForRunProperty(\"strikethrough\", \"s\"));\n        }\n        if (run.isUnderline) {\n            paths.push(findHtmlPathForRunProperty(\"underline\"));\n        }\n        if (run.verticalAlignment === documents.verticalAlignment.subscript) {\n            paths.push(htmlPaths.element(\"sub\", {}, {\n                fresh: false\n            }));\n        }\n        if (run.verticalAlignment === documents.verticalAlignment.superscript) {\n            paths.push(htmlPaths.element(\"sup\", {}, {\n                fresh: false\n            }));\n        }\n        if (run.isItalic) {\n            paths.push(findHtmlPathForRunProperty(\"italic\", \"em\"));\n        }\n        if (run.isBold) {\n            paths.push(findHtmlPathForRunProperty(\"bold\", \"strong\"));\n        }\n        var stylePath = htmlPaths.empty;\n        var style = findStyle(run);\n        if (style) {\n            stylePath = style.to;\n        } else if (run.styleId) {\n            messages.push(unrecognisedStyleWarning(\"run\", run));\n        }\n        paths.push(stylePath);\n        paths.forEach(function(path) {\n            nodes = path.wrap.bind(path, nodes);\n        });\n        return nodes();\n    }\n    function findHtmlPathForRunProperty(elementType, defaultTagName) {\n        var path = findHtmlPath({\n            type: elementType\n        });\n        if (path) {\n            return path;\n        } else if (defaultTagName) {\n            return htmlPaths.element(defaultTagName, {}, {\n                fresh: false\n            });\n        } else {\n            return htmlPaths.empty;\n        }\n    }\n    function findHtmlPath(element, defaultPath) {\n        var style = findStyle(element);\n        return style ? style.to : defaultPath;\n    }\n    function findStyle(element) {\n        for(var i = 0; i < styleMap.length; i++){\n            if (styleMap[i].from.matches(element)) {\n                return styleMap[i];\n            }\n        }\n    }\n    function recoveringConvertImage(convertImage) {\n        return function(image, messages) {\n            return promises.attempt(function() {\n                return convertImage(image, messages);\n            }).caught(function(error) {\n                messages.push(results.error(error));\n                return [];\n            });\n        };\n    }\n    function noteHtmlId(note) {\n        return referentHtmlId(note.noteType, note.noteId);\n    }\n    function noteRefHtmlId(note) {\n        return referenceHtmlId(note.noteType, note.noteId);\n    }\n    function referentHtmlId(referenceType, referenceId) {\n        return htmlId(referenceType + \"-\" + referenceId);\n    }\n    function referenceHtmlId(referenceType, referenceId) {\n        return htmlId(referenceType + \"-ref-\" + referenceId);\n    }\n    function htmlId(suffix) {\n        return idPrefix + suffix;\n    }\n    var defaultTablePath = htmlPaths.elements([\n        htmlPaths.element(\"table\", {}, {\n            fresh: true\n        })\n    ]);\n    function convertTable(element, messages, options) {\n        return findHtmlPath(element, defaultTablePath).wrap(function() {\n            return convertTableChildren(element, messages, options);\n        });\n    }\n    function convertTableChildren(element, messages, options) {\n        var bodyIndex = _.findIndex(element.children, function(child) {\n            return !child.type === documents.types.tableRow || !child.isHeader;\n        });\n        if (bodyIndex === -1) {\n            bodyIndex = element.children.length;\n        }\n        var children;\n        if (bodyIndex === 0) {\n            children = convertElements(element.children, messages, _.extend({}, options, {\n                isTableHeader: false\n            }));\n        } else {\n            var headRows = convertElements(element.children.slice(0, bodyIndex), messages, _.extend({}, options, {\n                isTableHeader: true\n            }));\n            var bodyRows = convertElements(element.children.slice(bodyIndex), messages, _.extend({}, options, {\n                isTableHeader: false\n            }));\n            children = [\n                Html.freshElement(\"thead\", {}, headRows),\n                Html.freshElement(\"tbody\", {}, bodyRows)\n            ];\n        }\n        return [\n            Html.forceWrite\n        ].concat(children);\n    }\n    function convertTableRow(element, messages, options) {\n        var children = convertElements(element.children, messages, options);\n        return [\n            Html.freshElement(\"tr\", {}, [\n                Html.forceWrite\n            ].concat(children))\n        ];\n    }\n    function convertTableCell(element, messages, options) {\n        var tagName = options.isTableHeader ? \"th\" : \"td\";\n        var children = convertElements(element.children, messages, options);\n        var attributes = {};\n        if (element.colSpan !== 1) {\n            attributes.colspan = element.colSpan.toString();\n        }\n        if (element.rowSpan !== 1) {\n            attributes.rowspan = element.rowSpan.toString();\n        }\n        return [\n            Html.freshElement(tagName, attributes, [\n                Html.forceWrite\n            ].concat(children))\n        ];\n    }\n    function convertCommentReference(reference, messages, options) {\n        return findHtmlPath(reference, htmlPaths.ignore).wrap(function() {\n            var comment = comments[reference.commentId];\n            var count = referencedComments.length + 1;\n            var label = \"[\" + commentAuthorLabel(comment) + count + \"]\";\n            referencedComments.push({\n                label: label,\n                comment: comment\n            });\n            // TODO: remove duplication with note references\n            return [\n                Html.freshElement(\"a\", {\n                    href: \"#\" + referentHtmlId(\"comment\", reference.commentId),\n                    id: referenceHtmlId(\"comment\", reference.commentId)\n                }, [\n                    Html.text(label)\n                ])\n            ];\n        });\n    }\n    function convertComment(referencedComment, messages, options) {\n        // TODO: remove duplication with note references\n        var label = referencedComment.label;\n        var comment = referencedComment.comment;\n        var body = convertElements(comment.body, messages, options).concat([\n            Html.nonFreshElement(\"p\", {}, [\n                Html.text(\" \"),\n                Html.freshElement(\"a\", {\n                    \"href\": \"#\" + referenceHtmlId(\"comment\", comment.commentId)\n                }, [\n                    Html.text(\"↑\")\n                ])\n            ])\n        ]);\n        return [\n            Html.freshElement(\"dt\", {\n                \"id\": referentHtmlId(\"comment\", comment.commentId)\n            }, [\n                Html.text(\"Comment \" + label)\n            ]),\n            Html.freshElement(\"dd\", {}, body)\n        ];\n    }\n    function convertBreak(element, messages, options) {\n        return htmlPathForBreak(element).wrap(function() {\n            return [];\n        });\n    }\n    function htmlPathForBreak(element) {\n        var style = findStyle(element);\n        if (style) {\n            return style.to;\n        } else if (element.breakType === \"line\") {\n            return htmlPaths.topLevelElement(\"br\");\n        } else {\n            return htmlPaths.empty;\n        }\n    }\n    var elementConverters = {\n        \"document\": function(document, messages, options) {\n            var children = convertElements(document.children, messages, options);\n            var notes = noteReferences.map(function(noteReference) {\n                return document.notes.resolve(noteReference);\n            });\n            var notesNodes = convertElements(notes, messages, options);\n            return children.concat([\n                Html.freshElement(\"ol\", {}, notesNodes),\n                Html.freshElement(\"dl\", {}, flatMap(referencedComments, function(referencedComment) {\n                    return convertComment(referencedComment, messages, options);\n                }))\n            ]);\n        },\n        \"paragraph\": convertParagraph,\n        \"run\": convertRun,\n        \"text\": function(element, messages, options) {\n            return [\n                Html.text(element.value)\n            ];\n        },\n        \"tab\": function(element, messages, options) {\n            return [\n                Html.text(\"\t\")\n            ];\n        },\n        \"hyperlink\": function(element, messages, options) {\n            var href = element.anchor ? \"#\" + htmlId(element.anchor) : element.href;\n            var attributes = {\n                href: href\n            };\n            if (element.targetFrame != null) {\n                attributes.target = element.targetFrame;\n            }\n            var children = convertElements(element.children, messages, options);\n            return [\n                Html.nonFreshElement(\"a\", attributes, children)\n            ];\n        },\n        \"checkbox\": function(element) {\n            var attributes = {\n                type: \"checkbox\"\n            };\n            if (element.checked) {\n                attributes[\"checked\"] = \"checked\";\n            }\n            return [\n                Html.freshElement(\"input\", attributes)\n            ];\n        },\n        \"bookmarkStart\": function(element, messages, options) {\n            var anchor = Html.freshElement(\"a\", {\n                id: htmlId(element.name)\n            }, [\n                Html.forceWrite\n            ]);\n            return [\n                anchor\n            ];\n        },\n        \"noteReference\": function(element, messages, options) {\n            noteReferences.push(element);\n            var anchor = Html.freshElement(\"a\", {\n                href: \"#\" + noteHtmlId(element),\n                id: noteRefHtmlId(element)\n            }, [\n                Html.text(\"[\" + noteNumber++ + \"]\")\n            ]);\n            return [\n                Html.freshElement(\"sup\", {}, [\n                    anchor\n                ])\n            ];\n        },\n        \"note\": function(element, messages, options) {\n            var children = convertElements(element.body, messages, options);\n            var backLink = Html.elementWithTag(htmlPaths.element(\"p\", {}, {\n                fresh: false\n            }), [\n                Html.text(\" \"),\n                Html.freshElement(\"a\", {\n                    href: \"#\" + noteRefHtmlId(element)\n                }, [\n                    Html.text(\"↑\")\n                ])\n            ]);\n            var body = children.concat([\n                backLink\n            ]);\n            return Html.freshElement(\"li\", {\n                id: noteHtmlId(element)\n            }, body);\n        },\n        \"commentReference\": convertCommentReference,\n        \"comment\": convertComment,\n        \"image\": deferredConversion(recoveringConvertImage(options.convertImage || images.dataUri)),\n        \"table\": convertTable,\n        \"tableRow\": convertTableRow,\n        \"tableCell\": convertTableCell,\n        \"break\": convertBreak\n    };\n    return {\n        convertToHtml: convertToHtml\n    };\n}\nvar deferredId = 1;\nfunction deferredConversion(func) {\n    return function(element, messages, options) {\n        return [\n            {\n                type: \"deferred\",\n                id: deferredId++,\n                value: function() {\n                    return func(element, messages, options);\n                }\n            }\n        ];\n    };\n}\nfunction unrecognisedStyleWarning(type, element) {\n    return results.warning(\"Unrecognised \" + type + \" style: '\" + element.styleName + \"'\" + \" (Style ID: \" + element.styleId + \")\");\n}\nfunction flatMap(values, func) {\n    return _.flatten(values.map(func), true);\n}\nfunction walkHtml(nodes, callback) {\n    nodes.forEach(function(node) {\n        callback(node);\n        if (node.children) {\n            walkHtml(node.children, callback);\n        }\n    });\n}\nvar commentAuthorLabel = exports.commentAuthorLabel = function commentAuthorLabel(comment) {\n    return comment.authorInitials || \"\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/document-to-html.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/documents.js":
/*!************************************************!*\
  !*** ../node_modules/mammoth/lib/documents.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar types = exports.types = {\n    document: \"document\",\n    paragraph: \"paragraph\",\n    run: \"run\",\n    text: \"text\",\n    tab: \"tab\",\n    checkbox: \"checkbox\",\n    hyperlink: \"hyperlink\",\n    noteReference: \"noteReference\",\n    image: \"image\",\n    note: \"note\",\n    commentReference: \"commentReference\",\n    comment: \"comment\",\n    table: \"table\",\n    tableRow: \"tableRow\",\n    tableCell: \"tableCell\",\n    \"break\": \"break\",\n    bookmarkStart: \"bookmarkStart\"\n};\nfunction Document(children, options) {\n    options = options || {};\n    return {\n        type: types.document,\n        children: children,\n        notes: options.notes || new Notes({}),\n        comments: options.comments || []\n    };\n}\nfunction Paragraph(children, properties) {\n    properties = properties || {};\n    var indent = properties.indent || {};\n    return {\n        type: types.paragraph,\n        children: children,\n        styleId: properties.styleId || null,\n        styleName: properties.styleName || null,\n        numbering: properties.numbering || null,\n        alignment: properties.alignment || null,\n        indent: {\n            start: indent.start || null,\n            end: indent.end || null,\n            firstLine: indent.firstLine || null,\n            hanging: indent.hanging || null\n        }\n    };\n}\nfunction Run(children, properties) {\n    properties = properties || {};\n    return {\n        type: types.run,\n        children: children,\n        styleId: properties.styleId || null,\n        styleName: properties.styleName || null,\n        isBold: !!properties.isBold,\n        isUnderline: !!properties.isUnderline,\n        isItalic: !!properties.isItalic,\n        isStrikethrough: !!properties.isStrikethrough,\n        isAllCaps: !!properties.isAllCaps,\n        isSmallCaps: !!properties.isSmallCaps,\n        verticalAlignment: properties.verticalAlignment || verticalAlignment.baseline,\n        font: properties.font || null,\n        fontSize: properties.fontSize || null,\n        highlight: properties.highlight || null\n    };\n}\nvar verticalAlignment = {\n    baseline: \"baseline\",\n    superscript: \"superscript\",\n    subscript: \"subscript\"\n};\nfunction Text(value) {\n    return {\n        type: types.text,\n        value: value\n    };\n}\nfunction Tab() {\n    return {\n        type: types.tab\n    };\n}\nfunction Checkbox(options) {\n    return {\n        type: types.checkbox,\n        checked: options.checked\n    };\n}\nfunction Hyperlink(children, options) {\n    return {\n        type: types.hyperlink,\n        children: children,\n        href: options.href,\n        anchor: options.anchor,\n        targetFrame: options.targetFrame\n    };\n}\nfunction NoteReference(options) {\n    return {\n        type: types.noteReference,\n        noteType: options.noteType,\n        noteId: options.noteId\n    };\n}\nfunction Notes(notes) {\n    this._notes = _.indexBy(notes, function(note) {\n        return noteKey(note.noteType, note.noteId);\n    });\n}\nNotes.prototype.resolve = function(reference) {\n    return this.findNoteByKey(noteKey(reference.noteType, reference.noteId));\n};\nNotes.prototype.findNoteByKey = function(key) {\n    return this._notes[key] || null;\n};\nfunction Note(options) {\n    return {\n        type: types.note,\n        noteType: options.noteType,\n        noteId: options.noteId,\n        body: options.body\n    };\n}\nfunction commentReference(options) {\n    return {\n        type: types.commentReference,\n        commentId: options.commentId\n    };\n}\nfunction comment(options) {\n    return {\n        type: types.comment,\n        commentId: options.commentId,\n        body: options.body,\n        authorName: options.authorName,\n        authorInitials: options.authorInitials\n    };\n}\nfunction noteKey(noteType, id) {\n    return noteType + \"-\" + id;\n}\nfunction Image(options) {\n    return {\n        type: types.image,\n        // `read` is retained for backwards compatibility, but other read\n        // methods should be preferred.\n        read: function(encoding) {\n            if (encoding) {\n                return options.readImage(encoding);\n            } else {\n                return options.readImage().then(function(arrayBuffer) {\n                    return Buffer.from(arrayBuffer);\n                });\n            }\n        },\n        readAsArrayBuffer: function() {\n            return options.readImage();\n        },\n        readAsBase64String: function() {\n            return options.readImage(\"base64\");\n        },\n        readAsBuffer: function() {\n            return options.readImage().then(function(arrayBuffer) {\n                return Buffer.from(arrayBuffer);\n            });\n        },\n        altText: options.altText,\n        contentType: options.contentType\n    };\n}\nfunction Table(children, properties) {\n    properties = properties || {};\n    return {\n        type: types.table,\n        children: children,\n        styleId: properties.styleId || null,\n        styleName: properties.styleName || null\n    };\n}\nfunction TableRow(children, options) {\n    options = options || {};\n    return {\n        type: types.tableRow,\n        children: children,\n        isHeader: options.isHeader || false\n    };\n}\nfunction TableCell(children, options) {\n    options = options || {};\n    return {\n        type: types.tableCell,\n        children: children,\n        colSpan: options.colSpan == null ? 1 : options.colSpan,\n        rowSpan: options.rowSpan == null ? 1 : options.rowSpan\n    };\n}\nfunction Break(breakType) {\n    return {\n        type: types[\"break\"],\n        breakType: breakType\n    };\n}\nfunction BookmarkStart(options) {\n    return {\n        type: types.bookmarkStart,\n        name: options.name\n    };\n}\nexports.document = exports.Document = Document;\nexports.paragraph = exports.Paragraph = Paragraph;\nexports.run = exports.Run = Run;\nexports.text = exports.Text = Text;\nexports.tab = exports.Tab = Tab;\nexports.checkbox = exports.Checkbox = Checkbox;\nexports.Hyperlink = Hyperlink;\nexports.noteReference = exports.NoteReference = NoteReference;\nexports.Notes = Notes;\nexports.Note = Note;\nexports.commentReference = commentReference;\nexports.comment = comment;\nexports.Image = Image;\nexports.Table = Table;\nexports.TableRow = TableRow;\nexports.TableCell = TableCell;\nexports.lineBreak = Break(\"line\");\nexports.pageBreak = Break(\"page\");\nexports.columnBreak = Break(\"column\");\nexports.BookmarkStart = BookmarkStart;\nexports.verticalAlignment = verticalAlignment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/documents.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/body-reader.js":
/*!*******************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/body-reader.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.createBodyReader = createBodyReader;\nexports._readNumberingProperties = readNumberingProperties;\nvar dingbatToUnicode = __webpack_require__(/*! dingbat-to-unicode */ \"(ssr)/../node_modules/dingbat-to-unicode/dist/index.js\");\nvar _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar documents = __webpack_require__(/*! ../documents */ \"(ssr)/../node_modules/mammoth/lib/documents.js\");\nvar Result = (__webpack_require__(/*! ../results */ \"(ssr)/../node_modules/mammoth/lib/results.js\").Result);\nvar warning = (__webpack_require__(/*! ../results */ \"(ssr)/../node_modules/mammoth/lib/results.js\").warning);\nvar xml = __webpack_require__(/*! ../xml */ \"(ssr)/../node_modules/mammoth/lib/xml/index.js\");\nvar uris = __webpack_require__(/*! ./uris */ \"(ssr)/../node_modules/mammoth/lib/docx/uris.js\");\nfunction createBodyReader(options) {\n    return {\n        readXmlElement: function(element) {\n            return new BodyReader(options).readXmlElement(element);\n        },\n        readXmlElements: function(elements) {\n            return new BodyReader(options).readXmlElements(elements);\n        }\n    };\n}\nfunction BodyReader(options) {\n    var complexFieldStack = [];\n    var currentInstrText = [];\n    // When a paragraph is marked as deleted, its contents should be combined\n    // with the following paragraph. See 17.13.5.15 del (Deleted Paragraph) of\n    // ECMA-376 4th edition Part 1.\n    var deletedParagraphContents = [];\n    var relationships = options.relationships;\n    var contentTypes = options.contentTypes;\n    var docxFile = options.docxFile;\n    var files = options.files;\n    var numbering = options.numbering;\n    var styles = options.styles;\n    function readXmlElements(elements) {\n        var results = elements.map(readXmlElement);\n        return combineResults(results);\n    }\n    function readXmlElement(element) {\n        if (element.type === \"element\") {\n            var handler = xmlElementReaders[element.name];\n            if (handler) {\n                return handler(element);\n            } else if (!Object.prototype.hasOwnProperty.call(ignoreElements, element.name)) {\n                var message = warning(\"An unrecognised element was ignored: \" + element.name);\n                return emptyResultWithMessages([\n                    message\n                ]);\n            }\n        }\n        return emptyResult();\n    }\n    function readParagraphProperties(element) {\n        return readParagraphStyle(element).map(function(style) {\n            return {\n                type: \"paragraphProperties\",\n                styleId: style.styleId,\n                styleName: style.name,\n                alignment: element.firstOrEmpty(\"w:jc\").attributes[\"w:val\"],\n                numbering: readNumberingProperties(style.styleId, element.firstOrEmpty(\"w:numPr\"), numbering),\n                indent: readParagraphIndent(element.firstOrEmpty(\"w:ind\"))\n            };\n        });\n    }\n    function readParagraphIndent(element) {\n        return {\n            start: element.attributes[\"w:start\"] || element.attributes[\"w:left\"],\n            end: element.attributes[\"w:end\"] || element.attributes[\"w:right\"],\n            firstLine: element.attributes[\"w:firstLine\"],\n            hanging: element.attributes[\"w:hanging\"]\n        };\n    }\n    function readRunProperties(element) {\n        return readRunStyle(element).map(function(style) {\n            var fontSizeString = element.firstOrEmpty(\"w:sz\").attributes[\"w:val\"];\n            // w:sz gives the font size in half points, so halve the value to get the size in points\n            var fontSize = /^[0-9]+$/.test(fontSizeString) ? parseInt(fontSizeString, 10) / 2 : null;\n            return {\n                type: \"runProperties\",\n                styleId: style.styleId,\n                styleName: style.name,\n                verticalAlignment: element.firstOrEmpty(\"w:vertAlign\").attributes[\"w:val\"],\n                font: element.firstOrEmpty(\"w:rFonts\").attributes[\"w:ascii\"],\n                fontSize: fontSize,\n                isBold: readBooleanElement(element.first(\"w:b\")),\n                isUnderline: readUnderline(element.first(\"w:u\")),\n                isItalic: readBooleanElement(element.first(\"w:i\")),\n                isStrikethrough: readBooleanElement(element.first(\"w:strike\")),\n                isAllCaps: readBooleanElement(element.first(\"w:caps\")),\n                isSmallCaps: readBooleanElement(element.first(\"w:smallCaps\")),\n                highlight: readHighlightValue(element.firstOrEmpty(\"w:highlight\").attributes[\"w:val\"])\n            };\n        });\n    }\n    function readUnderline(element) {\n        if (element) {\n            var value = element.attributes[\"w:val\"];\n            return value !== undefined && value !== \"false\" && value !== \"0\" && value !== \"none\";\n        } else {\n            return false;\n        }\n    }\n    function readBooleanElement(element) {\n        if (element) {\n            var value = element.attributes[\"w:val\"];\n            return value !== \"false\" && value !== \"0\";\n        } else {\n            return false;\n        }\n    }\n    function readBooleanAttributeValue(value) {\n        return value !== \"false\" && value !== \"0\";\n    }\n    function readHighlightValue(value) {\n        if (!value || value === \"none\") {\n            return null;\n        } else {\n            return value;\n        }\n    }\n    function readParagraphStyle(element) {\n        return readStyle(element, \"w:pStyle\", \"Paragraph\", styles.findParagraphStyleById);\n    }\n    function readRunStyle(element) {\n        return readStyle(element, \"w:rStyle\", \"Run\", styles.findCharacterStyleById);\n    }\n    function readTableStyle(element) {\n        return readStyle(element, \"w:tblStyle\", \"Table\", styles.findTableStyleById);\n    }\n    function readStyle(element, styleTagName, styleType, findStyleById) {\n        var messages = [];\n        var styleElement = element.first(styleTagName);\n        var styleId = null;\n        var name = null;\n        if (styleElement) {\n            styleId = styleElement.attributes[\"w:val\"];\n            if (styleId) {\n                var style = findStyleById(styleId);\n                if (style) {\n                    name = style.name;\n                } else {\n                    messages.push(undefinedStyleWarning(styleType, styleId));\n                }\n            }\n        }\n        return elementResultWithMessages({\n            styleId: styleId,\n            name: name\n        }, messages);\n    }\n    function readFldChar(element) {\n        var type = element.attributes[\"w:fldCharType\"];\n        if (type === \"begin\") {\n            complexFieldStack.push({\n                type: \"begin\",\n                fldChar: element\n            });\n            currentInstrText = [];\n        } else if (type === \"end\") {\n            var complexFieldEnd = complexFieldStack.pop();\n            if (complexFieldEnd.type === \"begin\") {\n                complexFieldEnd = parseCurrentInstrText(complexFieldEnd);\n            }\n            if (complexFieldEnd.type === \"checkbox\") {\n                return elementResult(documents.checkbox({\n                    checked: complexFieldEnd.checked\n                }));\n            }\n        } else if (type === \"separate\") {\n            var complexFieldSeparate = complexFieldStack.pop();\n            var complexField = parseCurrentInstrText(complexFieldSeparate);\n            complexFieldStack.push(complexField);\n        }\n        return emptyResult();\n    }\n    function currentHyperlinkOptions() {\n        var topHyperlink = _.last(complexFieldStack.filter(function(complexField) {\n            return complexField.type === \"hyperlink\";\n        }));\n        return topHyperlink ? topHyperlink.options : null;\n    }\n    function parseCurrentInstrText(complexField) {\n        return parseInstrText(currentInstrText.join(\"\"), complexField.type === \"begin\" ? complexField.fldChar : xml.emptyElement);\n    }\n    function parseInstrText(instrText, fldChar) {\n        var externalLinkResult = /\\s*HYPERLINK \"(.*)\"/.exec(instrText);\n        if (externalLinkResult) {\n            return {\n                type: \"hyperlink\",\n                options: {\n                    href: externalLinkResult[1]\n                }\n            };\n        }\n        var internalLinkResult = /\\s*HYPERLINK\\s+\\\\l\\s+\"(.*)\"/.exec(instrText);\n        if (internalLinkResult) {\n            return {\n                type: \"hyperlink\",\n                options: {\n                    anchor: internalLinkResult[1]\n                }\n            };\n        }\n        var checkboxResult = /\\s*FORMCHECKBOX\\s*/.exec(instrText);\n        if (checkboxResult) {\n            var checkboxElement = fldChar.firstOrEmpty(\"w:ffData\").firstOrEmpty(\"w:checkBox\");\n            var checkedElement = checkboxElement.first(\"w:checked\");\n            var checked = checkedElement == null ? readBooleanElement(checkboxElement.first(\"w:default\")) : readBooleanElement(checkedElement);\n            return {\n                type: \"checkbox\",\n                checked: checked\n            };\n        }\n        return {\n            type: \"unknown\"\n        };\n    }\n    function readInstrText(element) {\n        currentInstrText.push(element.text());\n        return emptyResult();\n    }\n    function readSymbol(element) {\n        // See 17.3.3.30 sym (Symbol Character) of ECMA-376 4th edition Part 1\n        var font = element.attributes[\"w:font\"];\n        var char = element.attributes[\"w:char\"];\n        var unicodeCharacter = dingbatToUnicode.hex(font, char);\n        if (unicodeCharacter == null && /^F0..$/.test(char)) {\n            unicodeCharacter = dingbatToUnicode.hex(font, char.substring(2));\n        }\n        if (unicodeCharacter == null) {\n            return emptyResultWithMessages([\n                warning(\"A w:sym element with an unsupported character was ignored: char \" + char + \" in font \" + font)\n            ]);\n        } else {\n            return elementResult(new documents.Text(unicodeCharacter.string));\n        }\n    }\n    function noteReferenceReader(noteType) {\n        return function(element) {\n            var noteId = element.attributes[\"w:id\"];\n            return elementResult(new documents.NoteReference({\n                noteType: noteType,\n                noteId: noteId\n            }));\n        };\n    }\n    function readCommentReference(element) {\n        return elementResult(documents.commentReference({\n            commentId: element.attributes[\"w:id\"]\n        }));\n    }\n    function readChildElements(element) {\n        return readXmlElements(element.children);\n    }\n    var xmlElementReaders = {\n        \"w:p\": function(element) {\n            var paragraphPropertiesElement = element.firstOrEmpty(\"w:pPr\");\n            var isDeleted = !!paragraphPropertiesElement.firstOrEmpty(\"w:rPr\").first(\"w:del\");\n            if (isDeleted) {\n                element.children.forEach(function(child) {\n                    deletedParagraphContents.push(child);\n                });\n                return emptyResult();\n            } else {\n                var childrenXml = element.children;\n                if (deletedParagraphContents.length > 0) {\n                    childrenXml = deletedParagraphContents.concat(childrenXml);\n                    deletedParagraphContents = [];\n                }\n                return ReadResult.map(readParagraphProperties(paragraphPropertiesElement), readXmlElements(childrenXml), function(properties, children) {\n                    return new documents.Paragraph(children, properties);\n                }).insertExtra();\n            }\n        },\n        \"w:r\": function(element) {\n            return ReadResult.map(readRunProperties(element.firstOrEmpty(\"w:rPr\")), readXmlElements(element.children), function(properties, children) {\n                var hyperlinkOptions = currentHyperlinkOptions();\n                if (hyperlinkOptions !== null) {\n                    children = [\n                        new documents.Hyperlink(children, hyperlinkOptions)\n                    ];\n                }\n                return new documents.Run(children, properties);\n            });\n        },\n        \"w:fldChar\": readFldChar,\n        \"w:instrText\": readInstrText,\n        \"w:t\": function(element) {\n            return elementResult(new documents.Text(element.text()));\n        },\n        \"w:tab\": function(element) {\n            return elementResult(new documents.Tab());\n        },\n        \"w:noBreakHyphen\": function() {\n            return elementResult(new documents.Text(\"‑\"));\n        },\n        \"w:softHyphen\": function(element) {\n            return elementResult(new documents.Text(\"\\xad\"));\n        },\n        \"w:sym\": readSymbol,\n        \"w:hyperlink\": function(element) {\n            var relationshipId = element.attributes[\"r:id\"];\n            var anchor = element.attributes[\"w:anchor\"];\n            return readXmlElements(element.children).map(function(children) {\n                function create(options) {\n                    var targetFrame = element.attributes[\"w:tgtFrame\"] || null;\n                    return new documents.Hyperlink(children, _.extend({\n                        targetFrame: targetFrame\n                    }, options));\n                }\n                if (relationshipId) {\n                    var href = relationships.findTargetByRelationshipId(relationshipId);\n                    if (anchor) {\n                        href = uris.replaceFragment(href, anchor);\n                    }\n                    return create({\n                        href: href\n                    });\n                } else if (anchor) {\n                    return create({\n                        anchor: anchor\n                    });\n                } else {\n                    return children;\n                }\n            });\n        },\n        \"w:tbl\": readTable,\n        \"w:tr\": readTableRow,\n        \"w:tc\": readTableCell,\n        \"w:footnoteReference\": noteReferenceReader(\"footnote\"),\n        \"w:endnoteReference\": noteReferenceReader(\"endnote\"),\n        \"w:commentReference\": readCommentReference,\n        \"w:br\": function(element) {\n            var breakType = element.attributes[\"w:type\"];\n            if (breakType == null || breakType === \"textWrapping\") {\n                return elementResult(documents.lineBreak);\n            } else if (breakType === \"page\") {\n                return elementResult(documents.pageBreak);\n            } else if (breakType === \"column\") {\n                return elementResult(documents.columnBreak);\n            } else {\n                return emptyResultWithMessages([\n                    warning(\"Unsupported break type: \" + breakType)\n                ]);\n            }\n        },\n        \"w:bookmarkStart\": function(element) {\n            var name = element.attributes[\"w:name\"];\n            if (name === \"_GoBack\") {\n                return emptyResult();\n            } else {\n                return elementResult(new documents.BookmarkStart({\n                    name: name\n                }));\n            }\n        },\n        \"mc:AlternateContent\": function(element) {\n            return readChildElements(element.firstOrEmpty(\"mc:Fallback\"));\n        },\n        \"w:sdt\": function(element) {\n            var checkbox = element.firstOrEmpty(\"w:sdtPr\").first(\"wordml:checkbox\");\n            if (checkbox) {\n                var checkedElement = checkbox.first(\"wordml:checked\");\n                var isChecked = !!checkedElement && readBooleanAttributeValue(checkedElement.attributes[\"wordml:val\"]);\n                return elementResult(documents.checkbox({\n                    checked: isChecked\n                }));\n            } else {\n                return readXmlElements(element.firstOrEmpty(\"w:sdtContent\").children);\n            }\n        },\n        \"w:ins\": readChildElements,\n        \"w:object\": readChildElements,\n        \"w:smartTag\": readChildElements,\n        \"w:drawing\": readChildElements,\n        \"w:pict\": function(element) {\n            return readChildElements(element).toExtra();\n        },\n        \"v:roundrect\": readChildElements,\n        \"v:shape\": readChildElements,\n        \"v:textbox\": readChildElements,\n        \"w:txbxContent\": readChildElements,\n        \"wp:inline\": readDrawingElement,\n        \"wp:anchor\": readDrawingElement,\n        \"v:imagedata\": readImageData,\n        \"v:group\": readChildElements,\n        \"v:rect\": readChildElements\n    };\n    return {\n        readXmlElement: readXmlElement,\n        readXmlElements: readXmlElements\n    };\n    function readTable(element) {\n        var propertiesResult = readTableProperties(element.firstOrEmpty(\"w:tblPr\"));\n        return readXmlElements(element.children).flatMap(calculateRowSpans).flatMap(function(children) {\n            return propertiesResult.map(function(properties) {\n                return documents.Table(children, properties);\n            });\n        });\n    }\n    function readTableProperties(element) {\n        return readTableStyle(element).map(function(style) {\n            return {\n                styleId: style.styleId,\n                styleName: style.name\n            };\n        });\n    }\n    function readTableRow(element) {\n        var properties = element.firstOrEmpty(\"w:trPr\");\n        var isHeader = !!properties.first(\"w:tblHeader\");\n        return readXmlElements(element.children).map(function(children) {\n            return documents.TableRow(children, {\n                isHeader: isHeader\n            });\n        });\n    }\n    function readTableCell(element) {\n        return readXmlElements(element.children).map(function(children) {\n            var properties = element.firstOrEmpty(\"w:tcPr\");\n            var gridSpan = properties.firstOrEmpty(\"w:gridSpan\").attributes[\"w:val\"];\n            var colSpan = gridSpan ? parseInt(gridSpan, 10) : 1;\n            var cell = documents.TableCell(children, {\n                colSpan: colSpan\n            });\n            cell._vMerge = readVMerge(properties);\n            return cell;\n        });\n    }\n    function readVMerge(properties) {\n        var element = properties.first(\"w:vMerge\");\n        if (element) {\n            var val = element.attributes[\"w:val\"];\n            return val === \"continue\" || !val;\n        } else {\n            return null;\n        }\n    }\n    function calculateRowSpans(rows) {\n        var unexpectedNonRows = _.any(rows, function(row) {\n            return row.type !== documents.types.tableRow;\n        });\n        if (unexpectedNonRows) {\n            return elementResultWithMessages(rows, [\n                warning(\"unexpected non-row element in table, cell merging may be incorrect\")\n            ]);\n        }\n        var unexpectedNonCells = _.any(rows, function(row) {\n            return _.any(row.children, function(cell) {\n                return cell.type !== documents.types.tableCell;\n            });\n        });\n        if (unexpectedNonCells) {\n            return elementResultWithMessages(rows, [\n                warning(\"unexpected non-cell element in table row, cell merging may be incorrect\")\n            ]);\n        }\n        var columns = {};\n        rows.forEach(function(row) {\n            var cellIndex = 0;\n            row.children.forEach(function(cell) {\n                if (cell._vMerge && columns[cellIndex]) {\n                    columns[cellIndex].rowSpan++;\n                } else {\n                    columns[cellIndex] = cell;\n                    cell._vMerge = false;\n                }\n                cellIndex += cell.colSpan;\n            });\n        });\n        rows.forEach(function(row) {\n            row.children = row.children.filter(function(cell) {\n                return !cell._vMerge;\n            });\n            row.children.forEach(function(cell) {\n                delete cell._vMerge;\n            });\n        });\n        return elementResult(rows);\n    }\n    function readDrawingElement(element) {\n        var blips = element.getElementsByTagName(\"a:graphic\").getElementsByTagName(\"a:graphicData\").getElementsByTagName(\"pic:pic\").getElementsByTagName(\"pic:blipFill\").getElementsByTagName(\"a:blip\");\n        return combineResults(blips.map(readBlip.bind(null, element)));\n    }\n    function readBlip(element, blip) {\n        var properties = element.first(\"wp:docPr\").attributes;\n        var altText = isBlank(properties.descr) ? properties.title : properties.descr;\n        var blipImageFile = findBlipImageFile(blip);\n        if (blipImageFile === null) {\n            return emptyResultWithMessages([\n                warning(\"Could not find image file for a:blip element\")\n            ]);\n        } else {\n            return readImage(blipImageFile, altText);\n        }\n    }\n    function isBlank(value) {\n        return value == null || /^\\s*$/.test(value);\n    }\n    function findBlipImageFile(blip) {\n        var embedRelationshipId = blip.attributes[\"r:embed\"];\n        var linkRelationshipId = blip.attributes[\"r:link\"];\n        if (embedRelationshipId) {\n            return findEmbeddedImageFile(embedRelationshipId);\n        } else if (linkRelationshipId) {\n            var imagePath = relationships.findTargetByRelationshipId(linkRelationshipId);\n            return {\n                path: imagePath,\n                read: files.read.bind(files, imagePath)\n            };\n        } else {\n            return null;\n        }\n    }\n    function readImageData(element) {\n        var relationshipId = element.attributes[\"r:id\"];\n        if (relationshipId) {\n            return readImage(findEmbeddedImageFile(relationshipId), element.attributes[\"o:title\"]);\n        } else {\n            return emptyResultWithMessages([\n                warning(\"A v:imagedata element without a relationship ID was ignored\")\n            ]);\n        }\n    }\n    function findEmbeddedImageFile(relationshipId) {\n        var path = uris.uriToZipEntryName(\"word\", relationships.findTargetByRelationshipId(relationshipId));\n        return {\n            path: path,\n            read: docxFile.read.bind(docxFile, path)\n        };\n    }\n    function readImage(imageFile, altText) {\n        var contentType = contentTypes.findContentType(imageFile.path);\n        var image = documents.Image({\n            readImage: imageFile.read,\n            altText: altText,\n            contentType: contentType\n        });\n        var warnings = supportedImageTypes[contentType] ? [] : warning(\"Image of type \" + contentType + \" is unlikely to display in web browsers\");\n        return elementResultWithMessages(image, warnings);\n    }\n    function undefinedStyleWarning(type, styleId) {\n        return warning(type + \" style with ID \" + styleId + \" was referenced but not defined in the document\");\n    }\n}\nfunction readNumberingProperties(styleId, element, numbering) {\n    var level = element.firstOrEmpty(\"w:ilvl\").attributes[\"w:val\"];\n    var numId = element.firstOrEmpty(\"w:numId\").attributes[\"w:val\"];\n    if (level !== undefined && numId !== undefined) {\n        return numbering.findLevel(numId, level);\n    }\n    if (styleId != null) {\n        var levelByStyleId = numbering.findLevelByParagraphStyleId(styleId);\n        if (levelByStyleId != null) {\n            return levelByStyleId;\n        }\n    }\n    return null;\n}\nvar supportedImageTypes = {\n    \"image/png\": true,\n    \"image/gif\": true,\n    \"image/jpeg\": true,\n    \"image/svg+xml\": true,\n    \"image/tiff\": true\n};\nvar ignoreElements = {\n    \"office-word:wrap\": true,\n    \"v:shadow\": true,\n    \"v:shapetype\": true,\n    \"w:annotationRef\": true,\n    \"w:bookmarkEnd\": true,\n    \"w:sectPr\": true,\n    \"w:proofErr\": true,\n    \"w:lastRenderedPageBreak\": true,\n    \"w:commentRangeStart\": true,\n    \"w:commentRangeEnd\": true,\n    \"w:del\": true,\n    \"w:footnoteRef\": true,\n    \"w:endnoteRef\": true,\n    \"w:pPr\": true,\n    \"w:rPr\": true,\n    \"w:tblPr\": true,\n    \"w:tblGrid\": true,\n    \"w:trPr\": true,\n    \"w:tcPr\": true\n};\nfunction emptyResultWithMessages(messages) {\n    return new ReadResult(null, null, messages);\n}\nfunction emptyResult() {\n    return new ReadResult(null);\n}\nfunction elementResult(element) {\n    return new ReadResult(element);\n}\nfunction elementResultWithMessages(element, messages) {\n    return new ReadResult(element, null, messages);\n}\nfunction ReadResult(element, extra, messages) {\n    this.value = element || [];\n    this.extra = extra || [];\n    this._result = new Result({\n        element: this.value,\n        extra: extra\n    }, messages);\n    this.messages = this._result.messages;\n}\nReadResult.prototype.toExtra = function() {\n    return new ReadResult(null, joinElements(this.extra, this.value), this.messages);\n};\nReadResult.prototype.insertExtra = function() {\n    var extra = this.extra;\n    if (extra && extra.length) {\n        return new ReadResult(joinElements(this.value, extra), null, this.messages);\n    } else {\n        return this;\n    }\n};\nReadResult.prototype.map = function(func) {\n    var result = this._result.map(function(value) {\n        return func(value.element);\n    });\n    return new ReadResult(result.value, this.extra, result.messages);\n};\nReadResult.prototype.flatMap = function(func) {\n    var result = this._result.flatMap(function(value) {\n        return func(value.element)._result;\n    });\n    return new ReadResult(result.value.element, joinElements(this.extra, result.value.extra), result.messages);\n};\nReadResult.map = function(first, second, func) {\n    return new ReadResult(func(first.value, second.value), joinElements(first.extra, second.extra), first.messages.concat(second.messages));\n};\nfunction combineResults(results) {\n    var result = Result.combine(_.pluck(results, \"_result\"));\n    return new ReadResult(_.flatten(_.pluck(result.value, \"element\")), _.filter(_.flatten(_.pluck(result.value, \"extra\")), identity), result.messages);\n}\nfunction joinElements(first, second) {\n    return _.flatten([\n        first,\n        second\n    ]);\n}\nfunction identity(value) {\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/body-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/comments-reader.js":
/*!***********************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/comments-reader.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var documents = __webpack_require__(/*! ../documents */ \"(ssr)/../node_modules/mammoth/lib/documents.js\");\nvar Result = (__webpack_require__(/*! ../results */ \"(ssr)/../node_modules/mammoth/lib/results.js\").Result);\nfunction createCommentsReader(bodyReader) {\n    function readCommentsXml(element) {\n        return Result.combine(element.getElementsByTagName(\"w:comment\").map(readCommentElement));\n    }\n    function readCommentElement(element) {\n        var id = element.attributes[\"w:id\"];\n        function readOptionalAttribute(name) {\n            return (element.attributes[name] || \"\").trim() || null;\n        }\n        return bodyReader.readXmlElements(element.children).map(function(body) {\n            return documents.comment({\n                commentId: id,\n                body: body,\n                authorName: readOptionalAttribute(\"w:author\"),\n                authorInitials: readOptionalAttribute(\"w:initials\")\n            });\n        });\n    }\n    return readCommentsXml;\n}\nexports.createCommentsReader = createCommentsReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvY29tbWVudHMtcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLG9FQUFjO0FBQ3RDLElBQUlDLFNBQVNELDhGQUE0QjtBQUV6QyxTQUFTRSxxQkFBcUJDLFVBQVU7SUFDcEMsU0FBU0MsZ0JBQWdCQyxPQUFPO1FBQzVCLE9BQU9KLE9BQU9LLE9BQU8sQ0FBQ0QsUUFBUUUsb0JBQW9CLENBQUMsYUFDOUNDLEdBQUcsQ0FBQ0M7SUFDYjtJQUVBLFNBQVNBLG1CQUFtQkosT0FBTztRQUMvQixJQUFJSyxLQUFLTCxRQUFRTSxVQUFVLENBQUMsT0FBTztRQUVuQyxTQUFTQyxzQkFBc0JDLElBQUk7WUFDL0IsT0FBTyxDQUFDUixRQUFRTSxVQUFVLENBQUNFLEtBQUssSUFBSSxFQUFDLEVBQUdDLElBQUksTUFBTTtRQUN0RDtRQUVBLE9BQU9YLFdBQVdZLGVBQWUsQ0FBQ1YsUUFBUVcsUUFBUSxFQUM3Q1IsR0FBRyxDQUFDLFNBQVNTLElBQUk7WUFDZCxPQUFPbEIsVUFBVW1CLE9BQU8sQ0FBQztnQkFDckJDLFdBQVdUO2dCQUNYTyxNQUFNQTtnQkFDTkcsWUFBWVIsc0JBQXNCO2dCQUNsQ1MsZ0JBQWdCVCxzQkFBc0I7WUFDMUM7UUFDSjtJQUNSO0lBRUEsT0FBT1I7QUFDWDtBQUVBa0IsNEJBQTRCLEdBQUdwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvZG9jeC9jb21tZW50cy1yZWFkZXIuanM/Zjg1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZG9jdW1lbnRzID0gcmVxdWlyZShcIi4uL2RvY3VtZW50c1wiKTtcbnZhciBSZXN1bHQgPSByZXF1aXJlKFwiLi4vcmVzdWx0c1wiKS5SZXN1bHQ7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnRzUmVhZGVyKGJvZHlSZWFkZXIpIHtcbiAgICBmdW5jdGlvbiByZWFkQ29tbWVudHNYbWwoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0LmNvbWJpbmUoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInc6Y29tbWVudFwiKVxuICAgICAgICAgICAgLm1hcChyZWFkQ29tbWVudEVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkQ29tbWVudEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICB2YXIgaWQgPSBlbGVtZW50LmF0dHJpYnV0ZXNbXCJ3OmlkXCJdO1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRPcHRpb25hbEF0dHJpYnV0ZShuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gKGVsZW1lbnQuYXR0cmlidXRlc1tuYW1lXSB8fCBcIlwiKS50cmltKCkgfHwgbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib2R5UmVhZGVyLnJlYWRYbWxFbGVtZW50cyhlbGVtZW50LmNoaWxkcmVuKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbihib2R5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50cy5jb21tZW50KHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudElkOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yTmFtZTogcmVhZE9wdGlvbmFsQXR0cmlidXRlKFwidzphdXRob3JcIiksXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvckluaXRpYWxzOiByZWFkT3B0aW9uYWxBdHRyaWJ1dGUoXCJ3OmluaXRpYWxzXCIpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlYWRDb21tZW50c1htbDtcbn1cblxuZXhwb3J0cy5jcmVhdGVDb21tZW50c1JlYWRlciA9IGNyZWF0ZUNvbW1lbnRzUmVhZGVyO1xuIl0sIm5hbWVzIjpbImRvY3VtZW50cyIsInJlcXVpcmUiLCJSZXN1bHQiLCJjcmVhdGVDb21tZW50c1JlYWRlciIsImJvZHlSZWFkZXIiLCJyZWFkQ29tbWVudHNYbWwiLCJlbGVtZW50IiwiY29tYmluZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibWFwIiwicmVhZENvbW1lbnRFbGVtZW50IiwiaWQiLCJhdHRyaWJ1dGVzIiwicmVhZE9wdGlvbmFsQXR0cmlidXRlIiwibmFtZSIsInRyaW0iLCJyZWFkWG1sRWxlbWVudHMiLCJjaGlsZHJlbiIsImJvZHkiLCJjb21tZW50IiwiY29tbWVudElkIiwiYXV0aG9yTmFtZSIsImF1dGhvckluaXRpYWxzIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/comments-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/content-types-reader.js":
/*!****************************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/content-types-reader.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.readContentTypesFromXml = readContentTypesFromXml;\nvar fallbackContentTypes = {\n    \"png\": \"png\",\n    \"gif\": \"gif\",\n    \"jpeg\": \"jpeg\",\n    \"jpg\": \"jpeg\",\n    \"tif\": \"tiff\",\n    \"tiff\": \"tiff\",\n    \"bmp\": \"bmp\"\n};\nexports.defaultContentTypes = contentTypes({}, {});\nfunction readContentTypesFromXml(element) {\n    var extensionDefaults = {};\n    var overrides = {};\n    element.children.forEach(function(child) {\n        if (child.name === \"content-types:Default\") {\n            extensionDefaults[child.attributes.Extension] = child.attributes.ContentType;\n        }\n        if (child.name === \"content-types:Override\") {\n            var name = child.attributes.PartName;\n            if (name.charAt(0) === \"/\") {\n                name = name.substring(1);\n            }\n            overrides[name] = child.attributes.ContentType;\n        }\n    });\n    return contentTypes(overrides, extensionDefaults);\n}\nfunction contentTypes(overrides, extensionDefaults) {\n    return {\n        findContentType: function(path) {\n            var overrideContentType = overrides[path];\n            if (overrideContentType) {\n                return overrideContentType;\n            } else {\n                var pathParts = path.split(\".\");\n                var extension = pathParts[pathParts.length - 1];\n                if (extensionDefaults.hasOwnProperty(extension)) {\n                    return extensionDefaults[extension];\n                } else {\n                    var fallback = fallbackContentTypes[extension.toLowerCase()];\n                    if (fallback) {\n                        return \"image/\" + fallback;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvY29udGVudC10eXBlcy1yZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUFBLCtCQUErQixHQUFHQztBQUVsQyxJQUFJQyx1QkFBdUI7SUFDdkIsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztBQUNYO0FBRUFGLDJCQUEyQixHQUFHSSxhQUFhLENBQUMsR0FBRyxDQUFDO0FBR2hELFNBQVNILHdCQUF3QkksT0FBTztJQUNwQyxJQUFJQyxvQkFBb0IsQ0FBQztJQUN6QixJQUFJQyxZQUFZLENBQUM7SUFFakJGLFFBQVFHLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDLFNBQVNDLEtBQUs7UUFDbkMsSUFBSUEsTUFBTUMsSUFBSSxLQUFLLHlCQUF5QjtZQUN4Q0wsaUJBQWlCLENBQUNJLE1BQU1FLFVBQVUsQ0FBQ0MsU0FBUyxDQUFDLEdBQUdILE1BQU1FLFVBQVUsQ0FBQ0UsV0FBVztRQUNoRjtRQUNBLElBQUlKLE1BQU1DLElBQUksS0FBSywwQkFBMEI7WUFDekMsSUFBSUEsT0FBT0QsTUFBTUUsVUFBVSxDQUFDRyxRQUFRO1lBQ3BDLElBQUlKLEtBQUtLLE1BQU0sQ0FBQyxPQUFPLEtBQUs7Z0JBQ3hCTCxPQUFPQSxLQUFLTSxTQUFTLENBQUM7WUFDMUI7WUFDQVYsU0FBUyxDQUFDSSxLQUFLLEdBQUdELE1BQU1FLFVBQVUsQ0FBQ0UsV0FBVztRQUNsRDtJQUNKO0lBQ0EsT0FBT1YsYUFBYUcsV0FBV0Q7QUFDbkM7QUFFQSxTQUFTRixhQUFhRyxTQUFTLEVBQUVELGlCQUFpQjtJQUM5QyxPQUFPO1FBQ0hZLGlCQUFpQixTQUFTQyxJQUFJO1lBQzFCLElBQUlDLHNCQUFzQmIsU0FBUyxDQUFDWSxLQUFLO1lBQ3pDLElBQUlDLHFCQUFxQjtnQkFDckIsT0FBT0E7WUFDWCxPQUFPO2dCQUNILElBQUlDLFlBQVlGLEtBQUtHLEtBQUssQ0FBQztnQkFDM0IsSUFBSUMsWUFBWUYsU0FBUyxDQUFDQSxVQUFVRyxNQUFNLEdBQUcsRUFBRTtnQkFDL0MsSUFBSWxCLGtCQUFrQm1CLGNBQWMsQ0FBQ0YsWUFBWTtvQkFDN0MsT0FBT2pCLGlCQUFpQixDQUFDaUIsVUFBVTtnQkFDdkMsT0FBTztvQkFDSCxJQUFJRyxXQUFXeEIsb0JBQW9CLENBQUNxQixVQUFVSSxXQUFXLEdBQUc7b0JBQzVELElBQUlELFVBQVU7d0JBQ1YsT0FBTyxXQUFXQTtvQkFDdEIsT0FBTzt3QkFDSCxPQUFPO29CQUNYO2dCQUNKO1lBQ0o7UUFDSjtJQUNKO0FBRUoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvY29udGVudC10eXBlcy1yZWFkZXIuanM/YWI4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLnJlYWRDb250ZW50VHlwZXNGcm9tWG1sID0gcmVhZENvbnRlbnRUeXBlc0Zyb21YbWw7XG5cbnZhciBmYWxsYmFja0NvbnRlbnRUeXBlcyA9IHtcbiAgICBcInBuZ1wiOiBcInBuZ1wiLFxuICAgIFwiZ2lmXCI6IFwiZ2lmXCIsXG4gICAgXCJqcGVnXCI6IFwianBlZ1wiLFxuICAgIFwianBnXCI6IFwianBlZ1wiLFxuICAgIFwidGlmXCI6IFwidGlmZlwiLFxuICAgIFwidGlmZlwiOiBcInRpZmZcIixcbiAgICBcImJtcFwiOiBcImJtcFwiXG59O1xuXG5leHBvcnRzLmRlZmF1bHRDb250ZW50VHlwZXMgPSBjb250ZW50VHlwZXMoe30sIHt9KTtcblxuXG5mdW5jdGlvbiByZWFkQ29udGVudFR5cGVzRnJvbVhtbChlbGVtZW50KSB7XG4gICAgdmFyIGV4dGVuc2lvbkRlZmF1bHRzID0ge307XG4gICAgdmFyIG92ZXJyaWRlcyA9IHt9O1xuICAgIFxuICAgIGVsZW1lbnQuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQubmFtZSA9PT0gXCJjb250ZW50LXR5cGVzOkRlZmF1bHRcIikge1xuICAgICAgICAgICAgZXh0ZW5zaW9uRGVmYXVsdHNbY2hpbGQuYXR0cmlidXRlcy5FeHRlbnNpb25dID0gY2hpbGQuYXR0cmlidXRlcy5Db250ZW50VHlwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQubmFtZSA9PT0gXCJjb250ZW50LXR5cGVzOk92ZXJyaWRlXCIpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gY2hpbGQuYXR0cmlidXRlcy5QYXJ0TmFtZTtcbiAgICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVycmlkZXNbbmFtZV0gPSBjaGlsZC5hdHRyaWJ1dGVzLkNvbnRlbnRUeXBlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRUeXBlcyhvdmVycmlkZXMsIGV4dGVuc2lvbkRlZmF1bHRzKTtcbn1cblxuZnVuY3Rpb24gY29udGVudFR5cGVzKG92ZXJyaWRlcywgZXh0ZW5zaW9uRGVmYXVsdHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmaW5kQ29udGVudFR5cGU6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgICAgIHZhciBvdmVycmlkZUNvbnRlbnRUeXBlID0gb3ZlcnJpZGVzW3BhdGhdO1xuICAgICAgICAgICAgaWYgKG92ZXJyaWRlQ29udGVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVDb250ZW50VHlwZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGhQYXJ0cyA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICAgICAgICAgICAgICAgIHZhciBleHRlbnNpb24gPSBwYXRoUGFydHNbcGF0aFBhcnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb25EZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShleHRlbnNpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHRlbnNpb25EZWZhdWx0c1tleHRlbnNpb25dO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmYWxsYmFjayA9IGZhbGxiYWNrQ29udGVudFR5cGVzW2V4dGVuc2lvbi50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJpbWFnZS9cIiArIGZhbGxiYWNrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxufVxuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJyZWFkQ29udGVudFR5cGVzRnJvbVhtbCIsImZhbGxiYWNrQ29udGVudFR5cGVzIiwiZGVmYXVsdENvbnRlbnRUeXBlcyIsImNvbnRlbnRUeXBlcyIsImVsZW1lbnQiLCJleHRlbnNpb25EZWZhdWx0cyIsIm92ZXJyaWRlcyIsImNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkIiwibmFtZSIsImF0dHJpYnV0ZXMiLCJFeHRlbnNpb24iLCJDb250ZW50VHlwZSIsIlBhcnROYW1lIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwiZmluZENvbnRlbnRUeXBlIiwicGF0aCIsIm92ZXJyaWRlQ29udGVudFR5cGUiLCJwYXRoUGFydHMiLCJzcGxpdCIsImV4dGVuc2lvbiIsImxlbmd0aCIsImhhc093blByb3BlcnR5IiwiZmFsbGJhY2siLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/content-types-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/document-xml-reader.js":
/*!***************************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/document-xml-reader.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.DocumentXmlReader = DocumentXmlReader;\nvar documents = __webpack_require__(/*! ../documents */ \"(ssr)/../node_modules/mammoth/lib/documents.js\");\nvar Result = (__webpack_require__(/*! ../results */ \"(ssr)/../node_modules/mammoth/lib/results.js\").Result);\nfunction DocumentXmlReader(options) {\n    var bodyReader = options.bodyReader;\n    function convertXmlToDocument(element) {\n        var body = element.first(\"w:body\");\n        if (body == null) {\n            throw new Error(\"Could not find the body element: are you sure this is a docx file?\");\n        }\n        var result = bodyReader.readXmlElements(body.children).map(function(children) {\n            return new documents.Document(children, {\n                notes: options.notes,\n                comments: options.comments\n            });\n        });\n        return new Result(result.value, result.messages);\n    }\n    return {\n        convertXmlToDocument: convertXmlToDocument\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvZG9jdW1lbnQteG1sLXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQUEseUJBQXlCLEdBQUdDO0FBRTVCLElBQUlDLFlBQVlDLG1CQUFPQSxDQUFDLG9FQUFjO0FBQ3RDLElBQUlDLFNBQVNELDhGQUE0QjtBQUd6QyxTQUFTRixrQkFBa0JJLE9BQU87SUFDOUIsSUFBSUMsYUFBYUQsUUFBUUMsVUFBVTtJQUVuQyxTQUFTQyxxQkFBcUJDLE9BQU87UUFDakMsSUFBSUMsT0FBT0QsUUFBUUUsS0FBSyxDQUFDO1FBRXpCLElBQUlELFFBQVEsTUFBTTtZQUNkLE1BQU0sSUFBSUUsTUFBTTtRQUNwQjtRQUVBLElBQUlDLFNBQVNOLFdBQVdPLGVBQWUsQ0FBQ0osS0FBS0ssUUFBUSxFQUNoREMsR0FBRyxDQUFDLFNBQVNELFFBQVE7WUFDbEIsT0FBTyxJQUFJWixVQUFVYyxRQUFRLENBQUNGLFVBQVU7Z0JBQ3BDRyxPQUFPWixRQUFRWSxLQUFLO2dCQUNwQkMsVUFBVWIsUUFBUWEsUUFBUTtZQUM5QjtRQUNKO1FBQ0osT0FBTyxJQUFJZCxPQUFPUSxPQUFPTyxLQUFLLEVBQUVQLE9BQU9RLFFBQVE7SUFDbkQ7SUFFQSxPQUFPO1FBQ0hiLHNCQUFzQkE7SUFDMUI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvZG9jeC9kb2N1bWVudC14bWwtcmVhZGVyLmpzP2RjNzUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5Eb2N1bWVudFhtbFJlYWRlciA9IERvY3VtZW50WG1sUmVhZGVyO1xuXG52YXIgZG9jdW1lbnRzID0gcmVxdWlyZShcIi4uL2RvY3VtZW50c1wiKTtcbnZhciBSZXN1bHQgPSByZXF1aXJlKFwiLi4vcmVzdWx0c1wiKS5SZXN1bHQ7XG5cblxuZnVuY3Rpb24gRG9jdW1lbnRYbWxSZWFkZXIob3B0aW9ucykge1xuICAgIHZhciBib2R5UmVhZGVyID0gb3B0aW9ucy5ib2R5UmVhZGVyO1xuXG4gICAgZnVuY3Rpb24gY29udmVydFhtbFRvRG9jdW1lbnQoZWxlbWVudCkge1xuICAgICAgICB2YXIgYm9keSA9IGVsZW1lbnQuZmlyc3QoXCJ3OmJvZHlcIik7XG5cbiAgICAgICAgaWYgKGJvZHkgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgdGhlIGJvZHkgZWxlbWVudDogYXJlIHlvdSBzdXJlIHRoaXMgaXMgYSBkb2N4IGZpbGU/XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IGJvZHlSZWFkZXIucmVhZFhtbEVsZW1lbnRzKGJvZHkuY2hpbGRyZW4pXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBkb2N1bWVudHMuRG9jdW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgICAgICAgICAgICAgbm90ZXM6IG9wdGlvbnMubm90ZXMsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzOiBvcHRpb25zLmNvbW1lbnRzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQocmVzdWx0LnZhbHVlLCByZXN1bHQubWVzc2FnZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGNvbnZlcnRYbWxUb0RvY3VtZW50OiBjb252ZXJ0WG1sVG9Eb2N1bWVudFxuICAgIH07XG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsIkRvY3VtZW50WG1sUmVhZGVyIiwiZG9jdW1lbnRzIiwicmVxdWlyZSIsIlJlc3VsdCIsIm9wdGlvbnMiLCJib2R5UmVhZGVyIiwiY29udmVydFhtbFRvRG9jdW1lbnQiLCJlbGVtZW50IiwiYm9keSIsImZpcnN0IiwiRXJyb3IiLCJyZXN1bHQiLCJyZWFkWG1sRWxlbWVudHMiLCJjaGlsZHJlbiIsIm1hcCIsIkRvY3VtZW50Iiwibm90ZXMiLCJjb21tZW50cyIsInZhbHVlIiwibWVzc2FnZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/document-xml-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/docx-reader.js":
/*!*******************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/docx-reader.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.read = read;\nexports._findPartPaths = findPartPaths;\nvar promises = __webpack_require__(/*! ../promises */ \"(ssr)/../node_modules/mammoth/lib/promises.js\");\nvar documents = __webpack_require__(/*! ../documents */ \"(ssr)/../node_modules/mammoth/lib/documents.js\");\nvar Result = (__webpack_require__(/*! ../results */ \"(ssr)/../node_modules/mammoth/lib/results.js\").Result);\nvar zipfile = __webpack_require__(/*! ../zipfile */ \"(ssr)/../node_modules/mammoth/lib/zipfile.js\");\nvar readXmlFromZipFile = (__webpack_require__(/*! ./office-xml-reader */ \"(ssr)/../node_modules/mammoth/lib/docx/office-xml-reader.js\").readXmlFromZipFile);\nvar createBodyReader = (__webpack_require__(/*! ./body-reader */ \"(ssr)/../node_modules/mammoth/lib/docx/body-reader.js\").createBodyReader);\nvar DocumentXmlReader = (__webpack_require__(/*! ./document-xml-reader */ \"(ssr)/../node_modules/mammoth/lib/docx/document-xml-reader.js\").DocumentXmlReader);\nvar relationshipsReader = __webpack_require__(/*! ./relationships-reader */ \"(ssr)/../node_modules/mammoth/lib/docx/relationships-reader.js\");\nvar contentTypesReader = __webpack_require__(/*! ./content-types-reader */ \"(ssr)/../node_modules/mammoth/lib/docx/content-types-reader.js\");\nvar numberingXml = __webpack_require__(/*! ./numbering-xml */ \"(ssr)/../node_modules/mammoth/lib/docx/numbering-xml.js\");\nvar stylesReader = __webpack_require__(/*! ./styles-reader */ \"(ssr)/../node_modules/mammoth/lib/docx/styles-reader.js\");\nvar notesReader = __webpack_require__(/*! ./notes-reader */ \"(ssr)/../node_modules/mammoth/lib/docx/notes-reader.js\");\nvar commentsReader = __webpack_require__(/*! ./comments-reader */ \"(ssr)/../node_modules/mammoth/lib/docx/comments-reader.js\");\nvar Files = (__webpack_require__(/*! ./files */ \"(ssr)/../node_modules/mammoth/lib/docx/files.js\").Files);\nfunction read(docxFile, input) {\n    input = input || {};\n    return promises.props({\n        contentTypes: readContentTypesFromZipFile(docxFile),\n        partPaths: findPartPaths(docxFile),\n        docxFile: docxFile,\n        files: input.path ? Files.relativeToFile(input.path) : new Files(null)\n    }).also(function(result) {\n        return {\n            styles: readStylesFromZipFile(docxFile, result.partPaths.styles)\n        };\n    }).also(function(result) {\n        return {\n            numbering: readNumberingFromZipFile(docxFile, result.partPaths.numbering, result.styles)\n        };\n    }).also(function(result) {\n        return {\n            footnotes: readXmlFileWithBody(result.partPaths.footnotes, result, function(bodyReader, xml) {\n                if (xml) {\n                    return notesReader.createFootnotesReader(bodyReader)(xml);\n                } else {\n                    return new Result([]);\n                }\n            }),\n            endnotes: readXmlFileWithBody(result.partPaths.endnotes, result, function(bodyReader, xml) {\n                if (xml) {\n                    return notesReader.createEndnotesReader(bodyReader)(xml);\n                } else {\n                    return new Result([]);\n                }\n            }),\n            comments: readXmlFileWithBody(result.partPaths.comments, result, function(bodyReader, xml) {\n                if (xml) {\n                    return commentsReader.createCommentsReader(bodyReader)(xml);\n                } else {\n                    return new Result([]);\n                }\n            })\n        };\n    }).also(function(result) {\n        return {\n            notes: result.footnotes.flatMap(function(footnotes) {\n                return result.endnotes.map(function(endnotes) {\n                    return new documents.Notes(footnotes.concat(endnotes));\n                });\n            })\n        };\n    }).then(function(result) {\n        return readXmlFileWithBody(result.partPaths.mainDocument, result, function(bodyReader, xml) {\n            return result.notes.flatMap(function(notes) {\n                return result.comments.flatMap(function(comments) {\n                    var reader = new DocumentXmlReader({\n                        bodyReader: bodyReader,\n                        notes: notes,\n                        comments: comments\n                    });\n                    return reader.convertXmlToDocument(xml);\n                });\n            });\n        });\n    });\n}\nfunction findPartPaths(docxFile) {\n    return readPackageRelationships(docxFile).then(function(packageRelationships) {\n        var mainDocumentPath = findPartPath({\n            docxFile: docxFile,\n            relationships: packageRelationships,\n            relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n            basePath: \"\",\n            fallbackPath: \"word/document.xml\"\n        });\n        if (!docxFile.exists(mainDocumentPath)) {\n            throw new Error(\"Could not find main document part. Are you sure this is a valid .docx file?\");\n        }\n        return xmlFileReader({\n            filename: relationshipsFilename(mainDocumentPath),\n            readElement: relationshipsReader.readRelationships,\n            defaultValue: relationshipsReader.defaultValue\n        })(docxFile).then(function(documentRelationships) {\n            function findPartRelatedToMainDocument(name) {\n                return findPartPath({\n                    docxFile: docxFile,\n                    relationships: documentRelationships,\n                    relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/\" + name,\n                    basePath: zipfile.splitPath(mainDocumentPath).dirname,\n                    fallbackPath: \"word/\" + name + \".xml\"\n                });\n            }\n            return {\n                mainDocument: mainDocumentPath,\n                comments: findPartRelatedToMainDocument(\"comments\"),\n                endnotes: findPartRelatedToMainDocument(\"endnotes\"),\n                footnotes: findPartRelatedToMainDocument(\"footnotes\"),\n                numbering: findPartRelatedToMainDocument(\"numbering\"),\n                styles: findPartRelatedToMainDocument(\"styles\")\n            };\n        });\n    });\n}\nfunction findPartPath(options) {\n    var docxFile = options.docxFile;\n    var relationships = options.relationships;\n    var relationshipType = options.relationshipType;\n    var basePath = options.basePath;\n    var fallbackPath = options.fallbackPath;\n    var targets = relationships.findTargetsByType(relationshipType);\n    var normalisedTargets = targets.map(function(target) {\n        return stripPrefix(zipfile.joinPath(basePath, target), \"/\");\n    });\n    var validTargets = normalisedTargets.filter(function(target) {\n        return docxFile.exists(target);\n    });\n    if (validTargets.length === 0) {\n        return fallbackPath;\n    } else {\n        return validTargets[0];\n    }\n}\nfunction stripPrefix(value, prefix) {\n    if (value.substring(0, prefix.length) === prefix) {\n        return value.substring(prefix.length);\n    } else {\n        return value;\n    }\n}\nfunction xmlFileReader(options) {\n    return function(zipFile) {\n        return readXmlFromZipFile(zipFile, options.filename).then(function(element) {\n            return element ? options.readElement(element) : options.defaultValue;\n        });\n    };\n}\nfunction readXmlFileWithBody(filename, options, func) {\n    var readRelationshipsFromZipFile = xmlFileReader({\n        filename: relationshipsFilename(filename),\n        readElement: relationshipsReader.readRelationships,\n        defaultValue: relationshipsReader.defaultValue\n    });\n    return readRelationshipsFromZipFile(options.docxFile).then(function(relationships) {\n        var bodyReader = new createBodyReader({\n            relationships: relationships,\n            contentTypes: options.contentTypes,\n            docxFile: options.docxFile,\n            numbering: options.numbering,\n            styles: options.styles,\n            files: options.files\n        });\n        return readXmlFromZipFile(options.docxFile, filename).then(function(xml) {\n            return func(bodyReader, xml);\n        });\n    });\n}\nfunction relationshipsFilename(filename) {\n    var split = zipfile.splitPath(filename);\n    return zipfile.joinPath(split.dirname, \"_rels\", split.basename + \".rels\");\n}\nvar readContentTypesFromZipFile = xmlFileReader({\n    filename: \"[Content_Types].xml\",\n    readElement: contentTypesReader.readContentTypesFromXml,\n    defaultValue: contentTypesReader.defaultContentTypes\n});\nfunction readNumberingFromZipFile(zipFile, path, styles) {\n    return xmlFileReader({\n        filename: path,\n        readElement: function(element) {\n            return numberingXml.readNumberingXml(element, {\n                styles: styles\n            });\n        },\n        defaultValue: numberingXml.defaultNumbering\n    })(zipFile);\n}\nfunction readStylesFromZipFile(zipFile, path) {\n    return xmlFileReader({\n        filename: path,\n        readElement: stylesReader.readStylesXml,\n        defaultValue: stylesReader.defaultStyles\n    })(zipFile);\n}\nvar readPackageRelationships = xmlFileReader({\n    filename: \"_rels/.rels\",\n    readElement: relationshipsReader.readRelationships,\n    defaultValue: relationshipsReader.defaultValue\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/docx-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/files.js":
/*!*************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/files.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar os = __webpack_require__(/*! os */ \"os\");\nvar dirname = (__webpack_require__(/*! path */ \"path\").dirname);\nvar resolvePath = (__webpack_require__(/*! path */ \"path\").resolve);\nvar isAbsolutePath = __webpack_require__(/*! path-is-absolute */ \"(ssr)/../node_modules/path-is-absolute/index.js\");\nvar promises = __webpack_require__(/*! ../promises */ \"(ssr)/../node_modules/mammoth/lib/promises.js\");\nexports.Files = Files;\nexports.uriToPath = uriToPath;\nfunction Files(base) {\n    function read(uri, encoding) {\n        return resolveUri(uri).then(function(path) {\n            return readFile(path, encoding).caught(function(error) {\n                var message = \"could not open external image: '\" + uri + \"' (document directory: '\" + base + \"')\\n\" + error.message;\n                return promises.reject(new Error(message));\n            });\n        });\n    }\n    function resolveUri(uri) {\n        var path = uriToPath(uri);\n        if (isAbsolutePath(path)) {\n            return promises.resolve(path);\n        } else if (base) {\n            return promises.resolve(resolvePath(base, path));\n        } else {\n            return promises.reject(new Error(\"could not find external image '\" + uri + \"', path of input document is unknown\"));\n        }\n    }\n    return {\n        read: read\n    };\n}\nfunction relativeToFile(filePath) {\n    return new Files(dirname(filePath));\n}\nFiles.relativeToFile = relativeToFile;\nvar readFile = promises.promisify(fs.readFile.bind(fs));\nfunction uriToPath(uriString, platform) {\n    if (!platform) {\n        platform = os.platform();\n    }\n    var uri = url.parse(uriString);\n    if (isLocalFileUri(uri) || isRelativeUri(uri)) {\n        var path = decodeURIComponent(uri.path);\n        if (platform === \"win32\" && /^\\/[a-z]:/i.test(path)) {\n            return path.slice(1);\n        } else {\n            return path;\n        }\n    } else {\n        throw new Error(\"Could not convert URI to path: \" + uriString);\n    }\n}\nfunction isLocalFileUri(uri) {\n    return uri.protocol === \"file:\" && (!uri.host || uri.host === \"localhost\");\n}\nfunction isRelativeUri(uri) {\n    return !uri.protocol && !uri.host;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvZmlsZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsS0FBS0MsbUJBQU9BLENBQUMsY0FBSTtBQUNyQixJQUFJQyxNQUFNRCxtQkFBT0EsQ0FBQyxnQkFBSztBQUN2QixJQUFJRSxLQUFLRixtQkFBT0EsQ0FBQyxjQUFJO0FBQ3JCLElBQUlHLFVBQVVILGlEQUF1QjtBQUNyQyxJQUFJSSxjQUFjSixpREFBdUI7QUFDekMsSUFBSU0saUJBQWlCTixtQkFBT0EsQ0FBQztBQUU3QixJQUFJTyxXQUFXUCxtQkFBT0EsQ0FBQyxrRUFBYTtBQUdwQ1EsYUFBYSxHQUFHQztBQUNoQkQsaUJBQWlCLEdBQUdFO0FBR3BCLFNBQVNELE1BQU1FLElBQUk7SUFDZixTQUFTQyxLQUFLQyxHQUFHLEVBQUVDLFFBQVE7UUFDdkIsT0FBT0MsV0FBV0YsS0FBS0csSUFBSSxDQUFDLFNBQVNDLElBQUk7WUFDckMsT0FBT0MsU0FBU0QsTUFBTUgsVUFBVUssTUFBTSxDQUFDLFNBQVNDLEtBQUs7Z0JBQ2pELElBQUlDLFVBQVUscUNBQXFDUixNQUFNLDZCQUE2QkYsT0FBTyxTQUFTUyxNQUFNQyxPQUFPO2dCQUNuSCxPQUFPZCxTQUFTZSxNQUFNLENBQUMsSUFBSUMsTUFBTUY7WUFDckM7UUFDSjtJQUNKO0lBRUEsU0FBU04sV0FBV0YsR0FBRztRQUNuQixJQUFJSSxPQUFPUCxVQUFVRztRQUNyQixJQUFJUCxlQUFlVyxPQUFPO1lBQ3RCLE9BQU9WLFNBQVNGLE9BQU8sQ0FBQ1k7UUFDNUIsT0FBTyxJQUFJTixNQUFNO1lBQ2IsT0FBT0osU0FBU0YsT0FBTyxDQUFDRCxZQUFZTyxNQUFNTTtRQUM5QyxPQUFPO1lBQ0gsT0FBT1YsU0FBU2UsTUFBTSxDQUFDLElBQUlDLE1BQU0sb0NBQW9DVixNQUFNO1FBQy9FO0lBQ0o7SUFFQSxPQUFPO1FBQ0hELE1BQU1BO0lBQ1Y7QUFDSjtBQUdBLFNBQVNZLGVBQWVDLFFBQVE7SUFDNUIsT0FBTyxJQUFJaEIsTUFBTU4sUUFBUXNCO0FBQzdCO0FBRUFoQixNQUFNZSxjQUFjLEdBQUdBO0FBR3ZCLElBQUlOLFdBQVdYLFNBQVNtQixTQUFTLENBQUMzQixHQUFHbUIsUUFBUSxDQUFDUyxJQUFJLENBQUM1QjtBQUduRCxTQUFTVyxVQUFVa0IsU0FBUyxFQUFFQyxRQUFRO0lBQ2xDLElBQUksQ0FBQ0EsVUFBVTtRQUNYQSxXQUFXM0IsR0FBRzJCLFFBQVE7SUFDMUI7SUFFQSxJQUFJaEIsTUFBTVosSUFBSTZCLEtBQUssQ0FBQ0Y7SUFDcEIsSUFBSUcsZUFBZWxCLFFBQVFtQixjQUFjbkIsTUFBTTtRQUMzQyxJQUFJSSxPQUFPZ0IsbUJBQW1CcEIsSUFBSUksSUFBSTtRQUN0QyxJQUFJWSxhQUFhLFdBQVcsYUFBYUssSUFBSSxDQUFDakIsT0FBTztZQUNqRCxPQUFPQSxLQUFLa0IsS0FBSyxDQUFDO1FBQ3RCLE9BQU87WUFDSCxPQUFPbEI7UUFDWDtJQUNKLE9BQU87UUFDSCxNQUFNLElBQUlNLE1BQU0sb0NBQW9DSztJQUN4RDtBQUNKO0FBRUEsU0FBU0csZUFBZWxCLEdBQUc7SUFDdkIsT0FBT0EsSUFBSXVCLFFBQVEsS0FBSyxXQUFZLEVBQUN2QixJQUFJd0IsSUFBSSxJQUFJeEIsSUFBSXdCLElBQUksS0FBSyxXQUFVO0FBQzVFO0FBRUEsU0FBU0wsY0FBY25CLEdBQUc7SUFDdEIsT0FBTyxDQUFDQSxJQUFJdUIsUUFBUSxJQUFJLENBQUN2QixJQUFJd0IsSUFBSTtBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvZG9jeC9maWxlcy5qcz9kNDEyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbnZhciB1cmwgPSByZXF1aXJlKFwidXJsXCIpO1xudmFyIG9zID0gcmVxdWlyZShcIm9zXCIpO1xudmFyIGRpcm5hbWUgPSByZXF1aXJlKFwicGF0aFwiKS5kaXJuYW1lO1xudmFyIHJlc29sdmVQYXRoID0gcmVxdWlyZShcInBhdGhcIikucmVzb2x2ZTtcbnZhciBpc0Fic29sdXRlUGF0aCA9IHJlcXVpcmUoJ3BhdGgtaXMtYWJzb2x1dGUnKTtcblxudmFyIHByb21pc2VzID0gcmVxdWlyZShcIi4uL3Byb21pc2VzXCIpO1xuXG5cbmV4cG9ydHMuRmlsZXMgPSBGaWxlcztcbmV4cG9ydHMudXJpVG9QYXRoID0gdXJpVG9QYXRoO1xuXG5cbmZ1bmN0aW9uIEZpbGVzKGJhc2UpIHtcbiAgICBmdW5jdGlvbiByZWFkKHVyaSwgZW5jb2RpbmcpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVVcmkodXJpKS50aGVuKGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkRmlsZShwYXRoLCBlbmNvZGluZykuY2F1Z2h0KGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBcImNvdWxkIG5vdCBvcGVuIGV4dGVybmFsIGltYWdlOiAnXCIgKyB1cmkgKyBcIicgKGRvY3VtZW50IGRpcmVjdG9yeTogJ1wiICsgYmFzZSArIFwiJylcXG5cIiArIGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VzLnJlamVjdChuZXcgRXJyb3IobWVzc2FnZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVVcmkodXJpKSB7XG4gICAgICAgIHZhciBwYXRoID0gdXJpVG9QYXRoKHVyaSk7XG4gICAgICAgIGlmIChpc0Fic29sdXRlUGF0aChwYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VzLnJlc29sdmUocGF0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYmFzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VzLnJlc29sdmUocmVzb2x2ZVBhdGgoYmFzZSwgcGF0aCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VzLnJlamVjdChuZXcgRXJyb3IoXCJjb3VsZCBub3QgZmluZCBleHRlcm5hbCBpbWFnZSAnXCIgKyB1cmkgKyBcIicsIHBhdGggb2YgaW5wdXQgZG9jdW1lbnQgaXMgdW5rbm93blwiKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZWFkOiByZWFkXG4gICAgfTtcbn1cblxuXG5mdW5jdGlvbiByZWxhdGl2ZVRvRmlsZShmaWxlUGF0aCkge1xuICAgIHJldHVybiBuZXcgRmlsZXMoZGlybmFtZShmaWxlUGF0aCkpO1xufVxuXG5GaWxlcy5yZWxhdGl2ZVRvRmlsZSA9IHJlbGF0aXZlVG9GaWxlO1xuXG5cbnZhciByZWFkRmlsZSA9IHByb21pc2VzLnByb21pc2lmeShmcy5yZWFkRmlsZS5iaW5kKGZzKSk7XG5cblxuZnVuY3Rpb24gdXJpVG9QYXRoKHVyaVN0cmluZywgcGxhdGZvcm0pIHtcbiAgICBpZiAoIXBsYXRmb3JtKSB7XG4gICAgICAgIHBsYXRmb3JtID0gb3MucGxhdGZvcm0oKTtcbiAgICB9XG5cbiAgICB2YXIgdXJpID0gdXJsLnBhcnNlKHVyaVN0cmluZyk7XG4gICAgaWYgKGlzTG9jYWxGaWxlVXJpKHVyaSkgfHwgaXNSZWxhdGl2ZVVyaSh1cmkpKSB7XG4gICAgICAgIHZhciBwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KHVyaS5wYXRoKTtcbiAgICAgICAgaWYgKHBsYXRmb3JtID09PSBcIndpbjMyXCIgJiYgL15cXC9bYS16XTovaS50ZXN0KHBhdGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aC5zbGljZSgxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGNvbnZlcnQgVVJJIHRvIHBhdGg6IFwiICsgdXJpU3RyaW5nKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzTG9jYWxGaWxlVXJpKHVyaSkge1xuICAgIHJldHVybiB1cmkucHJvdG9jb2wgPT09IFwiZmlsZTpcIiAmJiAoIXVyaS5ob3N0IHx8IHVyaS5ob3N0ID09PSBcImxvY2FsaG9zdFwiKTtcbn1cblxuZnVuY3Rpb24gaXNSZWxhdGl2ZVVyaSh1cmkpIHtcbiAgICByZXR1cm4gIXVyaS5wcm90b2NvbCAmJiAhdXJpLmhvc3Q7XG59XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwidXJsIiwib3MiLCJkaXJuYW1lIiwicmVzb2x2ZVBhdGgiLCJyZXNvbHZlIiwiaXNBYnNvbHV0ZVBhdGgiLCJwcm9taXNlcyIsImV4cG9ydHMiLCJGaWxlcyIsInVyaVRvUGF0aCIsImJhc2UiLCJyZWFkIiwidXJpIiwiZW5jb2RpbmciLCJyZXNvbHZlVXJpIiwidGhlbiIsInBhdGgiLCJyZWFkRmlsZSIsImNhdWdodCIsImVycm9yIiwibWVzc2FnZSIsInJlamVjdCIsIkVycm9yIiwicmVsYXRpdmVUb0ZpbGUiLCJmaWxlUGF0aCIsInByb21pc2lmeSIsImJpbmQiLCJ1cmlTdHJpbmciLCJwbGF0Zm9ybSIsInBhcnNlIiwiaXNMb2NhbEZpbGVVcmkiLCJpc1JlbGF0aXZlVXJpIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidGVzdCIsInNsaWNlIiwicHJvdG9jb2wiLCJob3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/files.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/notes-reader.js":
/*!********************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/notes-reader.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("var documents = __webpack_require__(/*! ../documents */ \"(ssr)/../node_modules/mammoth/lib/documents.js\");\nvar Result = (__webpack_require__(/*! ../results */ \"(ssr)/../node_modules/mammoth/lib/results.js\").Result);\nexports.createFootnotesReader = createReader.bind(this, \"footnote\");\nexports.createEndnotesReader = createReader.bind(this, \"endnote\");\nfunction createReader(noteType, bodyReader) {\n    function readNotesXml(element) {\n        return Result.combine(element.getElementsByTagName(\"w:\" + noteType).filter(isFootnoteElement).map(readFootnoteElement));\n    }\n    function isFootnoteElement(element) {\n        var type = element.attributes[\"w:type\"];\n        return type !== \"continuationSeparator\" && type !== \"separator\";\n    }\n    function readFootnoteElement(footnoteElement) {\n        var id = footnoteElement.attributes[\"w:id\"];\n        return bodyReader.readXmlElements(footnoteElement.children).map(function(body) {\n            return documents.Note({\n                noteType: noteType,\n                noteId: id,\n                body: body\n            });\n        });\n    }\n    return readNotesXml;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvbm90ZXMtcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLG9FQUFjO0FBQ3RDLElBQUlDLFNBQVNELDhGQUE0QjtBQUV6Q0UsNkJBQTZCLEdBQUdFLGFBQWFDLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDeERILDRCQUE0QixHQUFHRSxhQUFhQyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBRXZELFNBQVNELGFBQWFHLFFBQVEsRUFBRUMsVUFBVTtJQUN0QyxTQUFTQyxhQUFhQyxPQUFPO1FBQ3pCLE9BQU9ULE9BQU9VLE9BQU8sQ0FBQ0QsUUFBUUUsb0JBQW9CLENBQUMsT0FBT0wsVUFDckRNLE1BQU0sQ0FBQ0MsbUJBQ1BDLEdBQUcsQ0FBQ0M7SUFDYjtJQUVBLFNBQVNGLGtCQUFrQkosT0FBTztRQUM5QixJQUFJTyxPQUFPUCxRQUFRUSxVQUFVLENBQUMsU0FBUztRQUN2QyxPQUFPRCxTQUFTLDJCQUEyQkEsU0FBUztJQUN4RDtJQUVBLFNBQVNELG9CQUFvQkcsZUFBZTtRQUN4QyxJQUFJQyxLQUFLRCxnQkFBZ0JELFVBQVUsQ0FBQyxPQUFPO1FBQzNDLE9BQU9WLFdBQVdhLGVBQWUsQ0FBQ0YsZ0JBQWdCRyxRQUFRLEVBQ3JEUCxHQUFHLENBQUMsU0FBU1EsSUFBSTtZQUNkLE9BQU94QixVQUFVeUIsSUFBSSxDQUFDO2dCQUFDakIsVUFBVUE7Z0JBQVVrQixRQUFRTDtnQkFBSUcsTUFBTUE7WUFBSTtRQUNyRTtJQUNSO0lBRUEsT0FBT2Q7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvZG9jeC9ub3Rlcy1yZWFkZXIuanM/YThjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZG9jdW1lbnRzID0gcmVxdWlyZShcIi4uL2RvY3VtZW50c1wiKTtcbnZhciBSZXN1bHQgPSByZXF1aXJlKFwiLi4vcmVzdWx0c1wiKS5SZXN1bHQ7XG5cbmV4cG9ydHMuY3JlYXRlRm9vdG5vdGVzUmVhZGVyID0gY3JlYXRlUmVhZGVyLmJpbmQodGhpcywgXCJmb290bm90ZVwiKTtcbmV4cG9ydHMuY3JlYXRlRW5kbm90ZXNSZWFkZXIgPSBjcmVhdGVSZWFkZXIuYmluZCh0aGlzLCBcImVuZG5vdGVcIik7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWRlcihub3RlVHlwZSwgYm9keVJlYWRlcikge1xuICAgIGZ1bmN0aW9uIHJlYWROb3Rlc1htbChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuY29tYmluZShlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidzpcIiArIG5vdGVUeXBlKVxuICAgICAgICAgICAgLmZpbHRlcihpc0Zvb3Rub3RlRWxlbWVudClcbiAgICAgICAgICAgIC5tYXAocmVhZEZvb3Rub3RlRWxlbWVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRm9vdG5vdGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBlbGVtZW50LmF0dHJpYnV0ZXNbXCJ3OnR5cGVcIl07XG4gICAgICAgIHJldHVybiB0eXBlICE9PSBcImNvbnRpbnVhdGlvblNlcGFyYXRvclwiICYmIHR5cGUgIT09IFwic2VwYXJhdG9yXCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZEZvb3Rub3RlRWxlbWVudChmb290bm90ZUVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlkID0gZm9vdG5vdGVFbGVtZW50LmF0dHJpYnV0ZXNbXCJ3OmlkXCJdO1xuICAgICAgICByZXR1cm4gYm9keVJlYWRlci5yZWFkWG1sRWxlbWVudHMoZm9vdG5vdGVFbGVtZW50LmNoaWxkcmVuKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbihib2R5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50cy5Ob3RlKHtub3RlVHlwZTogbm90ZVR5cGUsIG5vdGVJZDogaWQsIGJvZHk6IGJvZHl9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcmVhZE5vdGVzWG1sO1xufVxuIl0sIm5hbWVzIjpbImRvY3VtZW50cyIsInJlcXVpcmUiLCJSZXN1bHQiLCJleHBvcnRzIiwiY3JlYXRlRm9vdG5vdGVzUmVhZGVyIiwiY3JlYXRlUmVhZGVyIiwiYmluZCIsImNyZWF0ZUVuZG5vdGVzUmVhZGVyIiwibm90ZVR5cGUiLCJib2R5UmVhZGVyIiwicmVhZE5vdGVzWG1sIiwiZWxlbWVudCIsImNvbWJpbmUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImZpbHRlciIsImlzRm9vdG5vdGVFbGVtZW50IiwibWFwIiwicmVhZEZvb3Rub3RlRWxlbWVudCIsInR5cGUiLCJhdHRyaWJ1dGVzIiwiZm9vdG5vdGVFbGVtZW50IiwiaWQiLCJyZWFkWG1sRWxlbWVudHMiLCJjaGlsZHJlbiIsImJvZHkiLCJOb3RlIiwibm90ZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/notes-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/numbering-xml.js":
/*!*********************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/numbering-xml.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nexports.readNumberingXml = readNumberingXml;\nexports.Numbering = Numbering;\nexports.defaultNumbering = new Numbering({}, {});\nfunction Numbering(nums, abstractNums, styles) {\n    var allLevels = _.flatten(_.values(abstractNums).map(function(abstractNum) {\n        return _.values(abstractNum.levels);\n    }));\n    var levelsByParagraphStyleId = _.indexBy(allLevels.filter(function(level) {\n        return level.paragraphStyleId != null;\n    }), \"paragraphStyleId\");\n    function findLevel(numId, level) {\n        var num = nums[numId];\n        if (num) {\n            var abstractNum = abstractNums[num.abstractNumId];\n            if (!abstractNum) {\n                return null;\n            } else if (abstractNum.numStyleLink == null) {\n                return abstractNums[num.abstractNumId].levels[level];\n            } else {\n                var style = styles.findNumberingStyleById(abstractNum.numStyleLink);\n                return findLevel(style.numId, level);\n            }\n        } else {\n            return null;\n        }\n    }\n    function findLevelByParagraphStyleId(styleId) {\n        return levelsByParagraphStyleId[styleId] || null;\n    }\n    return {\n        findLevel: findLevel,\n        findLevelByParagraphStyleId: findLevelByParagraphStyleId\n    };\n}\nfunction readNumberingXml(root, options) {\n    if (!options || !options.styles) {\n        throw new Error(\"styles is missing\");\n    }\n    var abstractNums = readAbstractNums(root);\n    var nums = readNums(root, abstractNums);\n    return new Numbering(nums, abstractNums, options.styles);\n}\nfunction readAbstractNums(root) {\n    var abstractNums = {};\n    root.getElementsByTagName(\"w:abstractNum\").forEach(function(element) {\n        var id = element.attributes[\"w:abstractNumId\"];\n        abstractNums[id] = readAbstractNum(element);\n    });\n    return abstractNums;\n}\nfunction readAbstractNum(element) {\n    var levels = {};\n    element.getElementsByTagName(\"w:lvl\").forEach(function(levelElement) {\n        var levelIndex = levelElement.attributes[\"w:ilvl\"];\n        var numFmt = levelElement.firstOrEmpty(\"w:numFmt\").attributes[\"w:val\"];\n        var paragraphStyleId = levelElement.firstOrEmpty(\"w:pStyle\").attributes[\"w:val\"];\n        levels[levelIndex] = {\n            isOrdered: numFmt !== \"bullet\",\n            level: levelIndex,\n            paragraphStyleId: paragraphStyleId\n        };\n    });\n    var numStyleLink = element.firstOrEmpty(\"w:numStyleLink\").attributes[\"w:val\"];\n    return {\n        levels: levels,\n        numStyleLink: numStyleLink\n    };\n}\nfunction readNums(root) {\n    var nums = {};\n    root.getElementsByTagName(\"w:num\").forEach(function(element) {\n        var numId = element.attributes[\"w:numId\"];\n        var abstractNumId = element.first(\"w:abstractNumId\").attributes[\"w:val\"];\n        nums[numId] = {\n            abstractNumId: abstractNumId\n        };\n    });\n    return nums;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvbnVtYmVyaW5nLXhtbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxJQUFJQyxtQkFBT0EsQ0FBQyx5RUFBWTtBQUU1QkMsd0JBQXdCLEdBQUdDO0FBQzNCRCxpQkFBaUIsR0FBR0U7QUFDcEJGLHdCQUF3QixHQUFHLElBQUlFLFVBQVUsQ0FBQyxHQUFHLENBQUM7QUFFOUMsU0FBU0EsVUFBVUUsSUFBSSxFQUFFQyxZQUFZLEVBQUVDLE1BQU07SUFDekMsSUFBSUMsWUFBWVQsRUFBRVUsT0FBTyxDQUFDVixFQUFFVyxNQUFNLENBQUNKLGNBQWNLLEdBQUcsQ0FBQyxTQUFTQyxXQUFXO1FBQ3JFLE9BQU9iLEVBQUVXLE1BQU0sQ0FBQ0UsWUFBWUMsTUFBTTtJQUN0QztJQUVBLElBQUlDLDJCQUEyQmYsRUFBRWdCLE9BQU8sQ0FDcENQLFVBQVVRLE1BQU0sQ0FBQyxTQUFTQyxLQUFLO1FBQzNCLE9BQU9BLE1BQU1DLGdCQUFnQixJQUFJO0lBQ3JDLElBQ0E7SUFHSixTQUFTQyxVQUFVQyxLQUFLLEVBQUVILEtBQUs7UUFDM0IsSUFBSUksTUFBTWhCLElBQUksQ0FBQ2UsTUFBTTtRQUNyQixJQUFJQyxLQUFLO1lBQ0wsSUFBSVQsY0FBY04sWUFBWSxDQUFDZSxJQUFJQyxhQUFhLENBQUM7WUFDakQsSUFBSSxDQUFDVixhQUFhO2dCQUNkLE9BQU87WUFDWCxPQUFPLElBQUlBLFlBQVlXLFlBQVksSUFBSSxNQUFNO2dCQUN6QyxPQUFPakIsWUFBWSxDQUFDZSxJQUFJQyxhQUFhLENBQUMsQ0FBQ1QsTUFBTSxDQUFDSSxNQUFNO1lBQ3hELE9BQU87Z0JBQ0gsSUFBSU8sUUFBUWpCLE9BQU9rQixzQkFBc0IsQ0FBQ2IsWUFBWVcsWUFBWTtnQkFDbEUsT0FBT0osVUFBVUssTUFBTUosS0FBSyxFQUFFSDtZQUNsQztRQUNKLE9BQU87WUFDSCxPQUFPO1FBQ1g7SUFDSjtJQUVBLFNBQVNTLDRCQUE0QkMsT0FBTztRQUN4QyxPQUFPYix3QkFBd0IsQ0FBQ2EsUUFBUSxJQUFJO0lBQ2hEO0lBRUEsT0FBTztRQUNIUixXQUFXQTtRQUNYTyw2QkFBNkJBO0lBQ2pDO0FBQ0o7QUFFQSxTQUFTeEIsaUJBQWlCMEIsSUFBSSxFQUFFQyxPQUFPO0lBQ25DLElBQUksQ0FBQ0EsV0FBVyxDQUFDQSxRQUFRdEIsTUFBTSxFQUFFO1FBQzdCLE1BQU0sSUFBSXVCLE1BQU07SUFDcEI7SUFFQSxJQUFJeEIsZUFBZXlCLGlCQUFpQkg7SUFDcEMsSUFBSXZCLE9BQU8yQixTQUFTSixNQUFNdEI7SUFDMUIsT0FBTyxJQUFJSCxVQUFVRSxNQUFNQyxjQUFjdUIsUUFBUXRCLE1BQU07QUFDM0Q7QUFFQSxTQUFTd0IsaUJBQWlCSCxJQUFJO0lBQzFCLElBQUl0QixlQUFlLENBQUM7SUFDcEJzQixLQUFLSyxvQkFBb0IsQ0FBQyxpQkFBaUJDLE9BQU8sQ0FBQyxTQUFTQyxPQUFPO1FBQy9ELElBQUlDLEtBQUtELFFBQVFFLFVBQVUsQ0FBQyxrQkFBa0I7UUFDOUMvQixZQUFZLENBQUM4QixHQUFHLEdBQUdFLGdCQUFnQkg7SUFDdkM7SUFDQSxPQUFPN0I7QUFDWDtBQUVBLFNBQVNnQyxnQkFBZ0JILE9BQU87SUFDNUIsSUFBSXRCLFNBQVMsQ0FBQztJQUNkc0IsUUFBUUYsb0JBQW9CLENBQUMsU0FBU0MsT0FBTyxDQUFDLFNBQVNLLFlBQVk7UUFDL0QsSUFBSUMsYUFBYUQsYUFBYUYsVUFBVSxDQUFDLFNBQVM7UUFDbEQsSUFBSUksU0FBU0YsYUFBYUcsWUFBWSxDQUFDLFlBQVlMLFVBQVUsQ0FBQyxRQUFRO1FBQ3RFLElBQUluQixtQkFBbUJxQixhQUFhRyxZQUFZLENBQUMsWUFBWUwsVUFBVSxDQUFDLFFBQVE7UUFFaEZ4QixNQUFNLENBQUMyQixXQUFXLEdBQUc7WUFDakJHLFdBQVdGLFdBQVc7WUFDdEJ4QixPQUFPdUI7WUFDUHRCLGtCQUFrQkE7UUFDdEI7SUFDSjtJQUVBLElBQUlLLGVBQWVZLFFBQVFPLFlBQVksQ0FBQyxrQkFBa0JMLFVBQVUsQ0FBQyxRQUFRO0lBRTdFLE9BQU87UUFBQ3hCLFFBQVFBO1FBQVFVLGNBQWNBO0lBQVk7QUFDdEQ7QUFFQSxTQUFTUyxTQUFTSixJQUFJO0lBQ2xCLElBQUl2QixPQUFPLENBQUM7SUFDWnVCLEtBQUtLLG9CQUFvQixDQUFDLFNBQVNDLE9BQU8sQ0FBQyxTQUFTQyxPQUFPO1FBQ3ZELElBQUlmLFFBQVFlLFFBQVFFLFVBQVUsQ0FBQyxVQUFVO1FBQ3pDLElBQUlmLGdCQUFnQmEsUUFBUVMsS0FBSyxDQUFDLG1CQUFtQlAsVUFBVSxDQUFDLFFBQVE7UUFDeEVoQyxJQUFJLENBQUNlLE1BQU0sR0FBRztZQUFDRSxlQUFlQTtRQUFhO0lBQy9DO0lBQ0EsT0FBT2pCO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvbnVtYmVyaW5nLXhtbC5qcz8xNDFlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfID0gcmVxdWlyZShcInVuZGVyc2NvcmVcIik7XG5cbmV4cG9ydHMucmVhZE51bWJlcmluZ1htbCA9IHJlYWROdW1iZXJpbmdYbWw7XG5leHBvcnRzLk51bWJlcmluZyA9IE51bWJlcmluZztcbmV4cG9ydHMuZGVmYXVsdE51bWJlcmluZyA9IG5ldyBOdW1iZXJpbmcoe30sIHt9KTtcblxuZnVuY3Rpb24gTnVtYmVyaW5nKG51bXMsIGFic3RyYWN0TnVtcywgc3R5bGVzKSB7XG4gICAgdmFyIGFsbExldmVscyA9IF8uZmxhdHRlbihfLnZhbHVlcyhhYnN0cmFjdE51bXMpLm1hcChmdW5jdGlvbihhYnN0cmFjdE51bSkge1xuICAgICAgICByZXR1cm4gXy52YWx1ZXMoYWJzdHJhY3ROdW0ubGV2ZWxzKTtcbiAgICB9KSk7XG5cbiAgICB2YXIgbGV2ZWxzQnlQYXJhZ3JhcGhTdHlsZUlkID0gXy5pbmRleEJ5KFxuICAgICAgICBhbGxMZXZlbHMuZmlsdGVyKGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gbGV2ZWwucGFyYWdyYXBoU3R5bGVJZCAhPSBudWxsO1xuICAgICAgICB9KSxcbiAgICAgICAgXCJwYXJhZ3JhcGhTdHlsZUlkXCJcbiAgICApO1xuXG4gICAgZnVuY3Rpb24gZmluZExldmVsKG51bUlkLCBsZXZlbCkge1xuICAgICAgICB2YXIgbnVtID0gbnVtc1tudW1JZF07XG4gICAgICAgIGlmIChudW0pIHtcbiAgICAgICAgICAgIHZhciBhYnN0cmFjdE51bSA9IGFic3RyYWN0TnVtc1tudW0uYWJzdHJhY3ROdW1JZF07XG4gICAgICAgICAgICBpZiAoIWFic3RyYWN0TnVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFic3RyYWN0TnVtLm51bVN0eWxlTGluayA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFic3RyYWN0TnVtc1tudW0uYWJzdHJhY3ROdW1JZF0ubGV2ZWxzW2xldmVsXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gc3R5bGVzLmZpbmROdW1iZXJpbmdTdHlsZUJ5SWQoYWJzdHJhY3ROdW0ubnVtU3R5bGVMaW5rKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmluZExldmVsKHN0eWxlLm51bUlkLCBsZXZlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmRMZXZlbEJ5UGFyYWdyYXBoU3R5bGVJZChzdHlsZUlkKSB7XG4gICAgICAgIHJldHVybiBsZXZlbHNCeVBhcmFncmFwaFN0eWxlSWRbc3R5bGVJZF0gfHwgbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmaW5kTGV2ZWw6IGZpbmRMZXZlbCxcbiAgICAgICAgZmluZExldmVsQnlQYXJhZ3JhcGhTdHlsZUlkOiBmaW5kTGV2ZWxCeVBhcmFncmFwaFN0eWxlSWRcbiAgICB9O1xufVxuXG5mdW5jdGlvbiByZWFkTnVtYmVyaW5nWG1sKHJvb3QsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuc3R5bGVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInN0eWxlcyBpcyBtaXNzaW5nXCIpO1xuICAgIH1cblxuICAgIHZhciBhYnN0cmFjdE51bXMgPSByZWFkQWJzdHJhY3ROdW1zKHJvb3QpO1xuICAgIHZhciBudW1zID0gcmVhZE51bXMocm9vdCwgYWJzdHJhY3ROdW1zKTtcbiAgICByZXR1cm4gbmV3IE51bWJlcmluZyhudW1zLCBhYnN0cmFjdE51bXMsIG9wdGlvbnMuc3R5bGVzKTtcbn1cblxuZnVuY3Rpb24gcmVhZEFic3RyYWN0TnVtcyhyb290KSB7XG4gICAgdmFyIGFic3RyYWN0TnVtcyA9IHt9O1xuICAgIHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ3OmFic3RyYWN0TnVtXCIpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgaWQgPSBlbGVtZW50LmF0dHJpYnV0ZXNbXCJ3OmFic3RyYWN0TnVtSWRcIl07XG4gICAgICAgIGFic3RyYWN0TnVtc1tpZF0gPSByZWFkQWJzdHJhY3ROdW0oZWxlbWVudCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFic3RyYWN0TnVtcztcbn1cblxuZnVuY3Rpb24gcmVhZEFic3RyYWN0TnVtKGVsZW1lbnQpIHtcbiAgICB2YXIgbGV2ZWxzID0ge307XG4gICAgZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInc6bHZsXCIpLmZvckVhY2goZnVuY3Rpb24obGV2ZWxFbGVtZW50KSB7XG4gICAgICAgIHZhciBsZXZlbEluZGV4ID0gbGV2ZWxFbGVtZW50LmF0dHJpYnV0ZXNbXCJ3OmlsdmxcIl07XG4gICAgICAgIHZhciBudW1GbXQgPSBsZXZlbEVsZW1lbnQuZmlyc3RPckVtcHR5KFwidzpudW1GbXRcIikuYXR0cmlidXRlc1tcInc6dmFsXCJdO1xuICAgICAgICB2YXIgcGFyYWdyYXBoU3R5bGVJZCA9IGxldmVsRWxlbWVudC5maXJzdE9yRW1wdHkoXCJ3OnBTdHlsZVwiKS5hdHRyaWJ1dGVzW1widzp2YWxcIl07XG5cbiAgICAgICAgbGV2ZWxzW2xldmVsSW5kZXhdID0ge1xuICAgICAgICAgICAgaXNPcmRlcmVkOiBudW1GbXQgIT09IFwiYnVsbGV0XCIsXG4gICAgICAgICAgICBsZXZlbDogbGV2ZWxJbmRleCxcbiAgICAgICAgICAgIHBhcmFncmFwaFN0eWxlSWQ6IHBhcmFncmFwaFN0eWxlSWRcbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIHZhciBudW1TdHlsZUxpbmsgPSBlbGVtZW50LmZpcnN0T3JFbXB0eShcInc6bnVtU3R5bGVMaW5rXCIpLmF0dHJpYnV0ZXNbXCJ3OnZhbFwiXTtcblxuICAgIHJldHVybiB7bGV2ZWxzOiBsZXZlbHMsIG51bVN0eWxlTGluazogbnVtU3R5bGVMaW5rfTtcbn1cblxuZnVuY3Rpb24gcmVhZE51bXMocm9vdCkge1xuICAgIHZhciBudW1zID0ge307XG4gICAgcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInc6bnVtXCIpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgbnVtSWQgPSBlbGVtZW50LmF0dHJpYnV0ZXNbXCJ3Om51bUlkXCJdO1xuICAgICAgICB2YXIgYWJzdHJhY3ROdW1JZCA9IGVsZW1lbnQuZmlyc3QoXCJ3OmFic3RyYWN0TnVtSWRcIikuYXR0cmlidXRlc1tcInc6dmFsXCJdO1xuICAgICAgICBudW1zW251bUlkXSA9IHthYnN0cmFjdE51bUlkOiBhYnN0cmFjdE51bUlkfTtcbiAgICB9KTtcbiAgICByZXR1cm4gbnVtcztcbn1cbiJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsImV4cG9ydHMiLCJyZWFkTnVtYmVyaW5nWG1sIiwiTnVtYmVyaW5nIiwiZGVmYXVsdE51bWJlcmluZyIsIm51bXMiLCJhYnN0cmFjdE51bXMiLCJzdHlsZXMiLCJhbGxMZXZlbHMiLCJmbGF0dGVuIiwidmFsdWVzIiwibWFwIiwiYWJzdHJhY3ROdW0iLCJsZXZlbHMiLCJsZXZlbHNCeVBhcmFncmFwaFN0eWxlSWQiLCJpbmRleEJ5IiwiZmlsdGVyIiwibGV2ZWwiLCJwYXJhZ3JhcGhTdHlsZUlkIiwiZmluZExldmVsIiwibnVtSWQiLCJudW0iLCJhYnN0cmFjdE51bUlkIiwibnVtU3R5bGVMaW5rIiwic3R5bGUiLCJmaW5kTnVtYmVyaW5nU3R5bGVCeUlkIiwiZmluZExldmVsQnlQYXJhZ3JhcGhTdHlsZUlkIiwic3R5bGVJZCIsInJvb3QiLCJvcHRpb25zIiwiRXJyb3IiLCJyZWFkQWJzdHJhY3ROdW1zIiwicmVhZE51bXMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImZvckVhY2giLCJlbGVtZW50IiwiaWQiLCJhdHRyaWJ1dGVzIiwicmVhZEFic3RyYWN0TnVtIiwibGV2ZWxFbGVtZW50IiwibGV2ZWxJbmRleCIsIm51bUZtdCIsImZpcnN0T3JFbXB0eSIsImlzT3JkZXJlZCIsImZpcnN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/numbering-xml.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/office-xml-reader.js":
/*!*************************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/office-xml-reader.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar promises = __webpack_require__(/*! ../promises */ \"(ssr)/../node_modules/mammoth/lib/promises.js\");\nvar xml = __webpack_require__(/*! ../xml */ \"(ssr)/../node_modules/mammoth/lib/xml/index.js\");\nexports.read = read;\nexports.readXmlFromZipFile = readXmlFromZipFile;\nvar xmlNamespaceMap = {\n    // Transitional format\n    \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\": \"w\",\n    \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\": \"r\",\n    \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\": \"wp\",\n    \"http://schemas.openxmlformats.org/drawingml/2006/main\": \"a\",\n    \"http://schemas.openxmlformats.org/drawingml/2006/picture\": \"pic\",\n    // Strict format\n    \"http://purl.oclc.org/ooxml/wordprocessingml/main\": \"w\",\n    \"http://purl.oclc.org/ooxml/officeDocument/relationships\": \"r\",\n    \"http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing\": \"wp\",\n    \"http://purl.oclc.org/ooxml/drawingml/main\": \"a\",\n    \"http://purl.oclc.org/ooxml/drawingml/picture\": \"pic\",\n    // Common\n    \"http://schemas.openxmlformats.org/package/2006/content-types\": \"content-types\",\n    \"http://schemas.openxmlformats.org/package/2006/relationships\": \"relationships\",\n    \"http://schemas.openxmlformats.org/markup-compatibility/2006\": \"mc\",\n    \"urn:schemas-microsoft-com:vml\": \"v\",\n    \"urn:schemas-microsoft-com:office:word\": \"office-word\",\n    // [MS-DOCX]: Word Extensions to the Office Open XML (.docx) File Format\n    // https://learn.microsoft.com/en-us/openspecs/office_standards/ms-docx/b839fe1f-e1ca-4fa6-8c26-5954d0abbccd\n    \"http://schemas.microsoft.com/office/word/2010/wordml\": \"wordml\"\n};\nfunction read(xmlString) {\n    return xml.readString(xmlString, xmlNamespaceMap).then(function(document) {\n        return collapseAlternateContent(document)[0];\n    });\n}\nfunction readXmlFromZipFile(docxFile, path) {\n    if (docxFile.exists(path)) {\n        return docxFile.read(path, \"utf-8\").then(stripUtf8Bom).then(read);\n    } else {\n        return promises.resolve(null);\n    }\n}\nfunction stripUtf8Bom(xmlString) {\n    return xmlString.replace(/^\\uFEFF/g, \"\");\n}\nfunction collapseAlternateContent(node) {\n    if (node.type === \"element\") {\n        if (node.name === \"mc:AlternateContent\") {\n            return node.firstOrEmpty(\"mc:Fallback\").children;\n        } else {\n            node.children = _.flatten(node.children.map(collapseAlternateContent, true));\n            return [\n                node\n            ];\n        }\n    } else {\n        return [\n            node\n        ];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvb2ZmaWNlLXhtbC1yZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSUMsbUJBQU9BLENBQUMseUVBQVk7QUFFNUIsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUMsa0VBQWE7QUFDcEMsSUFBSUUsTUFBTUYsbUJBQU9BLENBQUMsOERBQVE7QUFHMUJHLFlBQVksR0FBR0M7QUFDZkQsMEJBQTBCLEdBQUdFO0FBRTdCLElBQUlDLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsZ0VBQWdFO0lBQ2hFLHVFQUF1RTtJQUN2RSwwRUFBMEU7SUFDMUUseURBQXlEO0lBQ3pELDREQUE0RDtJQUU1RCxnQkFBZ0I7SUFDaEIsb0RBQW9EO0lBQ3BELDJEQUEyRDtJQUMzRCw4REFBOEQ7SUFDOUQsNkNBQTZDO0lBQzdDLGdEQUFnRDtJQUVoRCxTQUFTO0lBQ1QsZ0VBQWdFO0lBQ2hFLGdFQUFnRTtJQUNoRSwrREFBK0Q7SUFDL0QsaUNBQWlDO0lBQ2pDLHlDQUF5QztJQUV6Qyx3RUFBd0U7SUFDeEUsNEdBQTRHO0lBQzVHLHdEQUF3RDtBQUM1RDtBQUdBLFNBQVNGLEtBQUtHLFNBQVM7SUFDbkIsT0FBT0wsSUFBSU0sVUFBVSxDQUFDRCxXQUFXRCxpQkFDNUJHLElBQUksQ0FBQyxTQUFTQyxRQUFRO1FBQ25CLE9BQU9DLHlCQUF5QkQsU0FBUyxDQUFDLEVBQUU7SUFDaEQ7QUFDUjtBQUdBLFNBQVNMLG1CQUFtQk8sUUFBUSxFQUFFQyxJQUFJO0lBQ3RDLElBQUlELFNBQVNFLE1BQU0sQ0FBQ0QsT0FBTztRQUN2QixPQUFPRCxTQUFTUixJQUFJLENBQUNTLE1BQU0sU0FDdEJKLElBQUksQ0FBQ00sY0FDTE4sSUFBSSxDQUFDTDtJQUNkLE9BQU87UUFDSCxPQUFPSCxTQUFTZSxPQUFPLENBQUM7SUFDNUI7QUFDSjtBQUdBLFNBQVNELGFBQWFSLFNBQVM7SUFDM0IsT0FBT0EsVUFBVVUsT0FBTyxDQUFDLFlBQVk7QUFDekM7QUFHQSxTQUFTTix5QkFBeUJPLElBQUk7SUFDbEMsSUFBSUEsS0FBS0MsSUFBSSxLQUFLLFdBQVc7UUFDekIsSUFBSUQsS0FBS0UsSUFBSSxLQUFLLHVCQUF1QjtZQUNyQyxPQUFPRixLQUFLRyxZQUFZLENBQUMsZUFBZUMsUUFBUTtRQUNwRCxPQUFPO1lBQ0hKLEtBQUtJLFFBQVEsR0FBR3ZCLEVBQUV3QixPQUFPLENBQUNMLEtBQUtJLFFBQVEsQ0FBQ0UsR0FBRyxDQUFDYiwwQkFBMEI7WUFDdEUsT0FBTztnQkFBQ087YUFBSztRQUNqQjtJQUNKLE9BQU87UUFDSCxPQUFPO1lBQUNBO1NBQUs7SUFDakI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvZG9jeC9vZmZpY2UteG1sLXJlYWRlci5qcz9hMWNkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfID0gcmVxdWlyZShcInVuZGVyc2NvcmVcIik7XG5cbnZhciBwcm9taXNlcyA9IHJlcXVpcmUoXCIuLi9wcm9taXNlc1wiKTtcbnZhciB4bWwgPSByZXF1aXJlKFwiLi4veG1sXCIpO1xuXG5cbmV4cG9ydHMucmVhZCA9IHJlYWQ7XG5leHBvcnRzLnJlYWRYbWxGcm9tWmlwRmlsZSA9IHJlYWRYbWxGcm9tWmlwRmlsZTtcblxudmFyIHhtbE5hbWVzcGFjZU1hcCA9IHtcbiAgICAvLyBUcmFuc2l0aW9uYWwgZm9ybWF0XG4gICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvd29yZHByb2Nlc3NpbmdtbC8yMDA2L21haW5cIjogXCJ3XCIsXG4gICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzXCI6IFwiclwiLFxuICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiOiBcIndwXCIsXG4gICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvbWFpblwiOiBcImFcIixcbiAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9waWN0dXJlXCI6IFwicGljXCIsXG5cbiAgICAvLyBTdHJpY3QgZm9ybWF0XG4gICAgXCJodHRwOi8vcHVybC5vY2xjLm9yZy9vb3htbC93b3JkcHJvY2Vzc2luZ21sL21haW5cIjogXCJ3XCIsXG4gICAgXCJodHRwOi8vcHVybC5vY2xjLm9yZy9vb3htbC9vZmZpY2VEb2N1bWVudC9yZWxhdGlvbnNoaXBzXCI6IFwiclwiLFxuICAgIFwiaHR0cDovL3B1cmwub2NsYy5vcmcvb294bWwvZHJhd2luZ21sL3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiOiBcIndwXCIsXG4gICAgXCJodHRwOi8vcHVybC5vY2xjLm9yZy9vb3htbC9kcmF3aW5nbWwvbWFpblwiOiBcImFcIixcbiAgICBcImh0dHA6Ly9wdXJsLm9jbGMub3JnL29veG1sL2RyYXdpbmdtbC9waWN0dXJlXCI6IFwicGljXCIsXG5cbiAgICAvLyBDb21tb25cbiAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvY29udGVudC10eXBlc1wiOiBcImNvbnRlbnQtdHlwZXNcIixcbiAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwc1wiOiBcInJlbGF0aW9uc2hpcHNcIixcbiAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCI6IFwibWNcIixcbiAgICBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXCI6IFwidlwiLFxuICAgIFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiOiBcIm9mZmljZS13b3JkXCIsXG5cbiAgICAvLyBbTVMtRE9DWF06IFdvcmQgRXh0ZW5zaW9ucyB0byB0aGUgT2ZmaWNlIE9wZW4gWE1MICguZG9jeCkgRmlsZSBGb3JtYXRcbiAgICAvLyBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vZW4tdXMvb3BlbnNwZWNzL29mZmljZV9zdGFuZGFyZHMvbXMtZG9jeC9iODM5ZmUxZi1lMWNhLTRmYTYtOGMyNi01OTU0ZDBhYmJjY2RcbiAgICBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkbWxcIjogXCJ3b3JkbWxcIlxufTtcblxuXG5mdW5jdGlvbiByZWFkKHhtbFN0cmluZykge1xuICAgIHJldHVybiB4bWwucmVhZFN0cmluZyh4bWxTdHJpbmcsIHhtbE5hbWVzcGFjZU1hcClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xsYXBzZUFsdGVybmF0ZUNvbnRlbnQoZG9jdW1lbnQpWzBdO1xuICAgICAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiByZWFkWG1sRnJvbVppcEZpbGUoZG9jeEZpbGUsIHBhdGgpIHtcbiAgICBpZiAoZG9jeEZpbGUuZXhpc3RzKHBhdGgpKSB7XG4gICAgICAgIHJldHVybiBkb2N4RmlsZS5yZWFkKHBhdGgsIFwidXRmLThcIilcbiAgICAgICAgICAgIC50aGVuKHN0cmlwVXRmOEJvbSlcbiAgICAgICAgICAgIC50aGVuKHJlYWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlcy5yZXNvbHZlKG51bGwpO1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBzdHJpcFV0ZjhCb20oeG1sU3RyaW5nKSB7XG4gICAgcmV0dXJuIHhtbFN0cmluZy5yZXBsYWNlKC9eXFx1RkVGRi9nLCAnJyk7XG59XG5cblxuZnVuY3Rpb24gY29sbGFwc2VBbHRlcm5hdGVDb250ZW50KG5vZGUpIHtcbiAgICBpZiAobm9kZS50eXBlID09PSBcImVsZW1lbnRcIikge1xuICAgICAgICBpZiAobm9kZS5uYW1lID09PSBcIm1jOkFsdGVybmF0ZUNvbnRlbnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZmlyc3RPckVtcHR5KFwibWM6RmFsbGJhY2tcIikuY2hpbGRyZW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLmNoaWxkcmVuID0gXy5mbGF0dGVuKG5vZGUuY2hpbGRyZW4ubWFwKGNvbGxhcHNlQWx0ZXJuYXRlQ29udGVudCwgdHJ1ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIFtub2RlXTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbbm9kZV07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwicHJvbWlzZXMiLCJ4bWwiLCJleHBvcnRzIiwicmVhZCIsInJlYWRYbWxGcm9tWmlwRmlsZSIsInhtbE5hbWVzcGFjZU1hcCIsInhtbFN0cmluZyIsInJlYWRTdHJpbmciLCJ0aGVuIiwiZG9jdW1lbnQiLCJjb2xsYXBzZUFsdGVybmF0ZUNvbnRlbnQiLCJkb2N4RmlsZSIsInBhdGgiLCJleGlzdHMiLCJzdHJpcFV0ZjhCb20iLCJyZXNvbHZlIiwicmVwbGFjZSIsIm5vZGUiLCJ0eXBlIiwibmFtZSIsImZpcnN0T3JFbXB0eSIsImNoaWxkcmVuIiwiZmxhdHRlbiIsIm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/office-xml-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/relationships-reader.js":
/*!****************************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/relationships-reader.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.readRelationships = readRelationships;\nexports.defaultValue = new Relationships([]);\nexports.Relationships = Relationships;\nfunction readRelationships(element) {\n    var relationships = [];\n    element.children.forEach(function(child) {\n        if (child.name === \"relationships:Relationship\") {\n            var relationship = {\n                relationshipId: child.attributes.Id,\n                target: child.attributes.Target,\n                type: child.attributes.Type\n            };\n            relationships.push(relationship);\n        }\n    });\n    return new Relationships(relationships);\n}\nfunction Relationships(relationships) {\n    var targetsByRelationshipId = {};\n    relationships.forEach(function(relationship) {\n        targetsByRelationshipId[relationship.relationshipId] = relationship.target;\n    });\n    var targetsByType = {};\n    relationships.forEach(function(relationship) {\n        if (!targetsByType[relationship.type]) {\n            targetsByType[relationship.type] = [];\n        }\n        targetsByType[relationship.type].push(relationship.target);\n    });\n    return {\n        findTargetByRelationshipId: function(relationshipId) {\n            return targetsByRelationshipId[relationshipId];\n        },\n        findTargetsByType: function(type) {\n            return targetsByType[type] || [];\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvcmVsYXRpb25zaGlwcy1yZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUFBLHlCQUF5QixHQUFHQztBQUM1QkQsb0JBQW9CLEdBQUcsSUFBSUcsY0FBYyxFQUFFO0FBQzNDSCxxQkFBcUIsR0FBR0c7QUFHeEIsU0FBU0Ysa0JBQWtCRyxPQUFPO0lBQzlCLElBQUlDLGdCQUFnQixFQUFFO0lBQ3RCRCxRQUFRRSxRQUFRLENBQUNDLE9BQU8sQ0FBQyxTQUFTQyxLQUFLO1FBQ25DLElBQUlBLE1BQU1DLElBQUksS0FBSyw4QkFBOEI7WUFDN0MsSUFBSUMsZUFBZTtnQkFDZkMsZ0JBQWdCSCxNQUFNSSxVQUFVLENBQUNDLEVBQUU7Z0JBQ25DQyxRQUFRTixNQUFNSSxVQUFVLENBQUNHLE1BQU07Z0JBQy9CQyxNQUFNUixNQUFNSSxVQUFVLENBQUNLLElBQUk7WUFDL0I7WUFDQVosY0FBY2EsSUFBSSxDQUFDUjtRQUN2QjtJQUNKO0lBQ0EsT0FBTyxJQUFJUCxjQUFjRTtBQUM3QjtBQUVBLFNBQVNGLGNBQWNFLGFBQWE7SUFDaEMsSUFBSWMsMEJBQTBCLENBQUM7SUFDL0JkLGNBQWNFLE9BQU8sQ0FBQyxTQUFTRyxZQUFZO1FBQ3ZDUyx1QkFBdUIsQ0FBQ1QsYUFBYUMsY0FBYyxDQUFDLEdBQUdELGFBQWFJLE1BQU07SUFDOUU7SUFFQSxJQUFJTSxnQkFBZ0IsQ0FBQztJQUNyQmYsY0FBY0UsT0FBTyxDQUFDLFNBQVNHLFlBQVk7UUFDdkMsSUFBSSxDQUFDVSxhQUFhLENBQUNWLGFBQWFNLElBQUksQ0FBQyxFQUFFO1lBQ25DSSxhQUFhLENBQUNWLGFBQWFNLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDekM7UUFDQUksYUFBYSxDQUFDVixhQUFhTSxJQUFJLENBQUMsQ0FBQ0UsSUFBSSxDQUFDUixhQUFhSSxNQUFNO0lBQzdEO0lBRUEsT0FBTztRQUNITyw0QkFBNEIsU0FBU1YsY0FBYztZQUMvQyxPQUFPUSx1QkFBdUIsQ0FBQ1IsZUFBZTtRQUNsRDtRQUNBVyxtQkFBbUIsU0FBU04sSUFBSTtZQUM1QixPQUFPSSxhQUFhLENBQUNKLEtBQUssSUFBSSxFQUFFO1FBQ3BDO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvZG9jeC9yZWxhdGlvbnNoaXBzLXJlYWRlci5qcz9lOWU2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucmVhZFJlbGF0aW9uc2hpcHMgPSByZWFkUmVsYXRpb25zaGlwcztcbmV4cG9ydHMuZGVmYXVsdFZhbHVlID0gbmV3IFJlbGF0aW9uc2hpcHMoW10pO1xuZXhwb3J0cy5SZWxhdGlvbnNoaXBzID0gUmVsYXRpb25zaGlwcztcblxuXG5mdW5jdGlvbiByZWFkUmVsYXRpb25zaGlwcyhlbGVtZW50KSB7XG4gICAgdmFyIHJlbGF0aW9uc2hpcHMgPSBbXTtcbiAgICBlbGVtZW50LmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgaWYgKGNoaWxkLm5hbWUgPT09IFwicmVsYXRpb25zaGlwczpSZWxhdGlvbnNoaXBcIikge1xuICAgICAgICAgICAgdmFyIHJlbGF0aW9uc2hpcCA9IHtcbiAgICAgICAgICAgICAgICByZWxhdGlvbnNoaXBJZDogY2hpbGQuYXR0cmlidXRlcy5JZCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNoaWxkLmF0dHJpYnV0ZXMuVGFyZ2V0LFxuICAgICAgICAgICAgICAgIHR5cGU6IGNoaWxkLmF0dHJpYnV0ZXMuVHlwZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlbGF0aW9uc2hpcHMucHVzaChyZWxhdGlvbnNoaXApO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBSZWxhdGlvbnNoaXBzKHJlbGF0aW9uc2hpcHMpO1xufVxuXG5mdW5jdGlvbiBSZWxhdGlvbnNoaXBzKHJlbGF0aW9uc2hpcHMpIHtcbiAgICB2YXIgdGFyZ2V0c0J5UmVsYXRpb25zaGlwSWQgPSB7fTtcbiAgICByZWxhdGlvbnNoaXBzLmZvckVhY2goZnVuY3Rpb24ocmVsYXRpb25zaGlwKSB7XG4gICAgICAgIHRhcmdldHNCeVJlbGF0aW9uc2hpcElkW3JlbGF0aW9uc2hpcC5yZWxhdGlvbnNoaXBJZF0gPSByZWxhdGlvbnNoaXAudGFyZ2V0O1xuICAgIH0pO1xuXG4gICAgdmFyIHRhcmdldHNCeVR5cGUgPSB7fTtcbiAgICByZWxhdGlvbnNoaXBzLmZvckVhY2goZnVuY3Rpb24ocmVsYXRpb25zaGlwKSB7XG4gICAgICAgIGlmICghdGFyZ2V0c0J5VHlwZVtyZWxhdGlvbnNoaXAudHlwZV0pIHtcbiAgICAgICAgICAgIHRhcmdldHNCeVR5cGVbcmVsYXRpb25zaGlwLnR5cGVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0c0J5VHlwZVtyZWxhdGlvbnNoaXAudHlwZV0ucHVzaChyZWxhdGlvbnNoaXAudGFyZ2V0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGZpbmRUYXJnZXRCeVJlbGF0aW9uc2hpcElkOiBmdW5jdGlvbihyZWxhdGlvbnNoaXBJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldHNCeVJlbGF0aW9uc2hpcElkW3JlbGF0aW9uc2hpcElkXTtcbiAgICAgICAgfSxcbiAgICAgICAgZmluZFRhcmdldHNCeVR5cGU6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRzQnlUeXBlW3R5cGVdIHx8IFtdO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwicmVhZFJlbGF0aW9uc2hpcHMiLCJkZWZhdWx0VmFsdWUiLCJSZWxhdGlvbnNoaXBzIiwiZWxlbWVudCIsInJlbGF0aW9uc2hpcHMiLCJjaGlsZHJlbiIsImZvckVhY2giLCJjaGlsZCIsIm5hbWUiLCJyZWxhdGlvbnNoaXAiLCJyZWxhdGlvbnNoaXBJZCIsImF0dHJpYnV0ZXMiLCJJZCIsInRhcmdldCIsIlRhcmdldCIsInR5cGUiLCJUeXBlIiwicHVzaCIsInRhcmdldHNCeVJlbGF0aW9uc2hpcElkIiwidGFyZ2V0c0J5VHlwZSIsImZpbmRUYXJnZXRCeVJlbGF0aW9uc2hpcElkIiwiZmluZFRhcmdldHNCeVR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/relationships-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/style-map.js":
/*!*****************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/style-map.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar promises = __webpack_require__(/*! ../promises */ \"(ssr)/../node_modules/mammoth/lib/promises.js\");\nvar xml = __webpack_require__(/*! ../xml */ \"(ssr)/../node_modules/mammoth/lib/xml/index.js\");\nexports.writeStyleMap = writeStyleMap;\nexports.readStyleMap = readStyleMap;\nvar schema = \"http://schemas.zwobble.org/mammoth/style-map\";\nvar styleMapPath = \"mammoth/style-map\";\nvar styleMapAbsolutePath = \"/\" + styleMapPath;\nfunction writeStyleMap(docxFile, styleMap) {\n    docxFile.write(styleMapPath, styleMap);\n    return updateRelationships(docxFile).then(function() {\n        return updateContentTypes(docxFile);\n    });\n}\nfunction updateRelationships(docxFile) {\n    var path = \"word/_rels/document.xml.rels\";\n    var relationshipsUri = \"http://schemas.openxmlformats.org/package/2006/relationships\";\n    var relationshipElementName = \"{\" + relationshipsUri + \"}Relationship\";\n    return docxFile.read(path, \"utf8\").then(xml.readString).then(function(relationshipsContainer) {\n        var relationships = relationshipsContainer.children;\n        addOrUpdateElement(relationships, relationshipElementName, \"Id\", {\n            \"Id\": \"rMammothStyleMap\",\n            \"Type\": schema,\n            \"Target\": styleMapAbsolutePath\n        });\n        var namespaces = {\n            \"\": relationshipsUri\n        };\n        return docxFile.write(path, xml.writeString(relationshipsContainer, namespaces));\n    });\n}\nfunction updateContentTypes(docxFile) {\n    var path = \"[Content_Types].xml\";\n    var contentTypesUri = \"http://schemas.openxmlformats.org/package/2006/content-types\";\n    var overrideName = \"{\" + contentTypesUri + \"}Override\";\n    return docxFile.read(path, \"utf8\").then(xml.readString).then(function(typesElement) {\n        var children = typesElement.children;\n        addOrUpdateElement(children, overrideName, \"PartName\", {\n            \"PartName\": styleMapAbsolutePath,\n            \"ContentType\": \"text/prs.mammoth.style-map\"\n        });\n        var namespaces = {\n            \"\": contentTypesUri\n        };\n        return docxFile.write(path, xml.writeString(typesElement, namespaces));\n    });\n}\nfunction addOrUpdateElement(elements, name, identifyingAttribute, attributes) {\n    var existingElement = _.find(elements, function(element) {\n        return element.name === name && element.attributes[identifyingAttribute] === attributes[identifyingAttribute];\n    });\n    if (existingElement) {\n        existingElement.attributes = attributes;\n    } else {\n        elements.push(xml.element(name, attributes));\n    }\n}\nfunction readStyleMap(docxFile) {\n    if (docxFile.exists(styleMapPath)) {\n        return docxFile.read(styleMapPath, \"utf8\");\n    } else {\n        return promises.resolve(null);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvc3R5bGUtbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQUlDLG1CQUFPQSxDQUFDLHlFQUFZO0FBRTVCLElBQUlDLFdBQVdELG1CQUFPQSxDQUFDLGtFQUFhO0FBQ3BDLElBQUlFLE1BQU1GLG1CQUFPQSxDQUFDLDhEQUFRO0FBRTFCRyxxQkFBcUIsR0FBR0M7QUFDeEJELG9CQUFvQixHQUFHRTtBQUd2QixJQUFJQyxTQUFTO0FBQ2IsSUFBSUMsZUFBZTtBQUNuQixJQUFJQyx1QkFBdUIsTUFBTUQ7QUFFakMsU0FBU0gsY0FBY0ssUUFBUSxFQUFFQyxRQUFRO0lBQ3JDRCxTQUFTRSxLQUFLLENBQUNKLGNBQWNHO0lBQzdCLE9BQU9FLG9CQUFvQkgsVUFBVUksSUFBSSxDQUFDO1FBQ3RDLE9BQU9DLG1CQUFtQkw7SUFDOUI7QUFDSjtBQUVBLFNBQVNHLG9CQUFvQkgsUUFBUTtJQUNqQyxJQUFJTSxPQUFPO0lBQ1gsSUFBSUMsbUJBQW1CO0lBQ3ZCLElBQUlDLDBCQUEwQixNQUFNRCxtQkFBbUI7SUFDdkQsT0FBT1AsU0FBU1MsSUFBSSxDQUFDSCxNQUFNLFFBQ3RCRixJQUFJLENBQUNYLElBQUlpQixVQUFVLEVBQ25CTixJQUFJLENBQUMsU0FBU08sc0JBQXNCO1FBQ2pDLElBQUlDLGdCQUFnQkQsdUJBQXVCRSxRQUFRO1FBQ25EQyxtQkFBbUJGLGVBQWVKLHlCQUF5QixNQUFNO1lBQzdELE1BQU07WUFDTixRQUFRWDtZQUNSLFVBQVVFO1FBQ2Q7UUFFQSxJQUFJZ0IsYUFBYTtZQUFDLElBQUlSO1FBQWdCO1FBQ3RDLE9BQU9QLFNBQVNFLEtBQUssQ0FBQ0ksTUFBTWIsSUFBSXVCLFdBQVcsQ0FBQ0wsd0JBQXdCSTtJQUN4RTtBQUNSO0FBRUEsU0FBU1YsbUJBQW1CTCxRQUFRO0lBQ2hDLElBQUlNLE9BQU87SUFDWCxJQUFJVyxrQkFBa0I7SUFDdEIsSUFBSUMsZUFBZSxNQUFNRCxrQkFBa0I7SUFDM0MsT0FBT2pCLFNBQVNTLElBQUksQ0FBQ0gsTUFBTSxRQUN0QkYsSUFBSSxDQUFDWCxJQUFJaUIsVUFBVSxFQUNuQk4sSUFBSSxDQUFDLFNBQVNlLFlBQVk7UUFDdkIsSUFBSU4sV0FBV00sYUFBYU4sUUFBUTtRQUNwQ0MsbUJBQW1CRCxVQUFVSyxjQUFjLFlBQVk7WUFDbkQsWUFBWW5CO1lBQ1osZUFBZTtRQUNuQjtRQUNBLElBQUlnQixhQUFhO1lBQUMsSUFBSUU7UUFBZTtRQUNyQyxPQUFPakIsU0FBU0UsS0FBSyxDQUFDSSxNQUFNYixJQUFJdUIsV0FBVyxDQUFDRyxjQUFjSjtJQUM5RDtBQUNSO0FBRUEsU0FBU0QsbUJBQW1CTSxRQUFRLEVBQUVDLElBQUksRUFBRUMsb0JBQW9CLEVBQUVDLFVBQVU7SUFDeEUsSUFBSUMsa0JBQWtCbEMsRUFBRW1DLElBQUksQ0FBQ0wsVUFBVSxTQUFTTSxPQUFPO1FBQ25ELE9BQU9BLFFBQVFMLElBQUksS0FBS0EsUUFDcEJLLFFBQVFILFVBQVUsQ0FBQ0QscUJBQXFCLEtBQUtDLFVBQVUsQ0FBQ0QscUJBQXFCO0lBQ3JGO0lBQ0EsSUFBSUUsaUJBQWlCO1FBQ2pCQSxnQkFBZ0JELFVBQVUsR0FBR0E7SUFDakMsT0FBTztRQUNISCxTQUFTTyxJQUFJLENBQUNsQyxJQUFJaUMsT0FBTyxDQUFDTCxNQUFNRTtJQUNwQztBQUNKO0FBRUEsU0FBUzNCLGFBQWFJLFFBQVE7SUFDMUIsSUFBSUEsU0FBUzRCLE1BQU0sQ0FBQzlCLGVBQWU7UUFDL0IsT0FBT0UsU0FBU1MsSUFBSSxDQUFDWCxjQUFjO0lBQ3ZDLE9BQU87UUFDSCxPQUFPTixTQUFTcUMsT0FBTyxDQUFDO0lBQzVCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvc3R5bGUtbWFwLmpzP2YxZGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcblxudmFyIHByb21pc2VzID0gcmVxdWlyZShcIi4uL3Byb21pc2VzXCIpO1xudmFyIHhtbCA9IHJlcXVpcmUoXCIuLi94bWxcIik7XG5cbmV4cG9ydHMud3JpdGVTdHlsZU1hcCA9IHdyaXRlU3R5bGVNYXA7XG5leHBvcnRzLnJlYWRTdHlsZU1hcCA9IHJlYWRTdHlsZU1hcDtcblxuXG52YXIgc2NoZW1hID0gXCJodHRwOi8vc2NoZW1hcy56d29iYmxlLm9yZy9tYW1tb3RoL3N0eWxlLW1hcFwiO1xudmFyIHN0eWxlTWFwUGF0aCA9IFwibWFtbW90aC9zdHlsZS1tYXBcIjtcbnZhciBzdHlsZU1hcEFic29sdXRlUGF0aCA9IFwiL1wiICsgc3R5bGVNYXBQYXRoO1xuXG5mdW5jdGlvbiB3cml0ZVN0eWxlTWFwKGRvY3hGaWxlLCBzdHlsZU1hcCkge1xuICAgIGRvY3hGaWxlLndyaXRlKHN0eWxlTWFwUGF0aCwgc3R5bGVNYXApO1xuICAgIHJldHVybiB1cGRhdGVSZWxhdGlvbnNoaXBzKGRvY3hGaWxlKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdXBkYXRlQ29udGVudFR5cGVzKGRvY3hGaWxlKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUmVsYXRpb25zaGlwcyhkb2N4RmlsZSkge1xuICAgIHZhciBwYXRoID0gXCJ3b3JkL19yZWxzL2RvY3VtZW50LnhtbC5yZWxzXCI7XG4gICAgdmFyIHJlbGF0aW9uc2hpcHNVcmkgPSBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwc1wiO1xuICAgIHZhciByZWxhdGlvbnNoaXBFbGVtZW50TmFtZSA9IFwie1wiICsgcmVsYXRpb25zaGlwc1VyaSArIFwifVJlbGF0aW9uc2hpcFwiO1xuICAgIHJldHVybiBkb2N4RmlsZS5yZWFkKHBhdGgsIFwidXRmOFwiKVxuICAgICAgICAudGhlbih4bWwucmVhZFN0cmluZylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVsYXRpb25zaGlwc0NvbnRhaW5lcikge1xuICAgICAgICAgICAgdmFyIHJlbGF0aW9uc2hpcHMgPSByZWxhdGlvbnNoaXBzQ29udGFpbmVyLmNoaWxkcmVuO1xuICAgICAgICAgICAgYWRkT3JVcGRhdGVFbGVtZW50KHJlbGF0aW9uc2hpcHMsIHJlbGF0aW9uc2hpcEVsZW1lbnROYW1lLCBcIklkXCIsIHtcbiAgICAgICAgICAgICAgICBcIklkXCI6IFwick1hbW1vdGhTdHlsZU1hcFwiLFxuICAgICAgICAgICAgICAgIFwiVHlwZVwiOiBzY2hlbWEsXG4gICAgICAgICAgICAgICAgXCJUYXJnZXRcIjogc3R5bGVNYXBBYnNvbHV0ZVBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgbmFtZXNwYWNlcyA9IHtcIlwiOiByZWxhdGlvbnNoaXBzVXJpfTtcbiAgICAgICAgICAgIHJldHVybiBkb2N4RmlsZS53cml0ZShwYXRoLCB4bWwud3JpdGVTdHJpbmcocmVsYXRpb25zaGlwc0NvbnRhaW5lciwgbmFtZXNwYWNlcykpO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29udGVudFR5cGVzKGRvY3hGaWxlKSB7XG4gICAgdmFyIHBhdGggPSBcIltDb250ZW50X1R5cGVzXS54bWxcIjtcbiAgICB2YXIgY29udGVudFR5cGVzVXJpID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L2NvbnRlbnQtdHlwZXNcIjtcbiAgICB2YXIgb3ZlcnJpZGVOYW1lID0gXCJ7XCIgKyBjb250ZW50VHlwZXNVcmkgKyBcIn1PdmVycmlkZVwiO1xuICAgIHJldHVybiBkb2N4RmlsZS5yZWFkKHBhdGgsIFwidXRmOFwiKVxuICAgICAgICAudGhlbih4bWwucmVhZFN0cmluZylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24odHlwZXNFbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0eXBlc0VsZW1lbnQuY2hpbGRyZW47XG4gICAgICAgICAgICBhZGRPclVwZGF0ZUVsZW1lbnQoY2hpbGRyZW4sIG92ZXJyaWRlTmFtZSwgXCJQYXJ0TmFtZVwiLCB7XG4gICAgICAgICAgICAgICAgXCJQYXJ0TmFtZVwiOiBzdHlsZU1hcEFic29sdXRlUGF0aCxcbiAgICAgICAgICAgICAgICBcIkNvbnRlbnRUeXBlXCI6IFwidGV4dC9wcnMubWFtbW90aC5zdHlsZS1tYXBcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgbmFtZXNwYWNlcyA9IHtcIlwiOiBjb250ZW50VHlwZXNVcml9O1xuICAgICAgICAgICAgcmV0dXJuIGRvY3hGaWxlLndyaXRlKHBhdGgsIHhtbC53cml0ZVN0cmluZyh0eXBlc0VsZW1lbnQsIG5hbWVzcGFjZXMpKTtcbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZE9yVXBkYXRlRWxlbWVudChlbGVtZW50cywgbmFtZSwgaWRlbnRpZnlpbmdBdHRyaWJ1dGUsIGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgZXhpc3RpbmdFbGVtZW50ID0gXy5maW5kKGVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50Lm5hbWUgPT09IG5hbWUgJiZcbiAgICAgICAgICAgIGVsZW1lbnQuYXR0cmlidXRlc1tpZGVudGlmeWluZ0F0dHJpYnV0ZV0gPT09IGF0dHJpYnV0ZXNbaWRlbnRpZnlpbmdBdHRyaWJ1dGVdO1xuICAgIH0pO1xuICAgIGlmIChleGlzdGluZ0VsZW1lbnQpIHtcbiAgICAgICAgZXhpc3RpbmdFbGVtZW50LmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnRzLnB1c2goeG1sLmVsZW1lbnQobmFtZSwgYXR0cmlidXRlcykpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVhZFN0eWxlTWFwKGRvY3hGaWxlKSB7XG4gICAgaWYgKGRvY3hGaWxlLmV4aXN0cyhzdHlsZU1hcFBhdGgpKSB7XG4gICAgICAgIHJldHVybiBkb2N4RmlsZS5yZWFkKHN0eWxlTWFwUGF0aCwgXCJ1dGY4XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlcy5yZXNvbHZlKG51bGwpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsInByb21pc2VzIiwieG1sIiwiZXhwb3J0cyIsIndyaXRlU3R5bGVNYXAiLCJyZWFkU3R5bGVNYXAiLCJzY2hlbWEiLCJzdHlsZU1hcFBhdGgiLCJzdHlsZU1hcEFic29sdXRlUGF0aCIsImRvY3hGaWxlIiwic3R5bGVNYXAiLCJ3cml0ZSIsInVwZGF0ZVJlbGF0aW9uc2hpcHMiLCJ0aGVuIiwidXBkYXRlQ29udGVudFR5cGVzIiwicGF0aCIsInJlbGF0aW9uc2hpcHNVcmkiLCJyZWxhdGlvbnNoaXBFbGVtZW50TmFtZSIsInJlYWQiLCJyZWFkU3RyaW5nIiwicmVsYXRpb25zaGlwc0NvbnRhaW5lciIsInJlbGF0aW9uc2hpcHMiLCJjaGlsZHJlbiIsImFkZE9yVXBkYXRlRWxlbWVudCIsIm5hbWVzcGFjZXMiLCJ3cml0ZVN0cmluZyIsImNvbnRlbnRUeXBlc1VyaSIsIm92ZXJyaWRlTmFtZSIsInR5cGVzRWxlbWVudCIsImVsZW1lbnRzIiwibmFtZSIsImlkZW50aWZ5aW5nQXR0cmlidXRlIiwiYXR0cmlidXRlcyIsImV4aXN0aW5nRWxlbWVudCIsImZpbmQiLCJlbGVtZW50IiwicHVzaCIsImV4aXN0cyIsInJlc29sdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/style-map.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/styles-reader.js":
/*!*********************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/styles-reader.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.readStylesXml = readStylesXml;\nexports.Styles = Styles;\nexports.defaultStyles = new Styles({}, {});\nfunction Styles(paragraphStyles, characterStyles, tableStyles, numberingStyles) {\n    return {\n        findParagraphStyleById: function(styleId) {\n            return paragraphStyles[styleId];\n        },\n        findCharacterStyleById: function(styleId) {\n            return characterStyles[styleId];\n        },\n        findTableStyleById: function(styleId) {\n            return tableStyles[styleId];\n        },\n        findNumberingStyleById: function(styleId) {\n            return numberingStyles[styleId];\n        }\n    };\n}\nStyles.EMPTY = new Styles({}, {}, {}, {});\nfunction readStylesXml(root) {\n    var paragraphStyles = {};\n    var characterStyles = {};\n    var tableStyles = {};\n    var numberingStyles = {};\n    var styles = {\n        \"paragraph\": paragraphStyles,\n        \"character\": characterStyles,\n        \"table\": tableStyles\n    };\n    root.getElementsByTagName(\"w:style\").forEach(function(styleElement) {\n        var style = readStyleElement(styleElement);\n        if (style.type === \"numbering\") {\n            numberingStyles[style.styleId] = readNumberingStyleElement(styleElement);\n        } else {\n            var styleSet = styles[style.type];\n            if (styleSet) {\n                styleSet[style.styleId] = style;\n            }\n        }\n    });\n    return new Styles(paragraphStyles, characterStyles, tableStyles, numberingStyles);\n}\nfunction readStyleElement(styleElement) {\n    var type = styleElement.attributes[\"w:type\"];\n    var styleId = styleElement.attributes[\"w:styleId\"];\n    var name = styleName(styleElement);\n    return {\n        type: type,\n        styleId: styleId,\n        name: name\n    };\n}\nfunction styleName(styleElement) {\n    var nameElement = styleElement.first(\"w:name\");\n    return nameElement ? nameElement.attributes[\"w:val\"] : null;\n}\nfunction readNumberingStyleElement(styleElement) {\n    var numId = styleElement.firstOrEmpty(\"w:pPr\").firstOrEmpty(\"w:numPr\").firstOrEmpty(\"w:numId\").attributes[\"w:val\"];\n    return {\n        numId: numId\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvc3R5bGVzLXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQUEscUJBQXFCLEdBQUdDO0FBQ3hCRCxjQUFjLEdBQUdFO0FBQ2pCRixxQkFBcUIsR0FBRyxJQUFJRSxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhDLFNBQVNBLE9BQU9FLGVBQWUsRUFBRUMsZUFBZSxFQUFFQyxXQUFXLEVBQUVDLGVBQWU7SUFDMUUsT0FBTztRQUNIQyx3QkFBd0IsU0FBU0MsT0FBTztZQUNwQyxPQUFPTCxlQUFlLENBQUNLLFFBQVE7UUFDbkM7UUFDQUMsd0JBQXdCLFNBQVNELE9BQU87WUFDcEMsT0FBT0osZUFBZSxDQUFDSSxRQUFRO1FBQ25DO1FBQ0FFLG9CQUFvQixTQUFTRixPQUFPO1lBQ2hDLE9BQU9ILFdBQVcsQ0FBQ0csUUFBUTtRQUMvQjtRQUNBRyx3QkFBd0IsU0FBU0gsT0FBTztZQUNwQyxPQUFPRixlQUFlLENBQUNFLFFBQVE7UUFDbkM7SUFDSjtBQUNKO0FBRUFQLE9BQU9XLEtBQUssR0FBRyxJQUFJWCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFFdkMsU0FBU0QsY0FBY2EsSUFBSTtJQUN2QixJQUFJVixrQkFBa0IsQ0FBQztJQUN2QixJQUFJQyxrQkFBa0IsQ0FBQztJQUN2QixJQUFJQyxjQUFjLENBQUM7SUFDbkIsSUFBSUMsa0JBQWtCLENBQUM7SUFFdkIsSUFBSVEsU0FBUztRQUNULGFBQWFYO1FBQ2IsYUFBYUM7UUFDYixTQUFTQztJQUNiO0lBRUFRLEtBQUtFLG9CQUFvQixDQUFDLFdBQVdDLE9BQU8sQ0FBQyxTQUFTQyxZQUFZO1FBQzlELElBQUlDLFFBQVFDLGlCQUFpQkY7UUFDN0IsSUFBSUMsTUFBTUUsSUFBSSxLQUFLLGFBQWE7WUFDNUJkLGVBQWUsQ0FBQ1ksTUFBTVYsT0FBTyxDQUFDLEdBQUdhLDBCQUEwQko7UUFDL0QsT0FBTztZQUNILElBQUlLLFdBQVdSLE1BQU0sQ0FBQ0ksTUFBTUUsSUFBSSxDQUFDO1lBQ2pDLElBQUlFLFVBQVU7Z0JBQ1ZBLFFBQVEsQ0FBQ0osTUFBTVYsT0FBTyxDQUFDLEdBQUdVO1lBQzlCO1FBQ0o7SUFDSjtJQUVBLE9BQU8sSUFBSWpCLE9BQU9FLGlCQUFpQkMsaUJBQWlCQyxhQUFhQztBQUNyRTtBQUVBLFNBQVNhLGlCQUFpQkYsWUFBWTtJQUNsQyxJQUFJRyxPQUFPSCxhQUFhTSxVQUFVLENBQUMsU0FBUztJQUM1QyxJQUFJZixVQUFVUyxhQUFhTSxVQUFVLENBQUMsWUFBWTtJQUNsRCxJQUFJQyxPQUFPQyxVQUFVUjtJQUNyQixPQUFPO1FBQUNHLE1BQU1BO1FBQU1aLFNBQVNBO1FBQVNnQixNQUFNQTtJQUFJO0FBQ3BEO0FBRUEsU0FBU0MsVUFBVVIsWUFBWTtJQUMzQixJQUFJUyxjQUFjVCxhQUFhVSxLQUFLLENBQUM7SUFDckMsT0FBT0QsY0FBY0EsWUFBWUgsVUFBVSxDQUFDLFFBQVEsR0FBRztBQUMzRDtBQUVBLFNBQVNGLDBCQUEwQkosWUFBWTtJQUMzQyxJQUFJVyxRQUFRWCxhQUNQWSxZQUFZLENBQUMsU0FDYkEsWUFBWSxDQUFDLFdBQ2JBLFlBQVksQ0FBQyxXQUNiTixVQUFVLENBQUMsUUFBUTtJQUN4QixPQUFPO1FBQUNLLE9BQU9BO0lBQUs7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvc3R5bGVzLXJlYWRlci5qcz9kYjU0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucmVhZFN0eWxlc1htbCA9IHJlYWRTdHlsZXNYbWw7XG5leHBvcnRzLlN0eWxlcyA9IFN0eWxlcztcbmV4cG9ydHMuZGVmYXVsdFN0eWxlcyA9IG5ldyBTdHlsZXMoe30sIHt9KTtcblxuZnVuY3Rpb24gU3R5bGVzKHBhcmFncmFwaFN0eWxlcywgY2hhcmFjdGVyU3R5bGVzLCB0YWJsZVN0eWxlcywgbnVtYmVyaW5nU3R5bGVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmluZFBhcmFncmFwaFN0eWxlQnlJZDogZnVuY3Rpb24oc3R5bGVJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFncmFwaFN0eWxlc1tzdHlsZUlkXTtcbiAgICAgICAgfSxcbiAgICAgICAgZmluZENoYXJhY3RlclN0eWxlQnlJZDogZnVuY3Rpb24oc3R5bGVJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoYXJhY3RlclN0eWxlc1tzdHlsZUlkXTtcbiAgICAgICAgfSxcbiAgICAgICAgZmluZFRhYmxlU3R5bGVCeUlkOiBmdW5jdGlvbihzdHlsZUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFibGVTdHlsZXNbc3R5bGVJZF07XG4gICAgICAgIH0sXG4gICAgICAgIGZpbmROdW1iZXJpbmdTdHlsZUJ5SWQ6IGZ1bmN0aW9uKHN0eWxlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJpbmdTdHlsZXNbc3R5bGVJZF07XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5TdHlsZXMuRU1QVFkgPSBuZXcgU3R5bGVzKHt9LCB7fSwge30sIHt9KTtcblxuZnVuY3Rpb24gcmVhZFN0eWxlc1htbChyb290KSB7XG4gICAgdmFyIHBhcmFncmFwaFN0eWxlcyA9IHt9O1xuICAgIHZhciBjaGFyYWN0ZXJTdHlsZXMgPSB7fTtcbiAgICB2YXIgdGFibGVTdHlsZXMgPSB7fTtcbiAgICB2YXIgbnVtYmVyaW5nU3R5bGVzID0ge307XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgICBcInBhcmFncmFwaFwiOiBwYXJhZ3JhcGhTdHlsZXMsXG4gICAgICAgIFwiY2hhcmFjdGVyXCI6IGNoYXJhY3RlclN0eWxlcyxcbiAgICAgICAgXCJ0YWJsZVwiOiB0YWJsZVN0eWxlc1xuICAgIH07XG5cbiAgICByb290LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidzpzdHlsZVwiKS5mb3JFYWNoKGZ1bmN0aW9uKHN0eWxlRWxlbWVudCkge1xuICAgICAgICB2YXIgc3R5bGUgPSByZWFkU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgICAgIGlmIChzdHlsZS50eXBlID09PSBcIm51bWJlcmluZ1wiKSB7XG4gICAgICAgICAgICBudW1iZXJpbmdTdHlsZXNbc3R5bGUuc3R5bGVJZF0gPSByZWFkTnVtYmVyaW5nU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3R5bGVTZXQgPSBzdHlsZXNbc3R5bGUudHlwZV07XG4gICAgICAgICAgICBpZiAoc3R5bGVTZXQpIHtcbiAgICAgICAgICAgICAgICBzdHlsZVNldFtzdHlsZS5zdHlsZUlkXSA9IHN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3IFN0eWxlcyhwYXJhZ3JhcGhTdHlsZXMsIGNoYXJhY3RlclN0eWxlcywgdGFibGVTdHlsZXMsIG51bWJlcmluZ1N0eWxlcyk7XG59XG5cbmZ1bmN0aW9uIHJlYWRTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gICAgdmFyIHR5cGUgPSBzdHlsZUVsZW1lbnQuYXR0cmlidXRlc1tcInc6dHlwZVwiXTtcbiAgICB2YXIgc3R5bGVJZCA9IHN0eWxlRWxlbWVudC5hdHRyaWJ1dGVzW1widzpzdHlsZUlkXCJdO1xuICAgIHZhciBuYW1lID0gc3R5bGVOYW1lKHN0eWxlRWxlbWVudCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBzdHlsZUlkOiBzdHlsZUlkLCBuYW1lOiBuYW1lfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVOYW1lKHN0eWxlRWxlbWVudCkge1xuICAgIHZhciBuYW1lRWxlbWVudCA9IHN0eWxlRWxlbWVudC5maXJzdChcInc6bmFtZVwiKTtcbiAgICByZXR1cm4gbmFtZUVsZW1lbnQgPyBuYW1lRWxlbWVudC5hdHRyaWJ1dGVzW1widzp2YWxcIl0gOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZWFkTnVtYmVyaW5nU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAgIHZhciBudW1JZCA9IHN0eWxlRWxlbWVudFxuICAgICAgICAuZmlyc3RPckVtcHR5KFwidzpwUHJcIilcbiAgICAgICAgLmZpcnN0T3JFbXB0eShcInc6bnVtUHJcIilcbiAgICAgICAgLmZpcnN0T3JFbXB0eShcInc6bnVtSWRcIilcbiAgICAgICAgLmF0dHJpYnV0ZXNbXCJ3OnZhbFwiXTtcbiAgICByZXR1cm4ge251bUlkOiBudW1JZH07XG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInJlYWRTdHlsZXNYbWwiLCJTdHlsZXMiLCJkZWZhdWx0U3R5bGVzIiwicGFyYWdyYXBoU3R5bGVzIiwiY2hhcmFjdGVyU3R5bGVzIiwidGFibGVTdHlsZXMiLCJudW1iZXJpbmdTdHlsZXMiLCJmaW5kUGFyYWdyYXBoU3R5bGVCeUlkIiwic3R5bGVJZCIsImZpbmRDaGFyYWN0ZXJTdHlsZUJ5SWQiLCJmaW5kVGFibGVTdHlsZUJ5SWQiLCJmaW5kTnVtYmVyaW5nU3R5bGVCeUlkIiwiRU1QVFkiLCJyb290Iiwic3R5bGVzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJmb3JFYWNoIiwic3R5bGVFbGVtZW50Iiwic3R5bGUiLCJyZWFkU3R5bGVFbGVtZW50IiwidHlwZSIsInJlYWROdW1iZXJpbmdTdHlsZUVsZW1lbnQiLCJzdHlsZVNldCIsImF0dHJpYnV0ZXMiLCJuYW1lIiwic3R5bGVOYW1lIiwibmFtZUVsZW1lbnQiLCJmaXJzdCIsIm51bUlkIiwiZmlyc3RPckVtcHR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/styles-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/docx/uris.js":
/*!************************************************!*\
  !*** ../node_modules/mammoth/lib/docx/uris.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.uriToZipEntryName = uriToZipEntryName;\nexports.replaceFragment = replaceFragment;\nfunction uriToZipEntryName(base, uri) {\n    if (uri.charAt(0) === \"/\") {\n        return uri.substr(1);\n    } else {\n        // In general, we should check first and second for trailing and leading slashes,\n        // but in our specific case this seems to be sufficient\n        return base + \"/\" + uri;\n    }\n}\nfunction replaceFragment(uri, fragment) {\n    var hashIndex = uri.indexOf(\"#\");\n    if (hashIndex !== -1) {\n        uri = uri.substring(0, hashIndex);\n    }\n    return uri + \"#\" + fragment;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2RvY3gvdXJpcy5qcyIsIm1hcHBpbmdzIjoiQUFBQUEseUJBQXlCLEdBQUdDO0FBQzVCRCx1QkFBdUIsR0FBR0U7QUFFMUIsU0FBU0Qsa0JBQWtCRSxJQUFJLEVBQUVDLEdBQUc7SUFDaEMsSUFBSUEsSUFBSUMsTUFBTSxDQUFDLE9BQU8sS0FBSztRQUN2QixPQUFPRCxJQUFJRSxNQUFNLENBQUM7SUFDdEIsT0FBTztRQUNILGlGQUFpRjtRQUNqRix1REFBdUQ7UUFDdkQsT0FBT0gsT0FBTyxNQUFNQztJQUN4QjtBQUNKO0FBR0EsU0FBU0YsZ0JBQWdCRSxHQUFHLEVBQUVHLFFBQVE7SUFDbEMsSUFBSUMsWUFBWUosSUFBSUssT0FBTyxDQUFDO0lBQzVCLElBQUlELGNBQWMsQ0FBQyxHQUFHO1FBQ2xCSixNQUFNQSxJQUFJTSxTQUFTLENBQUMsR0FBR0Y7SUFDM0I7SUFDQSxPQUFPSixNQUFNLE1BQU1HO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tYW1tb3RoL2xpYi9kb2N4L3VyaXMuanM/Njg1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLnVyaVRvWmlwRW50cnlOYW1lID0gdXJpVG9aaXBFbnRyeU5hbWU7XG5leHBvcnRzLnJlcGxhY2VGcmFnbWVudCA9IHJlcGxhY2VGcmFnbWVudDtcblxuZnVuY3Rpb24gdXJpVG9aaXBFbnRyeU5hbWUoYmFzZSwgdXJpKSB7XG4gICAgaWYgKHVyaS5jaGFyQXQoMCkgPT09IFwiL1wiKSB7XG4gICAgICAgIHJldHVybiB1cmkuc3Vic3RyKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEluIGdlbmVyYWwsIHdlIHNob3VsZCBjaGVjayBmaXJzdCBhbmQgc2Vjb25kIGZvciB0cmFpbGluZyBhbmQgbGVhZGluZyBzbGFzaGVzLFxuICAgICAgICAvLyBidXQgaW4gb3VyIHNwZWNpZmljIGNhc2UgdGhpcyBzZWVtcyB0byBiZSBzdWZmaWNpZW50XG4gICAgICAgIHJldHVybiBiYXNlICsgXCIvXCIgKyB1cmk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIHJlcGxhY2VGcmFnbWVudCh1cmksIGZyYWdtZW50KSB7XG4gICAgdmFyIGhhc2hJbmRleCA9IHVyaS5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgICAgICB1cmkgPSB1cmkuc3Vic3RyaW5nKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiB1cmkgKyBcIiNcIiArIGZyYWdtZW50O1xufVxuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJ1cmlUb1ppcEVudHJ5TmFtZSIsInJlcGxhY2VGcmFnbWVudCIsImJhc2UiLCJ1cmkiLCJjaGFyQXQiLCJzdWJzdHIiLCJmcmFnbWVudCIsImhhc2hJbmRleCIsImluZGV4T2YiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/docx/uris.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/html/ast.js":
/*!***********************************************!*\
  !*** ../node_modules/mammoth/lib/html/ast.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var htmlPaths = __webpack_require__(/*! ../styles/html-paths */ \"(ssr)/../node_modules/mammoth/lib/styles/html-paths.js\");\nfunction nonFreshElement(tagName, attributes, children) {\n    return elementWithTag(htmlPaths.element(tagName, attributes, {\n        fresh: false\n    }), children);\n}\nfunction freshElement(tagName, attributes, children) {\n    var tag = htmlPaths.element(tagName, attributes, {\n        fresh: true\n    });\n    return elementWithTag(tag, children);\n}\nfunction elementWithTag(tag, children) {\n    return {\n        type: \"element\",\n        tag: tag,\n        children: children || []\n    };\n}\nfunction text(value) {\n    return {\n        type: \"text\",\n        value: value\n    };\n}\nvar forceWrite = {\n    type: \"forceWrite\"\n};\nexports.freshElement = freshElement;\nexports.nonFreshElement = nonFreshElement;\nexports.elementWithTag = elementWithTag;\nexports.text = text;\nexports.forceWrite = forceWrite;\nvar voidTagNames = {\n    \"br\": true,\n    \"hr\": true,\n    \"img\": true,\n    \"input\": true\n};\nfunction isVoidElement(node) {\n    return node.children.length === 0 && voidTagNames[node.tag.tagName];\n}\nexports.isVoidElement = isVoidElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2h0bWwvYXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLG9GQUFzQjtBQUc5QyxTQUFTQyxnQkFBZ0JDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxRQUFRO0lBQ2xELE9BQU9DLGVBQ0hOLFVBQVVPLE9BQU8sQ0FBQ0osU0FBU0MsWUFBWTtRQUFDSSxPQUFPO0lBQUssSUFDcERIO0FBQ1I7QUFFQSxTQUFTSSxhQUFhTixPQUFPLEVBQUVDLFVBQVUsRUFBRUMsUUFBUTtJQUMvQyxJQUFJSyxNQUFNVixVQUFVTyxPQUFPLENBQUNKLFNBQVNDLFlBQVk7UUFBQ0ksT0FBTztJQUFJO0lBQzdELE9BQU9GLGVBQWVJLEtBQUtMO0FBQy9CO0FBRUEsU0FBU0MsZUFBZUksR0FBRyxFQUFFTCxRQUFRO0lBQ2pDLE9BQU87UUFDSE0sTUFBTTtRQUNORCxLQUFLQTtRQUNMTCxVQUFVQSxZQUFZLEVBQUU7SUFDNUI7QUFDSjtBQUVBLFNBQVNPLEtBQUtDLEtBQUs7SUFDZixPQUFPO1FBQ0hGLE1BQU07UUFDTkUsT0FBT0E7SUFDWDtBQUNKO0FBRUEsSUFBSUMsYUFBYTtJQUNiSCxNQUFNO0FBQ1Y7QUFFQUksb0JBQW9CLEdBQUdOO0FBQ3ZCTSx1QkFBdUIsR0FBR2I7QUFDMUJhLHNCQUFzQixHQUFHVDtBQUN6QlMsWUFBWSxHQUFHSDtBQUNmRyxrQkFBa0IsR0FBR0Q7QUFFckIsSUFBSUUsZUFBZTtJQUNmLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLFNBQVM7QUFDYjtBQUVBLFNBQVNDLGNBQWNDLElBQUk7SUFDdkIsT0FBTyxLQUFNYixRQUFRLENBQUNjLE1BQU0sS0FBSyxLQUFNSCxZQUFZLENBQUNFLEtBQUtSLEdBQUcsQ0FBQ1AsT0FBTyxDQUFDO0FBQ3pFO0FBRUFZLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvaHRtbC9hc3QuanM/Zjc2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaHRtbFBhdGhzID0gcmVxdWlyZShcIi4uL3N0eWxlcy9odG1sLXBhdGhzXCIpO1xuXG5cbmZ1bmN0aW9uIG5vbkZyZXNoRWxlbWVudCh0YWdOYW1lLCBhdHRyaWJ1dGVzLCBjaGlsZHJlbikge1xuICAgIHJldHVybiBlbGVtZW50V2l0aFRhZyhcbiAgICAgICAgaHRtbFBhdGhzLmVsZW1lbnQodGFnTmFtZSwgYXR0cmlidXRlcywge2ZyZXNoOiBmYWxzZX0pLFxuICAgICAgICBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIGZyZXNoRWxlbWVudCh0YWdOYW1lLCBhdHRyaWJ1dGVzLCBjaGlsZHJlbikge1xuICAgIHZhciB0YWcgPSBodG1sUGF0aHMuZWxlbWVudCh0YWdOYW1lLCBhdHRyaWJ1dGVzLCB7ZnJlc2g6IHRydWV9KTtcbiAgICByZXR1cm4gZWxlbWVudFdpdGhUYWcodGFnLCBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRXaXRoVGFnKHRhZywgY2hpbGRyZW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImVsZW1lbnRcIixcbiAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbiB8fCBbXVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHRleHQodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbn1cblxudmFyIGZvcmNlV3JpdGUgPSB7XG4gICAgdHlwZTogXCJmb3JjZVdyaXRlXCJcbn07XG5cbmV4cG9ydHMuZnJlc2hFbGVtZW50ID0gZnJlc2hFbGVtZW50O1xuZXhwb3J0cy5ub25GcmVzaEVsZW1lbnQgPSBub25GcmVzaEVsZW1lbnQ7XG5leHBvcnRzLmVsZW1lbnRXaXRoVGFnID0gZWxlbWVudFdpdGhUYWc7XG5leHBvcnRzLnRleHQgPSB0ZXh0O1xuZXhwb3J0cy5mb3JjZVdyaXRlID0gZm9yY2VXcml0ZTtcblxudmFyIHZvaWRUYWdOYW1lcyA9IHtcbiAgICBcImJyXCI6IHRydWUsXG4gICAgXCJoclwiOiB0cnVlLFxuICAgIFwiaW1nXCI6IHRydWUsXG4gICAgXCJpbnB1dFwiOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBpc1ZvaWRFbGVtZW50KG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSAmJiB2b2lkVGFnTmFtZXNbbm9kZS50YWcudGFnTmFtZV07XG59XG5cbmV4cG9ydHMuaXNWb2lkRWxlbWVudCA9IGlzVm9pZEVsZW1lbnQ7XG4iXSwibmFtZXMiOlsiaHRtbFBhdGhzIiwicmVxdWlyZSIsIm5vbkZyZXNoRWxlbWVudCIsInRhZ05hbWUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRyZW4iLCJlbGVtZW50V2l0aFRhZyIsImVsZW1lbnQiLCJmcmVzaCIsImZyZXNoRWxlbWVudCIsInRhZyIsInR5cGUiLCJ0ZXh0IiwidmFsdWUiLCJmb3JjZVdyaXRlIiwiZXhwb3J0cyIsInZvaWRUYWdOYW1lcyIsImlzVm9pZEVsZW1lbnQiLCJub2RlIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/html/ast.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/html/index.js":
/*!*************************************************!*\
  !*** ../node_modules/mammoth/lib/html/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var ast = __webpack_require__(/*! ./ast */ \"(ssr)/../node_modules/mammoth/lib/html/ast.js\");\nexports.freshElement = ast.freshElement;\nexports.nonFreshElement = ast.nonFreshElement;\nexports.elementWithTag = ast.elementWithTag;\nexports.text = ast.text;\nexports.forceWrite = ast.forceWrite;\nexports.simplify = __webpack_require__(/*! ./simplify */ \"(ssr)/../node_modules/mammoth/lib/html/simplify.js\");\nfunction write(writer, nodes) {\n    nodes.forEach(function(node) {\n        writeNode(writer, node);\n    });\n}\nfunction writeNode(writer, node) {\n    toStrings[node.type](writer, node);\n}\nvar toStrings = {\n    element: generateElementString,\n    text: generateTextString,\n    forceWrite: function() {}\n};\nfunction generateElementString(writer, node) {\n    if (ast.isVoidElement(node)) {\n        writer.selfClosing(node.tag.tagName, node.tag.attributes);\n    } else {\n        writer.open(node.tag.tagName, node.tag.attributes);\n        write(writer, node.children);\n        writer.close(node.tag.tagName);\n    }\n}\nfunction generateTextString(writer, node) {\n    writer.text(node.value);\n}\nexports.write = write;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2h0bWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUMsNERBQU87QUFFekJDLG9CQUFvQixHQUFHRixJQUFJRyxZQUFZO0FBQ3ZDRCx1QkFBdUIsR0FBR0YsSUFBSUksZUFBZTtBQUM3Q0Ysc0JBQXNCLEdBQUdGLElBQUlLLGNBQWM7QUFDM0NILFlBQVksR0FBR0YsSUFBSU0sSUFBSTtBQUN2Qkosa0JBQWtCLEdBQUdGLElBQUlPLFVBQVU7QUFFbkNMLDhHQUF3QztBQUV4QyxTQUFTTyxNQUFNQyxNQUFNLEVBQUVDLEtBQUs7SUFDeEJBLE1BQU1DLE9BQU8sQ0FBQyxTQUFTQyxJQUFJO1FBQ3ZCQyxVQUFVSixRQUFRRztJQUN0QjtBQUNKO0FBRUEsU0FBU0MsVUFBVUosTUFBTSxFQUFFRyxJQUFJO0lBQzNCRSxTQUFTLENBQUNGLEtBQUtHLElBQUksQ0FBQyxDQUFDTixRQUFRRztBQUNqQztBQUVBLElBQUlFLFlBQVk7SUFDWkUsU0FBU0M7SUFDVFosTUFBTWE7SUFDTlosWUFBWSxZQUFhO0FBQzdCO0FBRUEsU0FBU1csc0JBQXNCUixNQUFNLEVBQUVHLElBQUk7SUFDdkMsSUFBSWIsSUFBSW9CLGFBQWEsQ0FBQ1AsT0FBTztRQUN6QkgsT0FBT1csV0FBVyxDQUFDUixLQUFLUyxHQUFHLENBQUNDLE9BQU8sRUFBRVYsS0FBS1MsR0FBRyxDQUFDRSxVQUFVO0lBQzVELE9BQU87UUFDSGQsT0FBT2UsSUFBSSxDQUFDWixLQUFLUyxHQUFHLENBQUNDLE9BQU8sRUFBRVYsS0FBS1MsR0FBRyxDQUFDRSxVQUFVO1FBQ2pEZixNQUFNQyxRQUFRRyxLQUFLYSxRQUFRO1FBQzNCaEIsT0FBT2lCLEtBQUssQ0FBQ2QsS0FBS1MsR0FBRyxDQUFDQyxPQUFPO0lBQ2pDO0FBQ0o7QUFFQSxTQUFTSixtQkFBbUJULE1BQU0sRUFBRUcsSUFBSTtJQUNwQ0gsT0FBT0osSUFBSSxDQUFDTyxLQUFLZSxLQUFLO0FBQzFCO0FBRUExQixhQUFhLEdBQUdPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tYW1tb3RoL2xpYi9odG1sL2luZGV4LmpzPzFhMTQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzdCA9IHJlcXVpcmUoXCIuL2FzdFwiKTtcblxuZXhwb3J0cy5mcmVzaEVsZW1lbnQgPSBhc3QuZnJlc2hFbGVtZW50O1xuZXhwb3J0cy5ub25GcmVzaEVsZW1lbnQgPSBhc3Qubm9uRnJlc2hFbGVtZW50O1xuZXhwb3J0cy5lbGVtZW50V2l0aFRhZyA9IGFzdC5lbGVtZW50V2l0aFRhZztcbmV4cG9ydHMudGV4dCA9IGFzdC50ZXh0O1xuZXhwb3J0cy5mb3JjZVdyaXRlID0gYXN0LmZvcmNlV3JpdGU7XG5cbmV4cG9ydHMuc2ltcGxpZnkgPSByZXF1aXJlKFwiLi9zaW1wbGlmeVwiKTtcblxuZnVuY3Rpb24gd3JpdGUod3JpdGVyLCBub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB3cml0ZU5vZGUod3JpdGVyLCBub2RlKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gd3JpdGVOb2RlKHdyaXRlciwgbm9kZSkge1xuICAgIHRvU3RyaW5nc1tub2RlLnR5cGVdKHdyaXRlciwgbm9kZSk7XG59XG5cbnZhciB0b1N0cmluZ3MgPSB7XG4gICAgZWxlbWVudDogZ2VuZXJhdGVFbGVtZW50U3RyaW5nLFxuICAgIHRleHQ6IGdlbmVyYXRlVGV4dFN0cmluZyxcbiAgICBmb3JjZVdyaXRlOiBmdW5jdGlvbigpIHsgfVxufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVFbGVtZW50U3RyaW5nKHdyaXRlciwgbm9kZSkge1xuICAgIGlmIChhc3QuaXNWb2lkRWxlbWVudChub2RlKSkge1xuICAgICAgICB3cml0ZXIuc2VsZkNsb3Npbmcobm9kZS50YWcudGFnTmFtZSwgbm9kZS50YWcuYXR0cmlidXRlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGVyLm9wZW4obm9kZS50YWcudGFnTmFtZSwgbm9kZS50YWcuYXR0cmlidXRlcyk7XG4gICAgICAgIHdyaXRlKHdyaXRlciwgbm9kZS5jaGlsZHJlbik7XG4gICAgICAgIHdyaXRlci5jbG9zZShub2RlLnRhZy50YWdOYW1lKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGV4dFN0cmluZyh3cml0ZXIsIG5vZGUpIHtcbiAgICB3cml0ZXIudGV4dChub2RlLnZhbHVlKTtcbn1cblxuZXhwb3J0cy53cml0ZSA9IHdyaXRlO1xuIl0sIm5hbWVzIjpbImFzdCIsInJlcXVpcmUiLCJleHBvcnRzIiwiZnJlc2hFbGVtZW50Iiwibm9uRnJlc2hFbGVtZW50IiwiZWxlbWVudFdpdGhUYWciLCJ0ZXh0IiwiZm9yY2VXcml0ZSIsInNpbXBsaWZ5Iiwid3JpdGUiLCJ3cml0ZXIiLCJub2RlcyIsImZvckVhY2giLCJub2RlIiwid3JpdGVOb2RlIiwidG9TdHJpbmdzIiwidHlwZSIsImVsZW1lbnQiLCJnZW5lcmF0ZUVsZW1lbnRTdHJpbmciLCJnZW5lcmF0ZVRleHRTdHJpbmciLCJpc1ZvaWRFbGVtZW50Iiwic2VsZkNsb3NpbmciLCJ0YWciLCJ0YWdOYW1lIiwiYXR0cmlidXRlcyIsIm9wZW4iLCJjaGlsZHJlbiIsImNsb3NlIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/html/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/html/simplify.js":
/*!****************************************************!*\
  !*** ../node_modules/mammoth/lib/html/simplify.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar ast = __webpack_require__(/*! ./ast */ \"(ssr)/../node_modules/mammoth/lib/html/ast.js\");\nfunction simplify(nodes) {\n    return collapse(removeEmpty(nodes));\n}\nfunction collapse(nodes) {\n    var children = [];\n    nodes.map(collapseNode).forEach(function(child) {\n        appendChild(children, child);\n    });\n    return children;\n}\nfunction collapseNode(node) {\n    return collapsers[node.type](node);\n}\nvar collapsers = {\n    element: collapseElement,\n    text: identity,\n    forceWrite: identity\n};\nfunction collapseElement(node) {\n    return ast.elementWithTag(node.tag, collapse(node.children));\n}\nfunction identity(value) {\n    return value;\n}\nfunction appendChild(children, child) {\n    var lastChild = children[children.length - 1];\n    if (child.type === \"element\" && !child.tag.fresh && lastChild && lastChild.type === \"element\" && child.tag.matchesElement(lastChild.tag)) {\n        if (child.tag.separator) {\n            appendChild(lastChild.children, ast.text(child.tag.separator));\n        }\n        child.children.forEach(function(grandChild) {\n            // Mutation is fine since simplifying elements create a copy of the children.\n            appendChild(lastChild.children, grandChild);\n        });\n    } else {\n        children.push(child);\n    }\n}\nfunction removeEmpty(nodes) {\n    return flatMap(nodes, function(node) {\n        return emptiers[node.type](node);\n    });\n}\nfunction flatMap(values, func) {\n    return _.flatten(_.map(values, func), true);\n}\nvar emptiers = {\n    element: elementEmptier,\n    text: textEmptier,\n    forceWrite: neverEmpty\n};\nfunction neverEmpty(node) {\n    return [\n        node\n    ];\n}\nfunction elementEmptier(element) {\n    var children = removeEmpty(element.children);\n    if (children.length === 0 && !ast.isVoidElement(element)) {\n        return [];\n    } else {\n        return [\n            ast.elementWithTag(element.tag, children)\n        ];\n    }\n}\nfunction textEmptier(node) {\n    if (node.value.length === 0) {\n        return [];\n    } else {\n        return [\n            node\n        ];\n    }\n}\nmodule.exports = simplify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2h0bWwvc2ltcGxpZnkuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLElBQUlDLG1CQUFPQSxDQUFDLHlFQUFZO0FBRTVCLElBQUlDLE1BQU1ELG1CQUFPQSxDQUFDLDREQUFPO0FBRXpCLFNBQVNFLFNBQVNDLEtBQUs7SUFDbkIsT0FBT0MsU0FBU0MsWUFBWUY7QUFDaEM7QUFFQSxTQUFTQyxTQUFTRCxLQUFLO0lBQ25CLElBQUlHLFdBQVcsRUFBRTtJQUVqQkgsTUFBTUksR0FBRyxDQUFDQyxjQUFjQyxPQUFPLENBQUMsU0FBU0MsS0FBSztRQUMxQ0MsWUFBWUwsVUFBVUk7SUFDMUI7SUFDQSxPQUFPSjtBQUNYO0FBRUEsU0FBU0UsYUFBYUksSUFBSTtJQUN0QixPQUFPQyxVQUFVLENBQUNELEtBQUtFLElBQUksQ0FBQyxDQUFDRjtBQUNqQztBQUVBLElBQUlDLGFBQWE7SUFDYkUsU0FBU0M7SUFDVEMsTUFBTUM7SUFDTkMsWUFBWUQ7QUFDaEI7QUFFQSxTQUFTRixnQkFBZ0JKLElBQUk7SUFDekIsT0FBT1gsSUFBSW1CLGNBQWMsQ0FBQ1IsS0FBS1MsR0FBRyxFQUFFakIsU0FBU1EsS0FBS04sUUFBUTtBQUM5RDtBQUVBLFNBQVNZLFNBQVNJLEtBQUs7SUFDbkIsT0FBT0E7QUFDWDtBQUVBLFNBQVNYLFlBQVlMLFFBQVEsRUFBRUksS0FBSztJQUNoQyxJQUFJYSxZQUFZakIsUUFBUSxDQUFDQSxTQUFTa0IsTUFBTSxHQUFHLEVBQUU7SUFDN0MsSUFBSWQsTUFBTUksSUFBSSxLQUFLLGFBQWEsQ0FBQ0osTUFBTVcsR0FBRyxDQUFDSSxLQUFLLElBQUlGLGFBQWFBLFVBQVVULElBQUksS0FBSyxhQUFhSixNQUFNVyxHQUFHLENBQUNLLGNBQWMsQ0FBQ0gsVUFBVUYsR0FBRyxHQUFHO1FBQ3RJLElBQUlYLE1BQU1XLEdBQUcsQ0FBQ00sU0FBUyxFQUFFO1lBQ3JCaEIsWUFBWVksVUFBVWpCLFFBQVEsRUFBRUwsSUFBSWdCLElBQUksQ0FBQ1AsTUFBTVcsR0FBRyxDQUFDTSxTQUFTO1FBQ2hFO1FBQ0FqQixNQUFNSixRQUFRLENBQUNHLE9BQU8sQ0FBQyxTQUFTbUIsVUFBVTtZQUN0Qyw2RUFBNkU7WUFDN0VqQixZQUFZWSxVQUFVakIsUUFBUSxFQUFFc0I7UUFDcEM7SUFDSixPQUFPO1FBQ0h0QixTQUFTdUIsSUFBSSxDQUFDbkI7SUFDbEI7QUFDSjtBQUVBLFNBQVNMLFlBQVlGLEtBQUs7SUFDdEIsT0FBTzJCLFFBQVEzQixPQUFPLFNBQVNTLElBQUk7UUFDL0IsT0FBT21CLFFBQVEsQ0FBQ25CLEtBQUtFLElBQUksQ0FBQyxDQUFDRjtJQUMvQjtBQUNKO0FBRUEsU0FBU2tCLFFBQVFFLE1BQU0sRUFBRUMsSUFBSTtJQUN6QixPQUFPbEMsRUFBRW1DLE9BQU8sQ0FBQ25DLEVBQUVRLEdBQUcsQ0FBQ3lCLFFBQVFDLE9BQU87QUFDMUM7QUFFQSxJQUFJRixXQUFXO0lBQ1hoQixTQUFTb0I7SUFDVGxCLE1BQU1tQjtJQUNOakIsWUFBWWtCO0FBQ2hCO0FBRUEsU0FBU0EsV0FBV3pCLElBQUk7SUFDcEIsT0FBTztRQUFDQTtLQUFLO0FBQ2pCO0FBRUEsU0FBU3VCLGVBQWVwQixPQUFPO0lBQzNCLElBQUlULFdBQVdELFlBQVlVLFFBQVFULFFBQVE7SUFDM0MsSUFBSUEsU0FBU2tCLE1BQU0sS0FBSyxLQUFLLENBQUN2QixJQUFJcUMsYUFBYSxDQUFDdkIsVUFBVTtRQUN0RCxPQUFPLEVBQUU7SUFDYixPQUFPO1FBQ0gsT0FBTztZQUFDZCxJQUFJbUIsY0FBYyxDQUFDTCxRQUFRTSxHQUFHLEVBQUVmO1NBQVU7SUFDdEQ7QUFDSjtBQUVBLFNBQVM4QixZQUFZeEIsSUFBSTtJQUNyQixJQUFJQSxLQUFLVSxLQUFLLENBQUNFLE1BQU0sS0FBSyxHQUFHO1FBQ3pCLE9BQU8sRUFBRTtJQUNiLE9BQU87UUFDSCxPQUFPO1lBQUNaO1NBQUs7SUFDakI7QUFDSjtBQUVBMkIsT0FBT0MsT0FBTyxHQUFHdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2h0bWwvc2ltcGxpZnkuanM/MjlkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgXyA9IHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpO1xuXG52YXIgYXN0ID0gcmVxdWlyZShcIi4vYXN0XCIpO1xuXG5mdW5jdGlvbiBzaW1wbGlmeShub2Rlcykge1xuICAgIHJldHVybiBjb2xsYXBzZShyZW1vdmVFbXB0eShub2RlcykpO1xufVxuXG5mdW5jdGlvbiBjb2xsYXBzZShub2Rlcykge1xuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgIFxuICAgIG5vZGVzLm1hcChjb2xsYXBzZU5vZGUpLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgYXBwZW5kQ2hpbGQoY2hpbGRyZW4sIGNoaWxkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNvbGxhcHNlTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIGNvbGxhcHNlcnNbbm9kZS50eXBlXShub2RlKTtcbn1cblxudmFyIGNvbGxhcHNlcnMgPSB7XG4gICAgZWxlbWVudDogY29sbGFwc2VFbGVtZW50LFxuICAgIHRleHQ6IGlkZW50aXR5LFxuICAgIGZvcmNlV3JpdGU6IGlkZW50aXR5XG59O1xuXG5mdW5jdGlvbiBjb2xsYXBzZUVsZW1lbnQobm9kZSkge1xuICAgIHJldHVybiBhc3QuZWxlbWVudFdpdGhUYWcobm9kZS50YWcsIGNvbGxhcHNlKG5vZGUuY2hpbGRyZW4pKTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkKGNoaWxkcmVuLCBjaGlsZCkge1xuICAgIHZhciBsYXN0Q2hpbGQgPSBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gXCJlbGVtZW50XCIgJiYgIWNoaWxkLnRhZy5mcmVzaCAmJiBsYXN0Q2hpbGQgJiYgbGFzdENoaWxkLnR5cGUgPT09IFwiZWxlbWVudFwiICYmIGNoaWxkLnRhZy5tYXRjaGVzRWxlbWVudChsYXN0Q2hpbGQudGFnKSkge1xuICAgICAgICBpZiAoY2hpbGQudGFnLnNlcGFyYXRvcikge1xuICAgICAgICAgICAgYXBwZW5kQ2hpbGQobGFzdENoaWxkLmNoaWxkcmVuLCBhc3QudGV4dChjaGlsZC50YWcuc2VwYXJhdG9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihncmFuZENoaWxkKSB7XG4gICAgICAgICAgICAvLyBNdXRhdGlvbiBpcyBmaW5lIHNpbmNlIHNpbXBsaWZ5aW5nIGVsZW1lbnRzIGNyZWF0ZSBhIGNvcHkgb2YgdGhlIGNoaWxkcmVuLlxuICAgICAgICAgICAgYXBwZW5kQ2hpbGQobGFzdENoaWxkLmNoaWxkcmVuLCBncmFuZENoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVFbXB0eShub2Rlcykge1xuICAgIHJldHVybiBmbGF0TWFwKG5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiBlbXB0aWVyc1tub2RlLnR5cGVdKG5vZGUpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBmbGF0TWFwKHZhbHVlcywgZnVuYykge1xuICAgIHJldHVybiBfLmZsYXR0ZW4oXy5tYXAodmFsdWVzLCBmdW5jKSwgdHJ1ZSk7XG59XG5cbnZhciBlbXB0aWVycyA9IHtcbiAgICBlbGVtZW50OiBlbGVtZW50RW1wdGllcixcbiAgICB0ZXh0OiB0ZXh0RW1wdGllcixcbiAgICBmb3JjZVdyaXRlOiBuZXZlckVtcHR5XG59O1xuXG5mdW5jdGlvbiBuZXZlckVtcHR5KG5vZGUpIHtcbiAgICByZXR1cm4gW25vZGVdO1xufVxuXG5mdW5jdGlvbiBlbGVtZW50RW1wdGllcihlbGVtZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVtb3ZlRW1wdHkoZWxlbWVudC5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJiAhYXN0LmlzVm9pZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbYXN0LmVsZW1lbnRXaXRoVGFnKGVsZW1lbnQudGFnLCBjaGlsZHJlbildO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdGV4dEVtcHRpZXIobm9kZSkge1xuICAgIGlmIChub2RlLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtub2RlXTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2ltcGxpZnk7XG4iXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJhc3QiLCJzaW1wbGlmeSIsIm5vZGVzIiwiY29sbGFwc2UiLCJyZW1vdmVFbXB0eSIsImNoaWxkcmVuIiwibWFwIiwiY29sbGFwc2VOb2RlIiwiZm9yRWFjaCIsImNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJub2RlIiwiY29sbGFwc2VycyIsInR5cGUiLCJlbGVtZW50IiwiY29sbGFwc2VFbGVtZW50IiwidGV4dCIsImlkZW50aXR5IiwiZm9yY2VXcml0ZSIsImVsZW1lbnRXaXRoVGFnIiwidGFnIiwidmFsdWUiLCJsYXN0Q2hpbGQiLCJsZW5ndGgiLCJmcmVzaCIsIm1hdGNoZXNFbGVtZW50Iiwic2VwYXJhdG9yIiwiZ3JhbmRDaGlsZCIsInB1c2giLCJmbGF0TWFwIiwiZW1wdGllcnMiLCJ2YWx1ZXMiLCJmdW5jIiwiZmxhdHRlbiIsImVsZW1lbnRFbXB0aWVyIiwidGV4dEVtcHRpZXIiLCJuZXZlckVtcHR5IiwiaXNWb2lkRWxlbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/html/simplify.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/images.js":
/*!*********************************************!*\
  !*** ../node_modules/mammoth/lib/images.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar promises = __webpack_require__(/*! ./promises */ \"(ssr)/../node_modules/mammoth/lib/promises.js\");\nvar Html = __webpack_require__(/*! ./html */ \"(ssr)/../node_modules/mammoth/lib/html/index.js\");\nexports.imgElement = imgElement;\nfunction imgElement(func) {\n    return function(element, messages) {\n        return promises.when(func(element)).then(function(result) {\n            var attributes = {};\n            if (element.altText) {\n                attributes.alt = element.altText;\n            }\n            _.extend(attributes, result);\n            return [\n                Html.freshElement(\"img\", attributes)\n            ];\n        });\n    };\n}\n// Undocumented, but retained for backwards-compatibility with 0.3.x\nexports.inline = exports.imgElement;\nexports.dataUri = imgElement(function(element) {\n    return element.readAsBase64String().then(function(imageBuffer) {\n        return {\n            src: \"data:\" + element.contentType + \";base64,\" + imageBuffer\n        };\n    });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL2ltYWdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxJQUFJQyxtQkFBT0EsQ0FBQyx5RUFBWTtBQUU1QixJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQyxpRUFBWTtBQUNuQyxJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQywrREFBUTtBQUUzQkcsa0JBQWtCLEdBQUdDO0FBRXJCLFNBQVNBLFdBQVdDLElBQUk7SUFDcEIsT0FBTyxTQUFTQyxPQUFPLEVBQUVDLFFBQVE7UUFDN0IsT0FBT04sU0FBU08sSUFBSSxDQUFDSCxLQUFLQyxVQUFVRyxJQUFJLENBQUMsU0FBU0MsTUFBTTtZQUNwRCxJQUFJQyxhQUFhLENBQUM7WUFDbEIsSUFBSUwsUUFBUU0sT0FBTyxFQUFFO2dCQUNqQkQsV0FBV0UsR0FBRyxHQUFHUCxRQUFRTSxPQUFPO1lBQ3BDO1lBQ0FiLEVBQUVlLE1BQU0sQ0FBQ0gsWUFBWUQ7WUFFckIsT0FBTztnQkFBQ1IsS0FBS2EsWUFBWSxDQUFDLE9BQU9KO2FBQVk7UUFDakQ7SUFDSjtBQUNKO0FBRUEsb0VBQW9FO0FBQ3BFUixjQUFjLEdBQUdBLFFBQVFDLFVBQVU7QUFFbkNELGVBQWUsR0FBR0MsV0FBVyxTQUFTRSxPQUFPO0lBQ3pDLE9BQU9BLFFBQVFZLGtCQUFrQixHQUFHVCxJQUFJLENBQUMsU0FBU1UsV0FBVztRQUN6RCxPQUFPO1lBQ0hDLEtBQUssVUFBVWQsUUFBUWUsV0FBVyxHQUFHLGFBQWFGO1FBQ3REO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvaW1hZ2VzLmpzP2U5ZDgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcblxudmFyIHByb21pc2VzID0gcmVxdWlyZShcIi4vcHJvbWlzZXNcIik7XG52YXIgSHRtbCA9IHJlcXVpcmUoXCIuL2h0bWxcIik7XG5cbmV4cG9ydHMuaW1nRWxlbWVudCA9IGltZ0VsZW1lbnQ7XG5cbmZ1bmN0aW9uIGltZ0VsZW1lbnQoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50LCBtZXNzYWdlcykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZXMud2hlbihmdW5jKGVsZW1lbnQpKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmFsdFRleHQpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLmFsdCA9IGVsZW1lbnQuYWx0VGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF8uZXh0ZW5kKGF0dHJpYnV0ZXMsIHJlc3VsdCk7XG5cbiAgICAgICAgICAgIHJldHVybiBbSHRtbC5mcmVzaEVsZW1lbnQoXCJpbWdcIiwgYXR0cmlidXRlcyldO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG4vLyBVbmRvY3VtZW50ZWQsIGJ1dCByZXRhaW5lZCBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgd2l0aCAwLjMueFxuZXhwb3J0cy5pbmxpbmUgPSBleHBvcnRzLmltZ0VsZW1lbnQ7XG5cbmV4cG9ydHMuZGF0YVVyaSA9IGltZ0VsZW1lbnQoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LnJlYWRBc0Jhc2U2NFN0cmluZygpLnRoZW4oZnVuY3Rpb24oaW1hZ2VCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNyYzogXCJkYXRhOlwiICsgZWxlbWVudC5jb250ZW50VHlwZSArIFwiO2Jhc2U2NCxcIiArIGltYWdlQnVmZmVyXG4gICAgICAgIH07XG4gICAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsInByb21pc2VzIiwiSHRtbCIsImV4cG9ydHMiLCJpbWdFbGVtZW50IiwiZnVuYyIsImVsZW1lbnQiLCJtZXNzYWdlcyIsIndoZW4iLCJ0aGVuIiwicmVzdWx0IiwiYXR0cmlidXRlcyIsImFsdFRleHQiLCJhbHQiLCJleHRlbmQiLCJmcmVzaEVsZW1lbnQiLCJpbmxpbmUiLCJkYXRhVXJpIiwicmVhZEFzQmFzZTY0U3RyaW5nIiwiaW1hZ2VCdWZmZXIiLCJzcmMiLCJjb250ZW50VHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/images.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/index.js":
/*!********************************************!*\
  !*** ../node_modules/mammoth/lib/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar docxReader = __webpack_require__(/*! ./docx/docx-reader */ \"(ssr)/../node_modules/mammoth/lib/docx/docx-reader.js\");\nvar docxStyleMap = __webpack_require__(/*! ./docx/style-map */ \"(ssr)/../node_modules/mammoth/lib/docx/style-map.js\");\nvar DocumentConverter = (__webpack_require__(/*! ./document-to-html */ \"(ssr)/../node_modules/mammoth/lib/document-to-html.js\").DocumentConverter);\nvar convertElementToRawText = (__webpack_require__(/*! ./raw-text */ \"(ssr)/../node_modules/mammoth/lib/raw-text.js\").convertElementToRawText);\nvar readStyle = (__webpack_require__(/*! ./style-reader */ \"(ssr)/../node_modules/mammoth/lib/style-reader.js\").readStyle);\nvar readOptions = (__webpack_require__(/*! ./options-reader */ \"(ssr)/../node_modules/mammoth/lib/options-reader.js\").readOptions);\nvar unzip = __webpack_require__(/*! ./unzip */ \"(ssr)/../node_modules/mammoth/lib/unzip.js\");\nvar Result = (__webpack_require__(/*! ./results */ \"(ssr)/../node_modules/mammoth/lib/results.js\").Result);\nexports.convertToHtml = convertToHtml;\nexports.convertToMarkdown = convertToMarkdown;\nexports.convert = convert;\nexports.extractRawText = extractRawText;\nexports.images = __webpack_require__(/*! ./images */ \"(ssr)/../node_modules/mammoth/lib/images.js\");\nexports.transforms = __webpack_require__(/*! ./transforms */ \"(ssr)/../node_modules/mammoth/lib/transforms.js\");\nexports.underline = __webpack_require__(/*! ./underline */ \"(ssr)/../node_modules/mammoth/lib/underline.js\");\nexports.embedStyleMap = embedStyleMap;\nexports.readEmbeddedStyleMap = readEmbeddedStyleMap;\nfunction convertToHtml(input, options) {\n    return convert(input, options);\n}\nfunction convertToMarkdown(input, options) {\n    var markdownOptions = Object.create(options || {});\n    markdownOptions.outputFormat = \"markdown\";\n    return convert(input, markdownOptions);\n}\nfunction convert(input, options) {\n    options = readOptions(options);\n    return unzip.openZip(input).tap(function(docxFile) {\n        return docxStyleMap.readStyleMap(docxFile).then(function(styleMap) {\n            options.embeddedStyleMap = styleMap;\n        });\n    }).then(function(docxFile) {\n        return docxReader.read(docxFile, input).then(function(documentResult) {\n            return documentResult.map(options.transformDocument);\n        }).then(function(documentResult) {\n            return convertDocumentToHtml(documentResult, options);\n        });\n    });\n}\nfunction readEmbeddedStyleMap(input) {\n    return unzip.openZip(input).then(docxStyleMap.readStyleMap);\n}\nfunction convertDocumentToHtml(documentResult, options) {\n    var styleMapResult = parseStyleMap(options.readStyleMap());\n    var parsedOptions = _.extend({}, options, {\n        styleMap: styleMapResult.value\n    });\n    var documentConverter = new DocumentConverter(parsedOptions);\n    return documentResult.flatMapThen(function(document) {\n        return styleMapResult.flatMapThen(function(styleMap) {\n            return documentConverter.convertToHtml(document);\n        });\n    });\n}\nfunction parseStyleMap(styleMap) {\n    return Result.combine((styleMap || []).map(readStyle)).map(function(styleMap) {\n        return styleMap.filter(function(styleMapping) {\n            return !!styleMapping;\n        });\n    });\n}\nfunction extractRawText(input) {\n    return unzip.openZip(input).then(docxReader.read).then(function(documentResult) {\n        return documentResult.map(convertElementToRawText);\n    });\n}\nfunction embedStyleMap(input, styleMap) {\n    return unzip.openZip(input).tap(function(docxFile) {\n        return docxStyleMap.writeStyleMap(docxFile, styleMap);\n    }).then(function(docxFile) {\n        return docxFile.toArrayBuffer();\n    }).then(function(arrayBuffer) {\n        return {\n            toArrayBuffer: function() {\n                return arrayBuffer;\n            },\n            toBuffer: function() {\n                return Buffer.from(arrayBuffer);\n            }\n        };\n    });\n}\nexports.styleMapping = function() {\n    throw new Error(\"Use a raw string instead of mammoth.styleMapping e.g. \\\"p[style-name='Title'] => h1\\\" instead of mammoth.styleMapping(\\\"p[style-name='Title'] => h1\\\")\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/options-reader.js":
/*!*****************************************************!*\
  !*** ../node_modules/mammoth/lib/options-reader.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.readOptions = readOptions;\nvar _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar defaultStyleMap = exports._defaultStyleMap = [\n    \"p.Heading1 => h1:fresh\",\n    \"p.Heading2 => h2:fresh\",\n    \"p.Heading3 => h3:fresh\",\n    \"p.Heading4 => h4:fresh\",\n    \"p.Heading5 => h5:fresh\",\n    \"p.Heading6 => h6:fresh\",\n    \"p[style-name='Heading 1'] => h1:fresh\",\n    \"p[style-name='Heading 2'] => h2:fresh\",\n    \"p[style-name='Heading 3'] => h3:fresh\",\n    \"p[style-name='Heading 4'] => h4:fresh\",\n    \"p[style-name='Heading 5'] => h5:fresh\",\n    \"p[style-name='Heading 6'] => h6:fresh\",\n    \"p[style-name='heading 1'] => h1:fresh\",\n    \"p[style-name='heading 2'] => h2:fresh\",\n    \"p[style-name='heading 3'] => h3:fresh\",\n    \"p[style-name='heading 4'] => h4:fresh\",\n    \"p[style-name='heading 5'] => h5:fresh\",\n    \"p[style-name='heading 6'] => h6:fresh\",\n    \"r[style-name='Strong'] => strong\",\n    \"p[style-name='footnote text'] => p:fresh\",\n    \"r[style-name='footnote reference'] =>\",\n    \"p[style-name='endnote text'] => p:fresh\",\n    \"r[style-name='endnote reference'] =>\",\n    \"p[style-name='annotation text'] => p:fresh\",\n    \"r[style-name='annotation reference'] =>\",\n    // LibreOffice\n    \"p[style-name='Footnote'] => p:fresh\",\n    \"r[style-name='Footnote anchor'] =>\",\n    \"p[style-name='Endnote'] => p:fresh\",\n    \"r[style-name='Endnote anchor'] =>\",\n    \"p:unordered-list(1) => ul > li:fresh\",\n    \"p:unordered-list(2) => ul|ol > li > ul > li:fresh\",\n    \"p:unordered-list(3) => ul|ol > li > ul|ol > li > ul > li:fresh\",\n    \"p:unordered-list(4) => ul|ol > li > ul|ol > li > ul|ol > li > ul > li:fresh\",\n    \"p:unordered-list(5) => ul|ol > li > ul|ol > li > ul|ol > li > ul|ol > li > ul > li:fresh\",\n    \"p:ordered-list(1) => ol > li:fresh\",\n    \"p:ordered-list(2) => ul|ol > li > ol > li:fresh\",\n    \"p:ordered-list(3) => ul|ol > li > ul|ol > li > ol > li:fresh\",\n    \"p:ordered-list(4) => ul|ol > li > ul|ol > li > ul|ol > li > ol > li:fresh\",\n    \"p:ordered-list(5) => ul|ol > li > ul|ol > li > ul|ol > li > ul|ol > li > ol > li:fresh\",\n    \"r[style-name='Hyperlink'] =>\",\n    \"p[style-name='Normal'] => p:fresh\"\n];\nvar standardOptions = exports._standardOptions = {\n    transformDocument: identity,\n    includeDefaultStyleMap: true,\n    includeEmbeddedStyleMap: true\n};\nfunction readOptions(options) {\n    options = options || {};\n    return _.extend({}, standardOptions, options, {\n        customStyleMap: readStyleMap(options.styleMap),\n        readStyleMap: function() {\n            var styleMap = this.customStyleMap;\n            if (this.includeEmbeddedStyleMap) {\n                styleMap = styleMap.concat(readStyleMap(this.embeddedStyleMap));\n            }\n            if (this.includeDefaultStyleMap) {\n                styleMap = styleMap.concat(defaultStyleMap);\n            }\n            return styleMap;\n        }\n    });\n}\nfunction readStyleMap(styleMap) {\n    if (!styleMap) {\n        return [];\n    } else if (_.isString(styleMap)) {\n        return styleMap.split(\"\\n\").map(function(line) {\n            return line.trim();\n        }).filter(function(line) {\n            return line !== \"\" && line.charAt(0) !== \"#\";\n        });\n    } else {\n        return styleMap;\n    }\n}\nfunction identity(value) {\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL29wdGlvbnMtcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBQSxtQkFBbUIsR0FBR0M7QUFHdEIsSUFBSUMsSUFBSUMsbUJBQU9BLENBQUMseUVBQVk7QUFFNUIsSUFBSUMsa0JBQWtCSix3QkFBd0IsR0FBRztJQUM3QztJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFFQTtJQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUVBLGNBQWM7SUFDZDtJQUNBO0lBQ0E7SUFDQTtJQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBRUE7SUFFQTtDQUNIO0FBRUQsSUFBSU0sa0JBQWtCTix3QkFBd0IsR0FBRztJQUM3Q1EsbUJBQW1CQztJQUNuQkMsd0JBQXdCO0lBQ3hCQyx5QkFBeUI7QUFDN0I7QUFFQSxTQUFTVixZQUFZVyxPQUFPO0lBQ3hCQSxVQUFVQSxXQUFXLENBQUM7SUFDdEIsT0FBT1YsRUFBRVcsTUFBTSxDQUFDLENBQUMsR0FBR1AsaUJBQWlCTSxTQUFTO1FBQzFDRSxnQkFBZ0JDLGFBQWFILFFBQVFJLFFBQVE7UUFDN0NELGNBQWM7WUFDVixJQUFJQyxXQUFXLElBQUksQ0FBQ0YsY0FBYztZQUNsQyxJQUFJLElBQUksQ0FBQ0gsdUJBQXVCLEVBQUU7Z0JBQzlCSyxXQUFXQSxTQUFTQyxNQUFNLENBQUNGLGFBQWEsSUFBSSxDQUFDRyxnQkFBZ0I7WUFDakU7WUFDQSxJQUFJLElBQUksQ0FBQ1Isc0JBQXNCLEVBQUU7Z0JBQzdCTSxXQUFXQSxTQUFTQyxNQUFNLENBQUNiO1lBQy9CO1lBQ0EsT0FBT1k7UUFDWDtJQUNKO0FBQ0o7QUFFQSxTQUFTRCxhQUFhQyxRQUFRO0lBQzFCLElBQUksQ0FBQ0EsVUFBVTtRQUNYLE9BQU8sRUFBRTtJQUNiLE9BQU8sSUFBSWQsRUFBRWlCLFFBQVEsQ0FBQ0gsV0FBVztRQUM3QixPQUFPQSxTQUFTSSxLQUFLLENBQUMsTUFDakJDLEdBQUcsQ0FBQyxTQUFTQyxJQUFJO1lBQ2QsT0FBT0EsS0FBS0MsSUFBSTtRQUNwQixHQUNDQyxNQUFNLENBQUMsU0FBU0YsSUFBSTtZQUNqQixPQUFPQSxTQUFTLE1BQU1BLEtBQUtHLE1BQU0sQ0FBQyxPQUFPO1FBQzdDO0lBQ1IsT0FBTztRQUNILE9BQU9UO0lBQ1g7QUFDSjtBQUVBLFNBQVNQLFNBQVNpQixLQUFLO0lBQ25CLE9BQU9BO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL29wdGlvbnMtcmVhZGVyLmpzP2EzMDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5yZWFkT3B0aW9ucyA9IHJlYWRPcHRpb25zO1xuXG5cbnZhciBfID0gcmVxdWlyZShcInVuZGVyc2NvcmVcIik7XG5cbnZhciBkZWZhdWx0U3R5bGVNYXAgPSBleHBvcnRzLl9kZWZhdWx0U3R5bGVNYXAgPSBbXG4gICAgXCJwLkhlYWRpbmcxID0+IGgxOmZyZXNoXCIsXG4gICAgXCJwLkhlYWRpbmcyID0+IGgyOmZyZXNoXCIsXG4gICAgXCJwLkhlYWRpbmczID0+IGgzOmZyZXNoXCIsXG4gICAgXCJwLkhlYWRpbmc0ID0+IGg0OmZyZXNoXCIsXG4gICAgXCJwLkhlYWRpbmc1ID0+IGg1OmZyZXNoXCIsXG4gICAgXCJwLkhlYWRpbmc2ID0+IGg2OmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J0hlYWRpbmcgMSddID0+IGgxOmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J0hlYWRpbmcgMiddID0+IGgyOmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J0hlYWRpbmcgMyddID0+IGgzOmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J0hlYWRpbmcgNCddID0+IGg0OmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J0hlYWRpbmcgNSddID0+IGg1OmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J0hlYWRpbmcgNiddID0+IGg2OmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J2hlYWRpbmcgMSddID0+IGgxOmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J2hlYWRpbmcgMiddID0+IGgyOmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J2hlYWRpbmcgMyddID0+IGgzOmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J2hlYWRpbmcgNCddID0+IGg0OmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J2hlYWRpbmcgNSddID0+IGg1OmZyZXNoXCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J2hlYWRpbmcgNiddID0+IGg2OmZyZXNoXCIsXG4gICAgXG4gICAgXCJyW3N0eWxlLW5hbWU9J1N0cm9uZyddID0+IHN0cm9uZ1wiLFxuICAgIFxuICAgIFwicFtzdHlsZS1uYW1lPSdmb290bm90ZSB0ZXh0J10gPT4gcDpmcmVzaFwiLFxuICAgIFwicltzdHlsZS1uYW1lPSdmb290bm90ZSByZWZlcmVuY2UnXSA9PlwiLFxuICAgIFwicFtzdHlsZS1uYW1lPSdlbmRub3RlIHRleHQnXSA9PiBwOmZyZXNoXCIsXG4gICAgXCJyW3N0eWxlLW5hbWU9J2VuZG5vdGUgcmVmZXJlbmNlJ10gPT5cIixcbiAgICBcInBbc3R5bGUtbmFtZT0nYW5ub3RhdGlvbiB0ZXh0J10gPT4gcDpmcmVzaFwiLFxuICAgIFwicltzdHlsZS1uYW1lPSdhbm5vdGF0aW9uIHJlZmVyZW5jZSddID0+XCIsXG4gICAgXG4gICAgLy8gTGlicmVPZmZpY2VcbiAgICBcInBbc3R5bGUtbmFtZT0nRm9vdG5vdGUnXSA9PiBwOmZyZXNoXCIsXG4gICAgXCJyW3N0eWxlLW5hbWU9J0Zvb3Rub3RlIGFuY2hvciddID0+XCIsXG4gICAgXCJwW3N0eWxlLW5hbWU9J0VuZG5vdGUnXSA9PiBwOmZyZXNoXCIsXG4gICAgXCJyW3N0eWxlLW5hbWU9J0VuZG5vdGUgYW5jaG9yJ10gPT5cIixcbiAgICBcbiAgICBcInA6dW5vcmRlcmVkLWxpc3QoMSkgPT4gdWwgPiBsaTpmcmVzaFwiLFxuICAgIFwicDp1bm9yZGVyZWQtbGlzdCgyKSA9PiB1bHxvbCA+IGxpID4gdWwgPiBsaTpmcmVzaFwiLFxuICAgIFwicDp1bm9yZGVyZWQtbGlzdCgzKSA9PiB1bHxvbCA+IGxpID4gdWx8b2wgPiBsaSA+IHVsID4gbGk6ZnJlc2hcIixcbiAgICBcInA6dW5vcmRlcmVkLWxpc3QoNCkgPT4gdWx8b2wgPiBsaSA+IHVsfG9sID4gbGkgPiB1bHxvbCA+IGxpID4gdWwgPiBsaTpmcmVzaFwiLFxuICAgIFwicDp1bm9yZGVyZWQtbGlzdCg1KSA9PiB1bHxvbCA+IGxpID4gdWx8b2wgPiBsaSA+IHVsfG9sID4gbGkgPiB1bHxvbCA+IGxpID4gdWwgPiBsaTpmcmVzaFwiLFxuICAgIFwicDpvcmRlcmVkLWxpc3QoMSkgPT4gb2wgPiBsaTpmcmVzaFwiLFxuICAgIFwicDpvcmRlcmVkLWxpc3QoMikgPT4gdWx8b2wgPiBsaSA+IG9sID4gbGk6ZnJlc2hcIixcbiAgICBcInA6b3JkZXJlZC1saXN0KDMpID0+IHVsfG9sID4gbGkgPiB1bHxvbCA+IGxpID4gb2wgPiBsaTpmcmVzaFwiLFxuICAgIFwicDpvcmRlcmVkLWxpc3QoNCkgPT4gdWx8b2wgPiBsaSA+IHVsfG9sID4gbGkgPiB1bHxvbCA+IGxpID4gb2wgPiBsaTpmcmVzaFwiLFxuICAgIFwicDpvcmRlcmVkLWxpc3QoNSkgPT4gdWx8b2wgPiBsaSA+IHVsfG9sID4gbGkgPiB1bHxvbCA+IGxpID4gdWx8b2wgPiBsaSA+IG9sID4gbGk6ZnJlc2hcIixcbiAgICBcbiAgICBcInJbc3R5bGUtbmFtZT0nSHlwZXJsaW5rJ10gPT5cIixcbiAgICBcbiAgICBcInBbc3R5bGUtbmFtZT0nTm9ybWFsJ10gPT4gcDpmcmVzaFwiXG5dO1xuXG52YXIgc3RhbmRhcmRPcHRpb25zID0gZXhwb3J0cy5fc3RhbmRhcmRPcHRpb25zID0ge1xuICAgIHRyYW5zZm9ybURvY3VtZW50OiBpZGVudGl0eSxcbiAgICBpbmNsdWRlRGVmYXVsdFN0eWxlTWFwOiB0cnVlLFxuICAgIGluY2x1ZGVFbWJlZGRlZFN0eWxlTWFwOiB0cnVlXG59O1xuXG5mdW5jdGlvbiByZWFkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgcmV0dXJuIF8uZXh0ZW5kKHt9LCBzdGFuZGFyZE9wdGlvbnMsIG9wdGlvbnMsIHtcbiAgICAgICAgY3VzdG9tU3R5bGVNYXA6IHJlYWRTdHlsZU1hcChvcHRpb25zLnN0eWxlTWFwKSxcbiAgICAgICAgcmVhZFN0eWxlTWFwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZU1hcCA9IHRoaXMuY3VzdG9tU3R5bGVNYXA7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmNsdWRlRW1iZWRkZWRTdHlsZU1hcCkge1xuICAgICAgICAgICAgICAgIHN0eWxlTWFwID0gc3R5bGVNYXAuY29uY2F0KHJlYWRTdHlsZU1hcCh0aGlzLmVtYmVkZGVkU3R5bGVNYXApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmluY2x1ZGVEZWZhdWx0U3R5bGVNYXApIHtcbiAgICAgICAgICAgICAgICBzdHlsZU1hcCA9IHN0eWxlTWFwLmNvbmNhdChkZWZhdWx0U3R5bGVNYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlTWFwO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRTdHlsZU1hcChzdHlsZU1hcCkge1xuICAgIGlmICghc3R5bGVNYXApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH0gZWxzZSBpZiAoXy5pc1N0cmluZyhzdHlsZU1hcCkpIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlTWFwLnNwbGl0KFwiXFxuXCIpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZS50cmltKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmUgIT09IFwiXCIgJiYgbGluZS5jaGFyQXQoMCkgIT09IFwiI1wiO1xuICAgICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlTWFwO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInJlYWRPcHRpb25zIiwiXyIsInJlcXVpcmUiLCJkZWZhdWx0U3R5bGVNYXAiLCJfZGVmYXVsdFN0eWxlTWFwIiwic3RhbmRhcmRPcHRpb25zIiwiX3N0YW5kYXJkT3B0aW9ucyIsInRyYW5zZm9ybURvY3VtZW50IiwiaWRlbnRpdHkiLCJpbmNsdWRlRGVmYXVsdFN0eWxlTWFwIiwiaW5jbHVkZUVtYmVkZGVkU3R5bGVNYXAiLCJvcHRpb25zIiwiZXh0ZW5kIiwiY3VzdG9tU3R5bGVNYXAiLCJyZWFkU3R5bGVNYXAiLCJzdHlsZU1hcCIsImNvbmNhdCIsImVtYmVkZGVkU3R5bGVNYXAiLCJpc1N0cmluZyIsInNwbGl0IiwibWFwIiwibGluZSIsInRyaW0iLCJmaWx0ZXIiLCJjaGFyQXQiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/options-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/promises.js":
/*!***********************************************!*\
  !*** ../node_modules/mammoth/lib/promises.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar bluebird = __webpack_require__(/*! bluebird/js/release/promise */ \"(ssr)/../node_modules/bluebird/js/release/promise.js\")();\nexports.defer = defer;\nexports.when = bluebird.resolve;\nexports.resolve = bluebird.resolve;\nexports.all = bluebird.all;\nexports.props = bluebird.props;\nexports.reject = bluebird.reject;\nexports.promisify = bluebird.promisify;\nexports.mapSeries = bluebird.mapSeries;\nexports.attempt = bluebird.attempt;\nexports.nfcall = function(func) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    var promisedFunc = bluebird.promisify(func);\n    return promisedFunc.apply(null, args);\n};\nbluebird.prototype.fail = bluebird.prototype.caught;\nbluebird.prototype.also = function(func) {\n    return this.then(function(value) {\n        var returnValue = _.extend({}, value, func(value));\n        return bluebird.props(returnValue);\n    });\n};\nfunction defer() {\n    var resolve;\n    var reject;\n    var promise = new bluebird.Promise(function(resolveArg, rejectArg) {\n        resolve = resolveArg;\n        reject = rejectArg;\n    });\n    return {\n        resolve: resolve,\n        reject: reject,\n        promise: promise\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3Byb21pc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQUlDLG1CQUFPQSxDQUFDLHlFQUFZO0FBQzVCLElBQUlDLFdBQVdELG1CQUFPQSxDQUFDLHlGQUE2QjtBQUVwREUsYUFBYSxHQUFHQztBQUNoQkQsWUFBWSxHQUFHRCxTQUFTSSxPQUFPO0FBQy9CSCxlQUFlLEdBQUdELFNBQVNJLE9BQU87QUFDbENILFdBQVcsR0FBR0QsU0FBU0ssR0FBRztBQUMxQkosYUFBYSxHQUFHRCxTQUFTTSxLQUFLO0FBQzlCTCxjQUFjLEdBQUdELFNBQVNPLE1BQU07QUFDaENOLGlCQUFpQixHQUFHRCxTQUFTUSxTQUFTO0FBQ3RDUCxpQkFBaUIsR0FBR0QsU0FBU1MsU0FBUztBQUN0Q1IsZUFBZSxHQUFHRCxTQUFTVSxPQUFPO0FBRWxDVCxjQUFjLEdBQUcsU0FBU1csSUFBSTtJQUMxQixJQUFJQyxPQUFPQyxNQUFNQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXO0lBQ2pELElBQUlDLGVBQWVuQixTQUFTUSxTQUFTLENBQUNJO0lBQ3RDLE9BQU9PLGFBQWFDLEtBQUssQ0FBQyxNQUFNUDtBQUNwQztBQUVBYixTQUFTZSxTQUFTLENBQUNNLElBQUksR0FBR3JCLFNBQVNlLFNBQVMsQ0FBQ08sTUFBTTtBQUVuRHRCLFNBQVNlLFNBQVMsQ0FBQ1EsSUFBSSxHQUFHLFNBQVNYLElBQUk7SUFDbkMsT0FBTyxJQUFJLENBQUNZLElBQUksQ0FBQyxTQUFTQyxLQUFLO1FBQzNCLElBQUlDLGNBQWM1QixFQUFFNkIsTUFBTSxDQUFDLENBQUMsR0FBR0YsT0FBT2IsS0FBS2E7UUFDM0MsT0FBT3pCLFNBQVNNLEtBQUssQ0FBQ29CO0lBQzFCO0FBQ0o7QUFFQSxTQUFTeEI7SUFDTCxJQUFJRTtJQUNKLElBQUlHO0lBQ0osSUFBSXFCLFVBQVUsSUFBSTVCLFNBQVM2QixPQUFPLENBQUMsU0FBU0MsVUFBVSxFQUFFQyxTQUFTO1FBQzdEM0IsVUFBVTBCO1FBQ1Z2QixTQUFTd0I7SUFDYjtJQUVBLE9BQU87UUFDSDNCLFNBQVNBO1FBQ1RHLFFBQVFBO1FBQ1JxQixTQUFTQTtJQUNiO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3Byb21pc2VzLmpzPzY5YmEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcbnZhciBibHVlYmlyZCA9IHJlcXVpcmUoXCJibHVlYmlyZC9qcy9yZWxlYXNlL3Byb21pc2VcIikoKTtcblxuZXhwb3J0cy5kZWZlciA9IGRlZmVyO1xuZXhwb3J0cy53aGVuID0gYmx1ZWJpcmQucmVzb2x2ZTtcbmV4cG9ydHMucmVzb2x2ZSA9IGJsdWViaXJkLnJlc29sdmU7XG5leHBvcnRzLmFsbCA9IGJsdWViaXJkLmFsbDtcbmV4cG9ydHMucHJvcHMgPSBibHVlYmlyZC5wcm9wcztcbmV4cG9ydHMucmVqZWN0ID0gYmx1ZWJpcmQucmVqZWN0O1xuZXhwb3J0cy5wcm9taXNpZnkgPSBibHVlYmlyZC5wcm9taXNpZnk7XG5leHBvcnRzLm1hcFNlcmllcyA9IGJsdWViaXJkLm1hcFNlcmllcztcbmV4cG9ydHMuYXR0ZW1wdCA9IGJsdWViaXJkLmF0dGVtcHQ7XG5cbmV4cG9ydHMubmZjYWxsID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgcHJvbWlzZWRGdW5jID0gYmx1ZWJpcmQucHJvbWlzaWZ5KGZ1bmMpO1xuICAgIHJldHVybiBwcm9taXNlZEZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG59O1xuXG5ibHVlYmlyZC5wcm90b3R5cGUuZmFpbCA9IGJsdWViaXJkLnByb3RvdHlwZS5jYXVnaHQ7XG5cbmJsdWViaXJkLnByb3RvdHlwZS5hbHNvID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJldHVyblZhbHVlID0gXy5leHRlbmQoe30sIHZhbHVlLCBmdW5jKHZhbHVlKSk7XG4gICAgICAgIHJldHVybiBibHVlYmlyZC5wcm9wcyhyZXR1cm5WYWx1ZSk7XG4gICAgfSk7XG59O1xuXG5mdW5jdGlvbiBkZWZlcigpIHtcbiAgICB2YXIgcmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IGJsdWViaXJkLlByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZUFyZywgcmVqZWN0QXJnKSB7XG4gICAgICAgIHJlc29sdmUgPSByZXNvbHZlQXJnO1xuICAgICAgICByZWplY3QgPSByZWplY3RBcmc7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICByZWplY3Q6IHJlamVjdCxcbiAgICAgICAgcHJvbWlzZTogcHJvbWlzZVxuICAgIH07XG59XG4iXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJibHVlYmlyZCIsImV4cG9ydHMiLCJkZWZlciIsIndoZW4iLCJyZXNvbHZlIiwiYWxsIiwicHJvcHMiLCJyZWplY3QiLCJwcm9taXNpZnkiLCJtYXBTZXJpZXMiLCJhdHRlbXB0IiwibmZjYWxsIiwiZnVuYyIsImFyZ3MiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsInByb21pc2VkRnVuYyIsImFwcGx5IiwiZmFpbCIsImNhdWdodCIsImFsc28iLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsImV4dGVuZCIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZUFyZyIsInJlamVjdEFyZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/promises.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/raw-text.js":
/*!***********************************************!*\
  !*** ../node_modules/mammoth/lib/raw-text.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var documents = __webpack_require__(/*! ./documents */ \"(ssr)/../node_modules/mammoth/lib/documents.js\");\nfunction convertElementToRawText(element) {\n    if (element.type === \"text\") {\n        return element.value;\n    } else if (element.type === documents.types.tab) {\n        return \"\t\";\n    } else {\n        var tail = element.type === \"paragraph\" ? \"\\n\\n\" : \"\";\n        return (element.children || []).map(convertElementToRawText).join(\"\") + tail;\n    }\n}\nexports.convertElementToRawText = convertElementToRawText;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3Jhdy10ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRXJDLFNBQVNDLHdCQUF3QkMsT0FBTztJQUNwQyxJQUFJQSxRQUFRQyxJQUFJLEtBQUssUUFBUTtRQUN6QixPQUFPRCxRQUFRRSxLQUFLO0lBQ3hCLE9BQU8sSUFBSUYsUUFBUUMsSUFBSSxLQUFLSixVQUFVTSxLQUFLLENBQUNDLEdBQUcsRUFBRTtRQUM3QyxPQUFPO0lBQ1gsT0FBTztRQUNILElBQUlDLE9BQU9MLFFBQVFDLElBQUksS0FBSyxjQUFjLFNBQVM7UUFDbkQsT0FBTyxDQUFDRCxRQUFRTSxRQUFRLElBQUksRUFBRSxFQUFFQyxHQUFHLENBQUNSLHlCQUF5QlMsSUFBSSxDQUFDLE1BQU1IO0lBQzVFO0FBQ0o7QUFFQUksK0JBQStCLEdBQUdWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tYW1tb3RoL2xpYi9yYXctdGV4dC5qcz9kNTE1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBkb2N1bWVudHMgPSByZXF1aXJlKFwiLi9kb2N1bWVudHNcIik7XG5cbmZ1bmN0aW9uIGNvbnZlcnRFbGVtZW50VG9SYXdUZXh0KGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBcInRleHRcIikge1xuICAgICAgICByZXR1cm4gZWxlbWVudC52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQudHlwZSA9PT0gZG9jdW1lbnRzLnR5cGVzLnRhYikge1xuICAgICAgICByZXR1cm4gXCJcXHRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFpbCA9IGVsZW1lbnQudHlwZSA9PT0gXCJwYXJhZ3JhcGhcIiA/IFwiXFxuXFxuXCIgOiBcIlwiO1xuICAgICAgICByZXR1cm4gKGVsZW1lbnQuY2hpbGRyZW4gfHwgW10pLm1hcChjb252ZXJ0RWxlbWVudFRvUmF3VGV4dCkuam9pbihcIlwiKSArIHRhaWw7XG4gICAgfVxufVxuXG5leHBvcnRzLmNvbnZlcnRFbGVtZW50VG9SYXdUZXh0ID0gY29udmVydEVsZW1lbnRUb1Jhd1RleHQ7XG4iXSwibmFtZXMiOlsiZG9jdW1lbnRzIiwicmVxdWlyZSIsImNvbnZlcnRFbGVtZW50VG9SYXdUZXh0IiwiZWxlbWVudCIsInR5cGUiLCJ2YWx1ZSIsInR5cGVzIiwidGFiIiwidGFpbCIsImNoaWxkcmVuIiwibWFwIiwiam9pbiIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/raw-text.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/results.js":
/*!**********************************************!*\
  !*** ../node_modules/mammoth/lib/results.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nexports.Result = Result;\nexports.success = success;\nexports.warning = warning;\nexports.error = error;\nfunction Result(value, messages) {\n    this.value = value;\n    this.messages = messages || [];\n}\nResult.prototype.map = function(func) {\n    return new Result(func(this.value), this.messages);\n};\nResult.prototype.flatMap = function(func) {\n    var funcResult = func(this.value);\n    return new Result(funcResult.value, combineMessages([\n        this,\n        funcResult\n    ]));\n};\nResult.prototype.flatMapThen = function(func) {\n    var that = this;\n    return func(this.value).then(function(otherResult) {\n        return new Result(otherResult.value, combineMessages([\n            that,\n            otherResult\n        ]));\n    });\n};\nResult.combine = function(results) {\n    var values = _.flatten(_.pluck(results, \"value\"));\n    var messages = combineMessages(results);\n    return new Result(values, messages);\n};\nfunction success(value) {\n    return new Result(value, []);\n}\nfunction warning(message) {\n    return {\n        type: \"warning\",\n        message: message\n    };\n}\nfunction error(exception) {\n    return {\n        type: \"error\",\n        message: exception.message,\n        error: exception\n    };\n}\nfunction combineMessages(results) {\n    var messages = [];\n    _.flatten(_.pluck(results, \"messages\"), true).forEach(function(message) {\n        if (!containsMessage(messages, message)) {\n            messages.push(message);\n        }\n    });\n    return messages;\n}\nfunction containsMessage(messages, message) {\n    return _.find(messages, isSameMessage.bind(null, message)) !== undefined;\n}\nfunction isSameMessage(first, second) {\n    return first.type === second.type && first.message === second.message;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3Jlc3VsdHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSUMsbUJBQU9BLENBQUMseUVBQVk7QUFHNUJDLGNBQWMsR0FBR0M7QUFDakJELGVBQWUsR0FBR0U7QUFDbEJGLGVBQWUsR0FBR0c7QUFDbEJILGFBQWEsR0FBR0k7QUFHaEIsU0FBU0gsT0FBT0ksS0FBSyxFQUFFQyxRQUFRO0lBQzNCLElBQUksQ0FBQ0QsS0FBSyxHQUFHQTtJQUNiLElBQUksQ0FBQ0MsUUFBUSxHQUFHQSxZQUFZLEVBQUU7QUFDbEM7QUFFQUwsT0FBT00sU0FBUyxDQUFDQyxHQUFHLEdBQUcsU0FBU0MsSUFBSTtJQUNoQyxPQUFPLElBQUlSLE9BQU9RLEtBQUssSUFBSSxDQUFDSixLQUFLLEdBQUcsSUFBSSxDQUFDQyxRQUFRO0FBQ3JEO0FBRUFMLE9BQU9NLFNBQVMsQ0FBQ0csT0FBTyxHQUFHLFNBQVNELElBQUk7SUFDcEMsSUFBSUUsYUFBYUYsS0FBSyxJQUFJLENBQUNKLEtBQUs7SUFDaEMsT0FBTyxJQUFJSixPQUFPVSxXQUFXTixLQUFLLEVBQUVPLGdCQUFnQjtRQUFDLElBQUk7UUFBRUQ7S0FBVztBQUMxRTtBQUVBVixPQUFPTSxTQUFTLENBQUNNLFdBQVcsR0FBRyxTQUFTSixJQUFJO0lBQ3hDLElBQUlLLE9BQU8sSUFBSTtJQUNmLE9BQU9MLEtBQUssSUFBSSxDQUFDSixLQUFLLEVBQUVVLElBQUksQ0FBQyxTQUFTQyxXQUFXO1FBQzdDLE9BQU8sSUFBSWYsT0FBT2UsWUFBWVgsS0FBSyxFQUFFTyxnQkFBZ0I7WUFBQ0U7WUFBTUU7U0FBWTtJQUM1RTtBQUNKO0FBRUFmLE9BQU9nQixPQUFPLEdBQUcsU0FBU0MsT0FBTztJQUM3QixJQUFJQyxTQUFTckIsRUFBRXNCLE9BQU8sQ0FBQ3RCLEVBQUV1QixLQUFLLENBQUNILFNBQVM7SUFDeEMsSUFBSVosV0FBV00sZ0JBQWdCTTtJQUMvQixPQUFPLElBQUlqQixPQUFPa0IsUUFBUWI7QUFDOUI7QUFFQSxTQUFTSixRQUFRRyxLQUFLO0lBQ2xCLE9BQU8sSUFBSUosT0FBT0ksT0FBTyxFQUFFO0FBQy9CO0FBRUEsU0FBU0YsUUFBUW1CLE9BQU87SUFDcEIsT0FBTztRQUNIQyxNQUFNO1FBQ05ELFNBQVNBO0lBQ2I7QUFDSjtBQUVBLFNBQVNsQixNQUFNb0IsU0FBUztJQUNwQixPQUFPO1FBQ0hELE1BQU07UUFDTkQsU0FBU0UsVUFBVUYsT0FBTztRQUMxQmxCLE9BQU9vQjtJQUNYO0FBQ0o7QUFFQSxTQUFTWixnQkFBZ0JNLE9BQU87SUFDNUIsSUFBSVosV0FBVyxFQUFFO0lBQ2pCUixFQUFFc0IsT0FBTyxDQUFDdEIsRUFBRXVCLEtBQUssQ0FBQ0gsU0FBUyxhQUFhLE1BQU1PLE9BQU8sQ0FBQyxTQUFTSCxPQUFPO1FBQ2xFLElBQUksQ0FBQ0ksZ0JBQWdCcEIsVUFBVWdCLFVBQVU7WUFDckNoQixTQUFTcUIsSUFBSSxDQUFDTDtRQUNsQjtJQUNKO0lBQ0EsT0FBT2hCO0FBQ1g7QUFFQSxTQUFTb0IsZ0JBQWdCcEIsUUFBUSxFQUFFZ0IsT0FBTztJQUN0QyxPQUFPeEIsRUFBRThCLElBQUksQ0FBQ3RCLFVBQVV1QixjQUFjQyxJQUFJLENBQUMsTUFBTVIsY0FBY1M7QUFDbkU7QUFFQSxTQUFTRixjQUFjRyxLQUFLLEVBQUVDLE1BQU07SUFDaEMsT0FBT0QsTUFBTVQsSUFBSSxLQUFLVSxPQUFPVixJQUFJLElBQUlTLE1BQU1WLE9BQU8sS0FBS1csT0FBT1gsT0FBTztBQUN6RSIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvcmVzdWx0cy5qcz9lM2Q4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfID0gcmVxdWlyZShcInVuZGVyc2NvcmVcIik7XG5cblxuZXhwb3J0cy5SZXN1bHQgPSBSZXN1bHQ7XG5leHBvcnRzLnN1Y2Nlc3MgPSBzdWNjZXNzO1xuZXhwb3J0cy53YXJuaW5nID0gd2FybmluZztcbmV4cG9ydHMuZXJyb3IgPSBlcnJvcjtcblxuXG5mdW5jdGlvbiBSZXN1bHQodmFsdWUsIG1lc3NhZ2VzKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubWVzc2FnZXMgPSBtZXNzYWdlcyB8fCBbXTtcbn1cblxuUmVzdWx0LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQoZnVuYyh0aGlzLnZhbHVlKSwgdGhpcy5tZXNzYWdlcyk7XG59O1xuXG5SZXN1bHQucHJvdG90eXBlLmZsYXRNYXAgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIGZ1bmNSZXN1bHQgPSBmdW5jKHRoaXMudmFsdWUpO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KGZ1bmNSZXN1bHQudmFsdWUsIGNvbWJpbmVNZXNzYWdlcyhbdGhpcywgZnVuY1Jlc3VsdF0pKTtcbn07XG5cblJlc3VsdC5wcm90b3R5cGUuZmxhdE1hcFRoZW4gPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jKHRoaXMudmFsdWUpLnRoZW4oZnVuY3Rpb24ob3RoZXJSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQob3RoZXJSZXN1bHQudmFsdWUsIGNvbWJpbmVNZXNzYWdlcyhbdGhhdCwgb3RoZXJSZXN1bHRdKSk7XG4gICAgfSk7XG59O1xuXG5SZXN1bHQuY29tYmluZSA9IGZ1bmN0aW9uKHJlc3VsdHMpIHtcbiAgICB2YXIgdmFsdWVzID0gXy5mbGF0dGVuKF8ucGx1Y2socmVzdWx0cywgXCJ2YWx1ZVwiKSk7XG4gICAgdmFyIG1lc3NhZ2VzID0gY29tYmluZU1lc3NhZ2VzKHJlc3VsdHMpO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHZhbHVlcywgbWVzc2FnZXMpO1xufTtcblxuZnVuY3Rpb24gc3VjY2Vzcyh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHZhbHVlLCBbXSk7XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZXJyb3IoZXhjZXB0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICBtZXNzYWdlOiBleGNlcHRpb24ubWVzc2FnZSxcbiAgICAgICAgZXJyb3I6IGV4Y2VwdGlvblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVNZXNzYWdlcyhyZXN1bHRzKSB7XG4gICAgdmFyIG1lc3NhZ2VzID0gW107XG4gICAgXy5mbGF0dGVuKF8ucGx1Y2socmVzdWx0cywgXCJtZXNzYWdlc1wiKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgIGlmICghY29udGFpbnNNZXNzYWdlKG1lc3NhZ2VzLCBtZXNzYWdlKSkge1xuICAgICAgICAgICAgbWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtZXNzYWdlcztcbn1cblxuZnVuY3Rpb24gY29udGFpbnNNZXNzYWdlKG1lc3NhZ2VzLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIF8uZmluZChtZXNzYWdlcywgaXNTYW1lTWVzc2FnZS5iaW5kKG51bGwsIG1lc3NhZ2UpKSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc1NhbWVNZXNzYWdlKGZpcnN0LCBzZWNvbmQpIHtcbiAgICByZXR1cm4gZmlyc3QudHlwZSA9PT0gc2Vjb25kLnR5cGUgJiYgZmlyc3QubWVzc2FnZSA9PT0gc2Vjb25kLm1lc3NhZ2U7XG59XG4iXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJleHBvcnRzIiwiUmVzdWx0Iiwic3VjY2VzcyIsIndhcm5pbmciLCJlcnJvciIsInZhbHVlIiwibWVzc2FnZXMiLCJwcm90b3R5cGUiLCJtYXAiLCJmdW5jIiwiZmxhdE1hcCIsImZ1bmNSZXN1bHQiLCJjb21iaW5lTWVzc2FnZXMiLCJmbGF0TWFwVGhlbiIsInRoYXQiLCJ0aGVuIiwib3RoZXJSZXN1bHQiLCJjb21iaW5lIiwicmVzdWx0cyIsInZhbHVlcyIsImZsYXR0ZW4iLCJwbHVjayIsIm1lc3NhZ2UiLCJ0eXBlIiwiZXhjZXB0aW9uIiwiZm9yRWFjaCIsImNvbnRhaW5zTWVzc2FnZSIsInB1c2giLCJmaW5kIiwiaXNTYW1lTWVzc2FnZSIsImJpbmQiLCJ1bmRlZmluZWQiLCJmaXJzdCIsInNlY29uZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/results.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/style-reader.js":
/*!***************************************************!*\
  !*** ../node_modules/mammoth/lib/style-reader.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar lop = __webpack_require__(/*! lop */ \"(ssr)/../node_modules/lop/index.js\");\nvar documentMatchers = __webpack_require__(/*! ./styles/document-matchers */ \"(ssr)/../node_modules/mammoth/lib/styles/document-matchers.js\");\nvar htmlPaths = __webpack_require__(/*! ./styles/html-paths */ \"(ssr)/../node_modules/mammoth/lib/styles/html-paths.js\");\nvar tokenise = (__webpack_require__(/*! ./styles/parser/tokeniser */ \"(ssr)/../node_modules/mammoth/lib/styles/parser/tokeniser.js\").tokenise);\nvar results = __webpack_require__(/*! ./results */ \"(ssr)/../node_modules/mammoth/lib/results.js\");\nexports.readHtmlPath = readHtmlPath;\nexports.readDocumentMatcher = readDocumentMatcher;\nexports.readStyle = readStyle;\nfunction readStyle(string) {\n    return parseString(styleRule, string);\n}\nfunction createStyleRule() {\n    return lop.rules.sequence(lop.rules.sequence.capture(documentMatcherRule()), lop.rules.tokenOfType(\"whitespace\"), lop.rules.tokenOfType(\"arrow\"), lop.rules.sequence.capture(lop.rules.optional(lop.rules.sequence(lop.rules.tokenOfType(\"whitespace\"), lop.rules.sequence.capture(htmlPathRule())).head())), lop.rules.tokenOfType(\"end\")).map(function(documentMatcher, htmlPath) {\n        return {\n            from: documentMatcher,\n            to: htmlPath.valueOrElse(htmlPaths.empty)\n        };\n    });\n}\nfunction readDocumentMatcher(string) {\n    return parseString(documentMatcherRule(), string);\n}\nfunction documentMatcherRule() {\n    var sequence = lop.rules.sequence;\n    var identifierToConstant = function(identifier, constant) {\n        return lop.rules.then(lop.rules.token(\"identifier\", identifier), function() {\n            return constant;\n        });\n    };\n    var paragraphRule = identifierToConstant(\"p\", documentMatchers.paragraph);\n    var runRule = identifierToConstant(\"r\", documentMatchers.run);\n    var elementTypeRule = lop.rules.firstOf(\"p or r or table\", paragraphRule, runRule);\n    var styleIdRule = lop.rules.sequence(lop.rules.tokenOfType(\"dot\"), lop.rules.sequence.cut(), lop.rules.sequence.capture(identifierRule)).map(function(styleId) {\n        return {\n            styleId: styleId\n        };\n    });\n    var styleNameMatcherRule = lop.rules.firstOf(\"style name matcher\", lop.rules.then(lop.rules.sequence(lop.rules.tokenOfType(\"equals\"), lop.rules.sequence.cut(), lop.rules.sequence.capture(stringRule)).head(), function(styleName) {\n        return {\n            styleName: documentMatchers.equalTo(styleName)\n        };\n    }), lop.rules.then(lop.rules.sequence(lop.rules.tokenOfType(\"startsWith\"), lop.rules.sequence.cut(), lop.rules.sequence.capture(stringRule)).head(), function(styleName) {\n        return {\n            styleName: documentMatchers.startsWith(styleName)\n        };\n    }));\n    var styleNameRule = lop.rules.sequence(lop.rules.tokenOfType(\"open-square-bracket\"), lop.rules.sequence.cut(), lop.rules.token(\"identifier\", \"style-name\"), lop.rules.sequence.capture(styleNameMatcherRule), lop.rules.tokenOfType(\"close-square-bracket\")).head();\n    var listTypeRule = lop.rules.firstOf(\"list type\", identifierToConstant(\"ordered-list\", {\n        isOrdered: true\n    }), identifierToConstant(\"unordered-list\", {\n        isOrdered: false\n    }));\n    var listRule = sequence(lop.rules.tokenOfType(\"colon\"), sequence.capture(listTypeRule), sequence.cut(), lop.rules.tokenOfType(\"open-paren\"), sequence.capture(integerRule), lop.rules.tokenOfType(\"close-paren\")).map(function(listType, levelNumber) {\n        return {\n            list: {\n                isOrdered: listType.isOrdered,\n                levelIndex: levelNumber - 1\n            }\n        };\n    });\n    function createMatcherSuffixesRule(rules) {\n        var matcherSuffix = lop.rules.firstOf.apply(lop.rules.firstOf, [\n            \"matcher suffix\"\n        ].concat(rules));\n        var matcherSuffixes = lop.rules.zeroOrMore(matcherSuffix);\n        return lop.rules.then(matcherSuffixes, function(suffixes) {\n            var matcherOptions = {};\n            suffixes.forEach(function(suffix) {\n                _.extend(matcherOptions, suffix);\n            });\n            return matcherOptions;\n        });\n    }\n    var paragraphOrRun = sequence(sequence.capture(elementTypeRule), sequence.capture(createMatcherSuffixesRule([\n        styleIdRule,\n        styleNameRule,\n        listRule\n    ]))).map(function(createMatcher, matcherOptions) {\n        return createMatcher(matcherOptions);\n    });\n    var table = sequence(lop.rules.token(\"identifier\", \"table\"), sequence.capture(createMatcherSuffixesRule([\n        styleIdRule,\n        styleNameRule\n    ]))).map(function(options) {\n        return documentMatchers.table(options);\n    });\n    var bold = identifierToConstant(\"b\", documentMatchers.bold);\n    var italic = identifierToConstant(\"i\", documentMatchers.italic);\n    var underline = identifierToConstant(\"u\", documentMatchers.underline);\n    var strikethrough = identifierToConstant(\"strike\", documentMatchers.strikethrough);\n    var allCaps = identifierToConstant(\"all-caps\", documentMatchers.allCaps);\n    var smallCaps = identifierToConstant(\"small-caps\", documentMatchers.smallCaps);\n    var highlight = sequence(lop.rules.token(\"identifier\", \"highlight\"), lop.rules.sequence.capture(lop.rules.optional(lop.rules.sequence(lop.rules.tokenOfType(\"open-square-bracket\"), lop.rules.sequence.cut(), lop.rules.token(\"identifier\", \"color\"), lop.rules.tokenOfType(\"equals\"), lop.rules.sequence.capture(stringRule), lop.rules.tokenOfType(\"close-square-bracket\")).head()))).map(function(color) {\n        return documentMatchers.highlight({\n            color: color.valueOrElse(undefined)\n        });\n    });\n    var commentReference = identifierToConstant(\"comment-reference\", documentMatchers.commentReference);\n    var breakMatcher = sequence(lop.rules.token(\"identifier\", \"br\"), sequence.cut(), lop.rules.tokenOfType(\"open-square-bracket\"), lop.rules.token(\"identifier\", \"type\"), lop.rules.tokenOfType(\"equals\"), sequence.capture(stringRule), lop.rules.tokenOfType(\"close-square-bracket\")).map(function(breakType) {\n        switch(breakType){\n            case \"line\":\n                return documentMatchers.lineBreak;\n            case \"page\":\n                return documentMatchers.pageBreak;\n            case \"column\":\n                return documentMatchers.columnBreak;\n            default:\n        }\n    });\n    return lop.rules.firstOf(\"element type\", paragraphOrRun, table, bold, italic, underline, strikethrough, allCaps, smallCaps, highlight, commentReference, breakMatcher);\n}\nfunction readHtmlPath(string) {\n    return parseString(htmlPathRule(), string);\n}\nfunction htmlPathRule() {\n    var capture = lop.rules.sequence.capture;\n    var whitespaceRule = lop.rules.tokenOfType(\"whitespace\");\n    var freshRule = lop.rules.then(lop.rules.optional(lop.rules.sequence(lop.rules.tokenOfType(\"colon\"), lop.rules.token(\"identifier\", \"fresh\"))), function(option) {\n        return option.map(function() {\n            return true;\n        }).valueOrElse(false);\n    });\n    var separatorRule = lop.rules.then(lop.rules.optional(lop.rules.sequence(lop.rules.tokenOfType(\"colon\"), lop.rules.token(\"identifier\", \"separator\"), lop.rules.tokenOfType(\"open-paren\"), capture(stringRule), lop.rules.tokenOfType(\"close-paren\")).head()), function(option) {\n        return option.valueOrElse(\"\");\n    });\n    var tagNamesRule = lop.rules.oneOrMoreWithSeparator(identifierRule, lop.rules.tokenOfType(\"choice\"));\n    var styleElementRule = lop.rules.sequence(capture(tagNamesRule), capture(lop.rules.zeroOrMore(attributeOrClassRule)), capture(freshRule), capture(separatorRule)).map(function(tagName, attributesList, fresh, separator) {\n        var attributes = {};\n        var options = {};\n        attributesList.forEach(function(attribute) {\n            if (attribute.append && attributes[attribute.name]) {\n                attributes[attribute.name] += \" \" + attribute.value;\n            } else {\n                attributes[attribute.name] = attribute.value;\n            }\n        });\n        if (fresh) {\n            options.fresh = true;\n        }\n        if (separator) {\n            options.separator = separator;\n        }\n        return htmlPaths.element(tagName, attributes, options);\n    });\n    return lop.rules.firstOf(\"html path\", lop.rules.then(lop.rules.tokenOfType(\"bang\"), function() {\n        return htmlPaths.ignore;\n    }), lop.rules.then(lop.rules.zeroOrMoreWithSeparator(styleElementRule, lop.rules.sequence(whitespaceRule, lop.rules.tokenOfType(\"gt\"), whitespaceRule)), htmlPaths.elements));\n}\nvar identifierRule = lop.rules.then(lop.rules.tokenOfType(\"identifier\"), decodeEscapeSequences);\nvar integerRule = lop.rules.tokenOfType(\"integer\");\nvar stringRule = lop.rules.then(lop.rules.tokenOfType(\"string\"), decodeEscapeSequences);\nvar escapeSequences = {\n    \"n\": \"\\n\",\n    \"r\": \"\\r\",\n    \"t\": \"\t\"\n};\nfunction decodeEscapeSequences(value) {\n    return value.replace(/\\\\(.)/g, function(match, code) {\n        return escapeSequences[code] || code;\n    });\n}\nvar attributeRule = lop.rules.sequence(lop.rules.tokenOfType(\"open-square-bracket\"), lop.rules.sequence.cut(), lop.rules.sequence.capture(identifierRule), lop.rules.tokenOfType(\"equals\"), lop.rules.sequence.capture(stringRule), lop.rules.tokenOfType(\"close-square-bracket\")).map(function(name, value) {\n    return {\n        name: name,\n        value: value,\n        append: false\n    };\n});\nvar classRule = lop.rules.sequence(lop.rules.tokenOfType(\"dot\"), lop.rules.sequence.cut(), lop.rules.sequence.capture(identifierRule)).map(function(className) {\n    return {\n        name: \"class\",\n        value: className,\n        append: true\n    };\n});\nvar attributeOrClassRule = lop.rules.firstOf(\"attribute or class\", attributeRule, classRule);\nfunction parseString(rule, string) {\n    var tokens = tokenise(string);\n    var parser = lop.Parser();\n    var parseResult = parser.parseTokens(rule, tokens);\n    if (parseResult.isSuccess()) {\n        return results.success(parseResult.value());\n    } else {\n        return new results.Result(null, [\n            results.warning(describeFailure(string, parseResult))\n        ]);\n    }\n}\nfunction describeFailure(input, parseResult) {\n    return \"Did not understand this style mapping, so ignored it: \" + input + \"\\n\" + parseResult.errors().map(describeError).join(\"\\n\");\n}\nfunction describeError(error) {\n    return \"Error was at character number \" + error.characterNumber() + \": \" + \"Expected \" + error.expected + \" but got \" + error.actual;\n}\nvar styleRule = createStyleRule();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/style-reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/styles/document-matchers.js":
/*!***************************************************************!*\
  !*** ../node_modules/mammoth/lib/styles/document-matchers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.paragraph = paragraph;\nexports.run = run;\nexports.table = table;\nexports.bold = new Matcher(\"bold\");\nexports.italic = new Matcher(\"italic\");\nexports.underline = new Matcher(\"underline\");\nexports.strikethrough = new Matcher(\"strikethrough\");\nexports.allCaps = new Matcher(\"allCaps\");\nexports.smallCaps = new Matcher(\"smallCaps\");\nexports.highlight = highlight;\nexports.commentReference = new Matcher(\"commentReference\");\nexports.lineBreak = new BreakMatcher({\n    breakType: \"line\"\n});\nexports.pageBreak = new BreakMatcher({\n    breakType: \"page\"\n});\nexports.columnBreak = new BreakMatcher({\n    breakType: \"column\"\n});\nexports.equalTo = equalTo;\nexports.startsWith = startsWith;\nfunction paragraph(options) {\n    return new Matcher(\"paragraph\", options);\n}\nfunction run(options) {\n    return new Matcher(\"run\", options);\n}\nfunction table(options) {\n    return new Matcher(\"table\", options);\n}\nfunction highlight(options) {\n    return new HighlightMatcher(options);\n}\nfunction Matcher(elementType, options) {\n    options = options || {};\n    this._elementType = elementType;\n    this._styleId = options.styleId;\n    this._styleName = options.styleName;\n    if (options.list) {\n        this._listIndex = options.list.levelIndex;\n        this._listIsOrdered = options.list.isOrdered;\n    }\n}\nMatcher.prototype.matches = function(element) {\n    return element.type === this._elementType && (this._styleId === undefined || element.styleId === this._styleId) && (this._styleName === undefined || element.styleName && this._styleName.operator(this._styleName.operand, element.styleName)) && (this._listIndex === undefined || isList(element, this._listIndex, this._listIsOrdered)) && (this._breakType === undefined || this._breakType === element.breakType);\n};\nfunction HighlightMatcher(options) {\n    options = options || {};\n    this._color = options.color;\n}\nHighlightMatcher.prototype.matches = function(element) {\n    return element.type === \"highlight\" && (this._color === undefined || element.color === this._color);\n};\nfunction BreakMatcher(options) {\n    options = options || {};\n    this._breakType = options.breakType;\n}\nBreakMatcher.prototype.matches = function(element) {\n    return element.type === \"break\" && (this._breakType === undefined || element.breakType === this._breakType);\n};\nfunction isList(element, levelIndex, isOrdered) {\n    return element.numbering && element.numbering.level == levelIndex && element.numbering.isOrdered == isOrdered;\n}\nfunction equalTo(value) {\n    return {\n        operator: operatorEqualTo,\n        operand: value\n    };\n}\nfunction startsWith(value) {\n    return {\n        operator: operatorStartsWith,\n        operand: value\n    };\n}\nfunction operatorEqualTo(first, second) {\n    return first.toUpperCase() === second.toUpperCase();\n}\nfunction operatorStartsWith(first, second) {\n    return second.toUpperCase().indexOf(first.toUpperCase()) === 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/styles/document-matchers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/styles/html-paths.js":
/*!********************************************************!*\
  !*** ../node_modules/mammoth/lib/styles/html-paths.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar html = __webpack_require__(/*! ../html */ \"(ssr)/../node_modules/mammoth/lib/html/index.js\");\nexports.topLevelElement = topLevelElement;\nexports.elements = elements;\nexports.element = element;\nfunction topLevelElement(tagName, attributes) {\n    return elements([\n        element(tagName, attributes, {\n            fresh: true\n        })\n    ]);\n}\nfunction elements(elementStyles) {\n    return new HtmlPath(elementStyles.map(function(elementStyle) {\n        if (_.isString(elementStyle)) {\n            return element(elementStyle);\n        } else {\n            return elementStyle;\n        }\n    }));\n}\nfunction HtmlPath(elements) {\n    this._elements = elements;\n}\nHtmlPath.prototype.wrap = function wrap(children) {\n    var result = children();\n    for(var index = this._elements.length - 1; index >= 0; index--){\n        result = this._elements[index].wrapNodes(result);\n    }\n    return result;\n};\nfunction element(tagName, attributes, options) {\n    options = options || {};\n    return new Element(tagName, attributes, options);\n}\nfunction Element(tagName, attributes, options) {\n    var tagNames = {};\n    if (_.isArray(tagName)) {\n        tagName.forEach(function(tagName) {\n            tagNames[tagName] = true;\n        });\n        tagName = tagName[0];\n    } else {\n        tagNames[tagName] = true;\n    }\n    this.tagName = tagName;\n    this.tagNames = tagNames;\n    this.attributes = attributes || {};\n    this.fresh = options.fresh;\n    this.separator = options.separator;\n}\nElement.prototype.matchesElement = function(element) {\n    return this.tagNames[element.tagName] && _.isEqual(this.attributes || {}, element.attributes || {});\n};\nElement.prototype.wrap = function wrap(generateNodes) {\n    return this.wrapNodes(generateNodes());\n};\nElement.prototype.wrapNodes = function wrapNodes(nodes) {\n    return [\n        html.elementWithTag(this, nodes)\n    ];\n};\nexports.empty = elements([]);\nexports.ignore = {\n    wrap: function() {\n        return [];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3N0eWxlcy9odG1sLXBhdGhzLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQUlDLG1CQUFPQSxDQUFDLHlFQUFZO0FBRTVCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDLGdFQUFTO0FBRTVCRSx1QkFBdUIsR0FBR0M7QUFDMUJELGdCQUFnQixHQUFHRTtBQUNuQkYsZUFBZSxHQUFHRztBQUVsQixTQUFTRixnQkFBZ0JHLE9BQU8sRUFBRUMsVUFBVTtJQUN4QyxPQUFPSCxTQUFTO1FBQUNDLFFBQVFDLFNBQVNDLFlBQVk7WUFBQ0MsT0FBTztRQUFJO0tBQUc7QUFDakU7QUFFQSxTQUFTSixTQUFTSyxhQUFhO0lBQzNCLE9BQU8sSUFBSUMsU0FBU0QsY0FBY0UsR0FBRyxDQUFDLFNBQVNDLFlBQVk7UUFDdkQsSUFBSWIsRUFBRWMsUUFBUSxDQUFDRCxlQUFlO1lBQzFCLE9BQU9QLFFBQVFPO1FBQ25CLE9BQU87WUFDSCxPQUFPQTtRQUNYO0lBQ0o7QUFDSjtBQUVBLFNBQVNGLFNBQVNOLFFBQVE7SUFDdEIsSUFBSSxDQUFDVSxTQUFTLEdBQUdWO0FBQ3JCO0FBRUFNLFNBQVNLLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHLFNBQVNBLEtBQUtDLFFBQVE7SUFDNUMsSUFBSUMsU0FBU0Q7SUFDYixJQUFLLElBQUlFLFFBQVEsSUFBSSxDQUFDTCxTQUFTLENBQUNNLE1BQU0sR0FBRyxHQUFHRCxTQUFTLEdBQUdBLFFBQVM7UUFDN0RELFNBQVMsSUFBSSxDQUFDSixTQUFTLENBQUNLLE1BQU0sQ0FBQ0UsU0FBUyxDQUFDSDtJQUM3QztJQUNBLE9BQU9BO0FBQ1g7QUFFQSxTQUFTYixRQUFRQyxPQUFPLEVBQUVDLFVBQVUsRUFBRWUsT0FBTztJQUN6Q0EsVUFBVUEsV0FBVyxDQUFDO0lBQ3RCLE9BQU8sSUFBSUMsUUFBUWpCLFNBQVNDLFlBQVllO0FBQzVDO0FBRUEsU0FBU0MsUUFBUWpCLE9BQU8sRUFBRUMsVUFBVSxFQUFFZSxPQUFPO0lBQ3pDLElBQUlFLFdBQVcsQ0FBQztJQUNoQixJQUFJekIsRUFBRTBCLE9BQU8sQ0FBQ25CLFVBQVU7UUFDcEJBLFFBQVFvQixPQUFPLENBQUMsU0FBU3BCLE9BQU87WUFDNUJrQixRQUFRLENBQUNsQixRQUFRLEdBQUc7UUFDeEI7UUFDQUEsVUFBVUEsT0FBTyxDQUFDLEVBQUU7SUFDeEIsT0FBTztRQUNIa0IsUUFBUSxDQUFDbEIsUUFBUSxHQUFHO0lBQ3hCO0lBRUEsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ2YsSUFBSSxDQUFDa0IsUUFBUSxHQUFHQTtJQUNoQixJQUFJLENBQUNqQixVQUFVLEdBQUdBLGNBQWMsQ0FBQztJQUNqQyxJQUFJLENBQUNDLEtBQUssR0FBR2MsUUFBUWQsS0FBSztJQUMxQixJQUFJLENBQUNtQixTQUFTLEdBQUdMLFFBQVFLLFNBQVM7QUFDdEM7QUFFQUosUUFBUVIsU0FBUyxDQUFDYSxjQUFjLEdBQUcsU0FBU3ZCLE9BQU87SUFDL0MsT0FBTyxJQUFJLENBQUNtQixRQUFRLENBQUNuQixRQUFRQyxPQUFPLENBQUMsSUFBSVAsRUFBRThCLE9BQU8sQ0FBQyxJQUFJLENBQUN0QixVQUFVLElBQUksQ0FBQyxHQUFHRixRQUFRRSxVQUFVLElBQUksQ0FBQztBQUNyRztBQUVBZ0IsUUFBUVIsU0FBUyxDQUFDQyxJQUFJLEdBQUcsU0FBU0EsS0FBS2MsYUFBYTtJQUNoRCxPQUFPLElBQUksQ0FBQ1QsU0FBUyxDQUFDUztBQUMxQjtBQUVBUCxRQUFRUixTQUFTLENBQUNNLFNBQVMsR0FBRyxTQUFTQSxVQUFVVSxLQUFLO0lBQ2xELE9BQU87UUFBQzlCLEtBQUsrQixjQUFjLENBQUMsSUFBSSxFQUFFRDtLQUFPO0FBQzdDO0FBRUE3QixhQUFhLEdBQUdFLFNBQVMsRUFBRTtBQUMzQkYsY0FBYyxHQUFHO0lBQ2JjLE1BQU07UUFDRixPQUFPLEVBQUU7SUFDYjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tYW1tb3RoL2xpYi9zdHlsZXMvaHRtbC1wYXRocy5qcz82OGM1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfID0gcmVxdWlyZShcInVuZGVyc2NvcmVcIik7XG5cbnZhciBodG1sID0gcmVxdWlyZShcIi4uL2h0bWxcIik7XG5cbmV4cG9ydHMudG9wTGV2ZWxFbGVtZW50ID0gdG9wTGV2ZWxFbGVtZW50O1xuZXhwb3J0cy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuZXhwb3J0cy5lbGVtZW50ID0gZWxlbWVudDtcblxuZnVuY3Rpb24gdG9wTGV2ZWxFbGVtZW50KHRhZ05hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gZWxlbWVudHMoW2VsZW1lbnQodGFnTmFtZSwgYXR0cmlidXRlcywge2ZyZXNoOiB0cnVlfSldKTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudHMoZWxlbWVudFN0eWxlcykge1xuICAgIHJldHVybiBuZXcgSHRtbFBhdGgoZWxlbWVudFN0eWxlcy5tYXAoZnVuY3Rpb24oZWxlbWVudFN0eWxlKSB7XG4gICAgICAgIGlmIChfLmlzU3RyaW5nKGVsZW1lbnRTdHlsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50KGVsZW1lbnRTdHlsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudFN0eWxlO1xuICAgICAgICB9XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBIdG1sUGF0aChlbGVtZW50cykge1xuICAgIHRoaXMuX2VsZW1lbnRzID0gZWxlbWVudHM7XG59XG5cbkh0bWxQYXRoLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gd3JhcChjaGlsZHJlbikge1xuICAgIHZhciByZXN1bHQgPSBjaGlsZHJlbigpO1xuICAgIGZvciAodmFyIGluZGV4ID0gdGhpcy5fZWxlbWVudHMubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgICAgICByZXN1bHQgPSB0aGlzLl9lbGVtZW50c1tpbmRleF0ud3JhcE5vZGVzKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5mdW5jdGlvbiBlbGVtZW50KHRhZ05hbWUsIGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICByZXR1cm4gbmV3IEVsZW1lbnQodGFnTmFtZSwgYXR0cmlidXRlcywgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIEVsZW1lbnQodGFnTmFtZSwgYXR0cmlidXRlcywgb3B0aW9ucykge1xuICAgIHZhciB0YWdOYW1lcyA9IHt9O1xuICAgIGlmIChfLmlzQXJyYXkodGFnTmFtZSkpIHtcbiAgICAgICAgdGFnTmFtZS5mb3JFYWNoKGZ1bmN0aW9uKHRhZ05hbWUpIHtcbiAgICAgICAgICAgIHRhZ05hbWVzW3RhZ05hbWVdID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRhZ05hbWVzW3RhZ05hbWVdID0gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy50YWdOYW1lID0gdGFnTmFtZTtcbiAgICB0aGlzLnRhZ05hbWVzID0gdGFnTmFtZXM7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcyB8fCB7fTtcbiAgICB0aGlzLmZyZXNoID0gb3B0aW9ucy5mcmVzaDtcbiAgICB0aGlzLnNlcGFyYXRvciA9IG9wdGlvbnMuc2VwYXJhdG9yO1xufVxuXG5FbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy50YWdOYW1lc1tlbGVtZW50LnRhZ05hbWVdICYmIF8uaXNFcXVhbCh0aGlzLmF0dHJpYnV0ZXMgfHwge30sIGVsZW1lbnQuYXR0cmlidXRlcyB8fCB7fSk7XG59O1xuXG5FbGVtZW50LnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gd3JhcChnZW5lcmF0ZU5vZGVzKSB7XG4gICAgcmV0dXJuIHRoaXMud3JhcE5vZGVzKGdlbmVyYXRlTm9kZXMoKSk7XG59O1xuXG5FbGVtZW50LnByb3RvdHlwZS53cmFwTm9kZXMgPSBmdW5jdGlvbiB3cmFwTm9kZXMobm9kZXMpIHtcbiAgICByZXR1cm4gW2h0bWwuZWxlbWVudFdpdGhUYWcodGhpcywgbm9kZXMpXTtcbn07XG5cbmV4cG9ydHMuZW1wdHkgPSBlbGVtZW50cyhbXSk7XG5leHBvcnRzLmlnbm9yZSA9IHtcbiAgICB3cmFwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJodG1sIiwiZXhwb3J0cyIsInRvcExldmVsRWxlbWVudCIsImVsZW1lbnRzIiwiZWxlbWVudCIsInRhZ05hbWUiLCJhdHRyaWJ1dGVzIiwiZnJlc2giLCJlbGVtZW50U3R5bGVzIiwiSHRtbFBhdGgiLCJtYXAiLCJlbGVtZW50U3R5bGUiLCJpc1N0cmluZyIsIl9lbGVtZW50cyIsInByb3RvdHlwZSIsIndyYXAiLCJjaGlsZHJlbiIsInJlc3VsdCIsImluZGV4IiwibGVuZ3RoIiwid3JhcE5vZGVzIiwib3B0aW9ucyIsIkVsZW1lbnQiLCJ0YWdOYW1lcyIsImlzQXJyYXkiLCJmb3JFYWNoIiwic2VwYXJhdG9yIiwibWF0Y2hlc0VsZW1lbnQiLCJpc0VxdWFsIiwiZ2VuZXJhdGVOb2RlcyIsIm5vZGVzIiwiZWxlbWVudFdpdGhUYWciLCJlbXB0eSIsImlnbm9yZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/styles/html-paths.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/styles/parser/tokeniser.js":
/*!**************************************************************!*\
  !*** ../node_modules/mammoth/lib/styles/parser/tokeniser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var lop = __webpack_require__(/*! lop */ \"(ssr)/../node_modules/lop/index.js\");\nvar RegexTokeniser = lop.RegexTokeniser;\nexports.tokenise = tokenise;\nvar stringPrefix = \"'((?:\\\\\\\\.|[^'])*)\";\nfunction tokenise(string) {\n    var identifierCharacter = \"(?:[a-zA-Z\\\\-_]|\\\\\\\\.)\";\n    var tokeniser = new RegexTokeniser([\n        {\n            name: \"identifier\",\n            regex: new RegExp(\"(\" + identifierCharacter + \"(?:\" + identifierCharacter + \"|[0-9])*)\")\n        },\n        {\n            name: \"dot\",\n            regex: /\\./\n        },\n        {\n            name: \"colon\",\n            regex: /:/\n        },\n        {\n            name: \"gt\",\n            regex: />/\n        },\n        {\n            name: \"whitespace\",\n            regex: /\\s+/\n        },\n        {\n            name: \"arrow\",\n            regex: /=>/\n        },\n        {\n            name: \"equals\",\n            regex: /=/\n        },\n        {\n            name: \"startsWith\",\n            regex: /\\^=/\n        },\n        {\n            name: \"open-paren\",\n            regex: /\\(/\n        },\n        {\n            name: \"close-paren\",\n            regex: /\\)/\n        },\n        {\n            name: \"open-square-bracket\",\n            regex: /\\[/\n        },\n        {\n            name: \"close-square-bracket\",\n            regex: /\\]/\n        },\n        {\n            name: \"string\",\n            regex: new RegExp(stringPrefix + \"'\")\n        },\n        {\n            name: \"unterminated-string\",\n            regex: new RegExp(stringPrefix)\n        },\n        {\n            name: \"integer\",\n            regex: /([0-9]+)/\n        },\n        {\n            name: \"choice\",\n            regex: /\\|/\n        },\n        {\n            name: \"bang\",\n            regex: /(!)/\n        }\n    ]);\n    return tokeniser.tokenise(string);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3N0eWxlcy9wYXJzZXIvdG9rZW5pc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE1BQU1DLG1CQUFPQSxDQUFDLCtDQUFLO0FBQ3ZCLElBQUlDLGlCQUFpQkYsSUFBSUUsY0FBYztBQUV2Q0MsZ0JBQWdCLEdBQUdDO0FBRW5CLElBQUlDLGVBQWU7QUFFbkIsU0FBU0QsU0FBU0UsTUFBTTtJQUNwQixJQUFJQyxzQkFBc0I7SUFDMUIsSUFBSUMsWUFBWSxJQUFJTixlQUFlO1FBQy9CO1lBQUNPLE1BQU07WUFBY0MsT0FBTyxJQUFJQyxPQUFPLE1BQU1KLHNCQUFzQixRQUFRQSxzQkFBc0I7UUFBWTtRQUM3RztZQUFDRSxNQUFNO1lBQU9DLE9BQU87UUFBSTtRQUN6QjtZQUFDRCxNQUFNO1lBQVNDLE9BQU87UUFBRztRQUMxQjtZQUFDRCxNQUFNO1lBQU1DLE9BQU87UUFBRztRQUN2QjtZQUFDRCxNQUFNO1lBQWNDLE9BQU87UUFBSztRQUNqQztZQUFDRCxNQUFNO1lBQVNDLE9BQU87UUFBSTtRQUMzQjtZQUFDRCxNQUFNO1lBQVVDLE9BQU87UUFBRztRQUMzQjtZQUFDRCxNQUFNO1lBQWNDLE9BQU87UUFBSztRQUNqQztZQUFDRCxNQUFNO1lBQWNDLE9BQU87UUFBSTtRQUNoQztZQUFDRCxNQUFNO1lBQWVDLE9BQU87UUFBSTtRQUNqQztZQUFDRCxNQUFNO1lBQXVCQyxPQUFPO1FBQUk7UUFDekM7WUFBQ0QsTUFBTTtZQUF3QkMsT0FBTztRQUFJO1FBQzFDO1lBQUNELE1BQU07WUFBVUMsT0FBTyxJQUFJQyxPQUFPTixlQUFlO1FBQUk7UUFDdEQ7WUFBQ0ksTUFBTTtZQUF1QkMsT0FBTyxJQUFJQyxPQUFPTjtRQUFhO1FBQzdEO1lBQUNJLE1BQU07WUFBV0MsT0FBTztRQUFVO1FBQ25DO1lBQUNELE1BQU07WUFBVUMsT0FBTztRQUFJO1FBQzVCO1lBQUNELE1BQU07WUFBUUMsT0FBTztRQUFLO0tBQzlCO0lBQ0QsT0FBT0YsVUFBVUosUUFBUSxDQUFDRTtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvc3R5bGVzL3BhcnNlci90b2tlbmlzZXIuanM/NDNlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbG9wID0gcmVxdWlyZShcImxvcFwiKTtcbnZhciBSZWdleFRva2VuaXNlciA9IGxvcC5SZWdleFRva2VuaXNlcjtcblxuZXhwb3J0cy50b2tlbmlzZSA9IHRva2VuaXNlO1xuXG52YXIgc3RyaW5nUHJlZml4ID0gXCInKCg/OlxcXFxcXFxcLnxbXiddKSopXCI7XG5cbmZ1bmN0aW9uIHRva2VuaXNlKHN0cmluZykge1xuICAgIHZhciBpZGVudGlmaWVyQ2hhcmFjdGVyID0gXCIoPzpbYS16QS1aXFxcXC1fXXxcXFxcXFxcXC4pXCI7XG4gICAgdmFyIHRva2VuaXNlciA9IG5ldyBSZWdleFRva2VuaXNlcihbXG4gICAgICAgIHtuYW1lOiBcImlkZW50aWZpZXJcIiwgcmVnZXg6IG5ldyBSZWdFeHAoXCIoXCIgKyBpZGVudGlmaWVyQ2hhcmFjdGVyICsgXCIoPzpcIiArIGlkZW50aWZpZXJDaGFyYWN0ZXIgKyBcInxbMC05XSkqKVwiKX0sXG4gICAgICAgIHtuYW1lOiBcImRvdFwiLCByZWdleDogL1xcLi99LFxuICAgICAgICB7bmFtZTogXCJjb2xvblwiLCByZWdleDogLzovfSxcbiAgICAgICAge25hbWU6IFwiZ3RcIiwgcmVnZXg6IC8+L30sXG4gICAgICAgIHtuYW1lOiBcIndoaXRlc3BhY2VcIiwgcmVnZXg6IC9cXHMrL30sXG4gICAgICAgIHtuYW1lOiBcImFycm93XCIsIHJlZ2V4OiAvPT4vfSxcbiAgICAgICAge25hbWU6IFwiZXF1YWxzXCIsIHJlZ2V4OiAvPS99LFxuICAgICAgICB7bmFtZTogXCJzdGFydHNXaXRoXCIsIHJlZ2V4OiAvXFxePS99LFxuICAgICAgICB7bmFtZTogXCJvcGVuLXBhcmVuXCIsIHJlZ2V4OiAvXFwoL30sXG4gICAgICAgIHtuYW1lOiBcImNsb3NlLXBhcmVuXCIsIHJlZ2V4OiAvXFwpL30sXG4gICAgICAgIHtuYW1lOiBcIm9wZW4tc3F1YXJlLWJyYWNrZXRcIiwgcmVnZXg6IC9cXFsvfSxcbiAgICAgICAge25hbWU6IFwiY2xvc2Utc3F1YXJlLWJyYWNrZXRcIiwgcmVnZXg6IC9cXF0vfSxcbiAgICAgICAge25hbWU6IFwic3RyaW5nXCIsIHJlZ2V4OiBuZXcgUmVnRXhwKHN0cmluZ1ByZWZpeCArIFwiJ1wiKX0sXG4gICAgICAgIHtuYW1lOiBcInVudGVybWluYXRlZC1zdHJpbmdcIiwgcmVnZXg6IG5ldyBSZWdFeHAoc3RyaW5nUHJlZml4KX0sXG4gICAgICAgIHtuYW1lOiBcImludGVnZXJcIiwgcmVnZXg6IC8oWzAtOV0rKS99LFxuICAgICAgICB7bmFtZTogXCJjaG9pY2VcIiwgcmVnZXg6IC9cXHwvfSxcbiAgICAgICAge25hbWU6IFwiYmFuZ1wiLCByZWdleDogLyghKS99XG4gICAgXSk7XG4gICAgcmV0dXJuIHRva2VuaXNlci50b2tlbmlzZShzdHJpbmcpO1xufVxuIl0sIm5hbWVzIjpbImxvcCIsInJlcXVpcmUiLCJSZWdleFRva2VuaXNlciIsImV4cG9ydHMiLCJ0b2tlbmlzZSIsInN0cmluZ1ByZWZpeCIsInN0cmluZyIsImlkZW50aWZpZXJDaGFyYWN0ZXIiLCJ0b2tlbmlzZXIiLCJuYW1lIiwicmVnZXgiLCJSZWdFeHAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/styles/parser/tokeniser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/transforms.js":
/*!*************************************************!*\
  !*** ../node_modules/mammoth/lib/transforms.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nexports.paragraph = paragraph;\nexports.run = run;\nexports._elements = elements;\nexports.getDescendantsOfType = getDescendantsOfType;\nexports.getDescendants = getDescendants;\nfunction paragraph(transform) {\n    return elementsOfType(\"paragraph\", transform);\n}\nfunction run(transform) {\n    return elementsOfType(\"run\", transform);\n}\nfunction elementsOfType(elementType, transform) {\n    return elements(function(element) {\n        if (element.type === elementType) {\n            return transform(element);\n        } else {\n            return element;\n        }\n    });\n}\nfunction elements(transform) {\n    return function transformElement(element) {\n        if (element.children) {\n            var children = _.map(element.children, transformElement);\n            element = _.extend(element, {\n                children: children\n            });\n        }\n        return transform(element);\n    };\n}\nfunction getDescendantsOfType(element, type) {\n    return getDescendants(element).filter(function(descendant) {\n        return descendant.type === type;\n    });\n}\nfunction getDescendants(element) {\n    var descendants = [];\n    visitDescendants(element, function(descendant) {\n        descendants.push(descendant);\n    });\n    return descendants;\n}\nfunction visitDescendants(element, visit) {\n    if (element.children) {\n        element.children.forEach(function(child) {\n            visitDescendants(child, visit);\n            visit(child);\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3RyYW5zZm9ybXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSUMsbUJBQU9BLENBQUMseUVBQVk7QUFFNUJDLGlCQUFpQixHQUFHQztBQUNwQkQsV0FBVyxHQUFHRTtBQUNkRixpQkFBaUIsR0FBR0k7QUFDcEJKLDRCQUE0QixHQUFHSztBQUMvQkwsc0JBQXNCLEdBQUdNO0FBRXpCLFNBQVNMLFVBQVVNLFNBQVM7SUFDeEIsT0FBT0MsZUFBZSxhQUFhRDtBQUN2QztBQUVBLFNBQVNMLElBQUlLLFNBQVM7SUFDbEIsT0FBT0MsZUFBZSxPQUFPRDtBQUNqQztBQUVBLFNBQVNDLGVBQWVDLFdBQVcsRUFBRUYsU0FBUztJQUMxQyxPQUFPSCxTQUFTLFNBQVNNLE9BQU87UUFDNUIsSUFBSUEsUUFBUUMsSUFBSSxLQUFLRixhQUFhO1lBQzlCLE9BQU9GLFVBQVVHO1FBQ3JCLE9BQU87WUFDSCxPQUFPQTtRQUNYO0lBQ0o7QUFDSjtBQUVBLFNBQVNOLFNBQVNHLFNBQVM7SUFDdkIsT0FBTyxTQUFTSyxpQkFBaUJGLE9BQU87UUFDcEMsSUFBSUEsUUFBUUcsUUFBUSxFQUFFO1lBQ2xCLElBQUlBLFdBQVdmLEVBQUVnQixHQUFHLENBQUNKLFFBQVFHLFFBQVEsRUFBRUQ7WUFDdkNGLFVBQVVaLEVBQUVpQixNQUFNLENBQUNMLFNBQVM7Z0JBQUNHLFVBQVVBO1lBQVE7UUFDbkQ7UUFDQSxPQUFPTixVQUFVRztJQUNyQjtBQUNKO0FBR0EsU0FBU0wscUJBQXFCSyxPQUFPLEVBQUVDLElBQUk7SUFDdkMsT0FBT0wsZUFBZUksU0FBU00sTUFBTSxDQUFDLFNBQVNDLFVBQVU7UUFDckQsT0FBT0EsV0FBV04sSUFBSSxLQUFLQTtJQUMvQjtBQUNKO0FBRUEsU0FBU0wsZUFBZUksT0FBTztJQUMzQixJQUFJUSxjQUFjLEVBQUU7SUFFcEJDLGlCQUFpQlQsU0FBUyxTQUFTTyxVQUFVO1FBQ3pDQyxZQUFZRSxJQUFJLENBQUNIO0lBQ3JCO0lBRUEsT0FBT0M7QUFDWDtBQUVBLFNBQVNDLGlCQUFpQlQsT0FBTyxFQUFFVyxLQUFLO0lBQ3BDLElBQUlYLFFBQVFHLFFBQVEsRUFBRTtRQUNsQkgsUUFBUUcsUUFBUSxDQUFDUyxPQUFPLENBQUMsU0FBU0MsS0FBSztZQUNuQ0osaUJBQWlCSSxPQUFPRjtZQUN4QkEsTUFBTUU7UUFDVjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3RyYW5zZm9ybXMuanM/OWQyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgXyA9IHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpO1xuXG5leHBvcnRzLnBhcmFncmFwaCA9IHBhcmFncmFwaDtcbmV4cG9ydHMucnVuID0gcnVuO1xuZXhwb3J0cy5fZWxlbWVudHMgPSBlbGVtZW50cztcbmV4cG9ydHMuZ2V0RGVzY2VuZGFudHNPZlR5cGUgPSBnZXREZXNjZW5kYW50c09mVHlwZTtcbmV4cG9ydHMuZ2V0RGVzY2VuZGFudHMgPSBnZXREZXNjZW5kYW50cztcblxuZnVuY3Rpb24gcGFyYWdyYXBoKHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBlbGVtZW50c09mVHlwZShcInBhcmFncmFwaFwiLCB0cmFuc2Zvcm0pO1xufVxuXG5mdW5jdGlvbiBydW4odHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRzT2ZUeXBlKFwicnVuXCIsIHRyYW5zZm9ybSk7XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRzT2ZUeXBlKGVsZW1lbnRUeXBlLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZWxlbWVudHMoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudC50eXBlID09PSBlbGVtZW50VHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybShlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRzKHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiB0cmFuc2Zvcm1FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IF8ubWFwKGVsZW1lbnQuY2hpbGRyZW4sIHRyYW5zZm9ybUVsZW1lbnQpO1xuICAgICAgICAgICAgZWxlbWVudCA9IF8uZXh0ZW5kKGVsZW1lbnQsIHtjaGlsZHJlbjogY2hpbGRyZW59KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtKGVsZW1lbnQpO1xuICAgIH07XG59XG5cblxuZnVuY3Rpb24gZ2V0RGVzY2VuZGFudHNPZlR5cGUoZWxlbWVudCwgdHlwZSkge1xuICAgIHJldHVybiBnZXREZXNjZW5kYW50cyhlbGVtZW50KS5maWx0ZXIoZnVuY3Rpb24oZGVzY2VuZGFudCkge1xuICAgICAgICByZXR1cm4gZGVzY2VuZGFudC50eXBlID09PSB0eXBlO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXREZXNjZW5kYW50cyhlbGVtZW50KSB7XG4gICAgdmFyIGRlc2NlbmRhbnRzID0gW107XG5cbiAgICB2aXNpdERlc2NlbmRhbnRzKGVsZW1lbnQsIGZ1bmN0aW9uKGRlc2NlbmRhbnQpIHtcbiAgICAgICAgZGVzY2VuZGFudHMucHVzaChkZXNjZW5kYW50KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkZXNjZW5kYW50cztcbn1cblxuZnVuY3Rpb24gdmlzaXREZXNjZW5kYW50cyhlbGVtZW50LCB2aXNpdCkge1xuICAgIGlmIChlbGVtZW50LmNoaWxkcmVuKSB7XG4gICAgICAgIGVsZW1lbnQuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgdmlzaXREZXNjZW5kYW50cyhjaGlsZCwgdmlzaXQpO1xuICAgICAgICAgICAgdmlzaXQoY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJleHBvcnRzIiwicGFyYWdyYXBoIiwicnVuIiwiX2VsZW1lbnRzIiwiZWxlbWVudHMiLCJnZXREZXNjZW5kYW50c09mVHlwZSIsImdldERlc2NlbmRhbnRzIiwidHJhbnNmb3JtIiwiZWxlbWVudHNPZlR5cGUiLCJlbGVtZW50VHlwZSIsImVsZW1lbnQiLCJ0eXBlIiwidHJhbnNmb3JtRWxlbWVudCIsImNoaWxkcmVuIiwibWFwIiwiZXh0ZW5kIiwiZmlsdGVyIiwiZGVzY2VuZGFudCIsImRlc2NlbmRhbnRzIiwidmlzaXREZXNjZW5kYW50cyIsInB1c2giLCJ2aXNpdCIsImZvckVhY2giLCJjaGlsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/transforms.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/underline.js":
/*!************************************************!*\
  !*** ../node_modules/mammoth/lib/underline.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var htmlPaths = __webpack_require__(/*! ./styles/html-paths */ \"(ssr)/../node_modules/mammoth/lib/styles/html-paths.js\");\nvar Html = __webpack_require__(/*! ./html */ \"(ssr)/../node_modules/mammoth/lib/html/index.js\");\nexports.element = element;\nfunction element(name) {\n    return function(html) {\n        return Html.elementWithTag(htmlPaths.element(name), [\n            html\n        ]);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3VuZGVybGluZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFDN0MsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUMsK0RBQVE7QUFHM0JFLGVBQWUsR0FBR0M7QUFFbEIsU0FBU0EsUUFBUUMsSUFBSTtJQUNqQixPQUFPLFNBQVNDLElBQUk7UUFDaEIsT0FBT0osS0FBS0ssY0FBYyxDQUFDUCxVQUFVSSxPQUFPLENBQUNDLE9BQU87WUFBQ0M7U0FBSztJQUM5RDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tYW1tb3RoL2xpYi91bmRlcmxpbmUuanM/ODc3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaHRtbFBhdGhzID0gcmVxdWlyZShcIi4vc3R5bGVzL2h0bWwtcGF0aHNcIik7XG52YXIgSHRtbCA9IHJlcXVpcmUoXCIuL2h0bWxcIik7XG5cblxuZXhwb3J0cy5lbGVtZW50ID0gZWxlbWVudDtcblxuZnVuY3Rpb24gZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgICAgcmV0dXJuIEh0bWwuZWxlbWVudFdpdGhUYWcoaHRtbFBhdGhzLmVsZW1lbnQobmFtZSksIFtodG1sXSk7XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJodG1sUGF0aHMiLCJyZXF1aXJlIiwiSHRtbCIsImV4cG9ydHMiLCJlbGVtZW50IiwibmFtZSIsImh0bWwiLCJlbGVtZW50V2l0aFRhZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/underline.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/unzip.js":
/*!********************************************!*\
  !*** ../node_modules/mammoth/lib/unzip.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar promises = __webpack_require__(/*! ./promises */ \"(ssr)/../node_modules/mammoth/lib/promises.js\");\nvar zipfile = __webpack_require__(/*! ./zipfile */ \"(ssr)/../node_modules/mammoth/lib/zipfile.js\");\nexports.openZip = openZip;\nvar readFile = promises.promisify(fs.readFile);\nfunction openZip(options) {\n    if (options.path) {\n        return readFile(options.path).then(zipfile.openArrayBuffer);\n    } else if (options.buffer) {\n        return promises.resolve(zipfile.openArrayBuffer(options.buffer));\n    } else if (options.file) {\n        return promises.resolve(options.file);\n    } else {\n        return promises.reject(new Error(\"Could not find file in options\"));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3VuemlwLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQUtDLG1CQUFPQSxDQUFDLGNBQUk7QUFFckIsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUMsaUVBQVk7QUFDbkMsSUFBSUUsVUFBVUYsbUJBQU9BLENBQUMsK0RBQVc7QUFFakNHLGVBQWUsR0FBR0M7QUFFbEIsSUFBSUMsV0FBV0osU0FBU0ssU0FBUyxDQUFDUCxHQUFHTSxRQUFRO0FBRTdDLFNBQVNELFFBQVFHLE9BQU87SUFDcEIsSUFBSUEsUUFBUUMsSUFBSSxFQUFFO1FBQ2QsT0FBT0gsU0FBU0UsUUFBUUMsSUFBSSxFQUFFQyxJQUFJLENBQUNQLFFBQVFRLGVBQWU7SUFDOUQsT0FBTyxJQUFJSCxRQUFRSSxNQUFNLEVBQUU7UUFDdkIsT0FBT1YsU0FBU1csT0FBTyxDQUFDVixRQUFRUSxlQUFlLENBQUNILFFBQVFJLE1BQU07SUFDbEUsT0FBTyxJQUFJSixRQUFRTSxJQUFJLEVBQUU7UUFDckIsT0FBT1osU0FBU1csT0FBTyxDQUFDTCxRQUFRTSxJQUFJO0lBQ3hDLE9BQU87UUFDSCxPQUFPWixTQUFTYSxNQUFNLENBQUMsSUFBSUMsTUFBTTtJQUNyQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tYW1tb3RoL2xpYi91bnppcC5qcz81YTA0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcblxudmFyIHByb21pc2VzID0gcmVxdWlyZShcIi4vcHJvbWlzZXNcIik7XG52YXIgemlwZmlsZSA9IHJlcXVpcmUoXCIuL3ppcGZpbGVcIik7XG5cbmV4cG9ydHMub3BlblppcCA9IG9wZW5aaXA7XG5cbnZhciByZWFkRmlsZSA9IHByb21pc2VzLnByb21pc2lmeShmcy5yZWFkRmlsZSk7XG5cbmZ1bmN0aW9uIG9wZW5aaXAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRGaWxlKG9wdGlvbnMucGF0aCkudGhlbih6aXBmaWxlLm9wZW5BcnJheUJ1ZmZlcik7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gcHJvbWlzZXMucmVzb2x2ZSh6aXBmaWxlLm9wZW5BcnJheUJ1ZmZlcihvcHRpb25zLmJ1ZmZlcikpO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5maWxlKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlcy5yZXNvbHZlKG9wdGlvbnMuZmlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VzLnJlamVjdChuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBmaWxlIGluIG9wdGlvbnNcIikpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwcm9taXNlcyIsInppcGZpbGUiLCJleHBvcnRzIiwib3BlblppcCIsInJlYWRGaWxlIiwicHJvbWlzaWZ5Iiwib3B0aW9ucyIsInBhdGgiLCJ0aGVuIiwib3BlbkFycmF5QnVmZmVyIiwiYnVmZmVyIiwicmVzb2x2ZSIsImZpbGUiLCJyZWplY3QiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/unzip.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/writers/html-writer.js":
/*!**********************************************************!*\
  !*** ../node_modules/mammoth/lib/writers/html-writer.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nexports.writer = writer;\nfunction writer(options) {\n    options = options || {};\n    if (options.prettyPrint) {\n        return prettyWriter();\n    } else {\n        return simpleWriter();\n    }\n}\nvar indentedElements = {\n    div: true,\n    p: true,\n    ul: true,\n    li: true\n};\nfunction prettyWriter() {\n    var indentationLevel = 0;\n    var indentation = \"  \";\n    var stack = [];\n    var start = true;\n    var inText = false;\n    var writer = simpleWriter();\n    function open(tagName, attributes) {\n        if (indentedElements[tagName]) {\n            indent();\n        }\n        stack.push(tagName);\n        writer.open(tagName, attributes);\n        if (indentedElements[tagName]) {\n            indentationLevel++;\n        }\n        start = false;\n    }\n    function close(tagName) {\n        if (indentedElements[tagName]) {\n            indentationLevel--;\n            indent();\n        }\n        stack.pop();\n        writer.close(tagName);\n    }\n    function text(value) {\n        startText();\n        var text = isInPre() ? value : value.replace(\"\\n\", \"\\n\" + indentation);\n        writer.text(text);\n    }\n    function selfClosing(tagName, attributes) {\n        indent();\n        writer.selfClosing(tagName, attributes);\n    }\n    function insideIndentedElement() {\n        return stack.length === 0 || indentedElements[stack[stack.length - 1]];\n    }\n    function startText() {\n        if (!inText) {\n            indent();\n            inText = true;\n        }\n    }\n    function indent() {\n        inText = false;\n        if (!start && insideIndentedElement() && !isInPre()) {\n            writer._append(\"\\n\");\n            for(var i = 0; i < indentationLevel; i++){\n                writer._append(indentation);\n            }\n        }\n    }\n    function isInPre() {\n        return _.some(stack, function(tagName) {\n            return tagName === \"pre\";\n        });\n    }\n    return {\n        asString: writer.asString,\n        open: open,\n        close: close,\n        text: text,\n        selfClosing: selfClosing\n    };\n}\nfunction simpleWriter() {\n    var fragments = [];\n    function open(tagName, attributes) {\n        var attributeString = generateAttributeString(attributes);\n        fragments.push(\"<\" + tagName + attributeString + \">\");\n    }\n    function close(tagName) {\n        fragments.push(\"</\" + tagName + \">\");\n    }\n    function selfClosing(tagName, attributes) {\n        var attributeString = generateAttributeString(attributes);\n        fragments.push(\"<\" + tagName + attributeString + \" />\");\n    }\n    function generateAttributeString(attributes) {\n        return _.map(attributes, function(value, key) {\n            return \" \" + key + '=\"' + escapeHtmlAttribute(value) + '\"';\n        }).join(\"\");\n    }\n    function text(value) {\n        fragments.push(escapeHtmlText(value));\n    }\n    function append(html) {\n        fragments.push(html);\n    }\n    function asString() {\n        return fragments.join(\"\");\n    }\n    return {\n        asString: asString,\n        open: open,\n        close: close,\n        text: text,\n        selfClosing: selfClosing,\n        _append: append\n    };\n}\nfunction escapeHtmlText(value) {\n    return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\nfunction escapeHtmlAttribute(value) {\n    return value.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/writers/html-writer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/writers/index.js":
/*!****************************************************!*\
  !*** ../node_modules/mammoth/lib/writers/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var htmlWriter = __webpack_require__(/*! ./html-writer */ \"(ssr)/../node_modules/mammoth/lib/writers/html-writer.js\");\nvar markdownWriter = __webpack_require__(/*! ./markdown-writer */ \"(ssr)/../node_modules/mammoth/lib/writers/markdown-writer.js\");\nexports.writer = writer;\nfunction writer(options) {\n    options = options || {};\n    if (options.outputFormat === \"markdown\") {\n        return markdownWriter.writer();\n    } else {\n        return htmlWriter.writer(options);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3dyaXRlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUMsK0VBQWU7QUFDeEMsSUFBSUMsaUJBQWlCRCxtQkFBT0EsQ0FBQyx1RkFBbUI7QUFFaERFLGNBQWMsR0FBR0M7QUFHakIsU0FBU0EsT0FBT0MsT0FBTztJQUNuQkEsVUFBVUEsV0FBVyxDQUFDO0lBQ3RCLElBQUlBLFFBQVFDLFlBQVksS0FBSyxZQUFZO1FBQ3JDLE9BQU9KLGVBQWVFLE1BQU07SUFDaEMsT0FBTztRQUNILE9BQU9KLFdBQVdJLE1BQU0sQ0FBQ0M7SUFDN0I7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIvd3JpdGVycy9pbmRleC5qcz81Y2YwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBodG1sV3JpdGVyID0gcmVxdWlyZShcIi4vaHRtbC13cml0ZXJcIik7XG52YXIgbWFya2Rvd25Xcml0ZXIgPSByZXF1aXJlKFwiLi9tYXJrZG93bi13cml0ZXJcIik7XG5cbmV4cG9ydHMud3JpdGVyID0gd3JpdGVyO1xuXG5cbmZ1bmN0aW9uIHdyaXRlcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKG9wdGlvbnMub3V0cHV0Rm9ybWF0ID09PSBcIm1hcmtkb3duXCIpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtkb3duV3JpdGVyLndyaXRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBodG1sV3JpdGVyLndyaXRlcihvcHRpb25zKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiaHRtbFdyaXRlciIsInJlcXVpcmUiLCJtYXJrZG93bldyaXRlciIsImV4cG9ydHMiLCJ3cml0ZXIiLCJvcHRpb25zIiwib3V0cHV0Rm9ybWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/writers/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/writers/markdown-writer.js":
/*!**************************************************************!*\
  !*** ../node_modules/mammoth/lib/writers/markdown-writer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nfunction symmetricMarkdownElement(end) {\n    return markdownElement(end, end);\n}\nfunction markdownElement(start, end) {\n    return function() {\n        return {\n            start: start,\n            end: end\n        };\n    };\n}\nfunction markdownLink(attributes) {\n    var href = attributes.href || \"\";\n    if (href) {\n        return {\n            start: \"[\",\n            end: \"](\" + href + \")\",\n            anchorPosition: \"before\"\n        };\n    } else {\n        return {};\n    }\n}\nfunction markdownImage(attributes) {\n    var src = attributes.src || \"\";\n    var altText = attributes.alt || \"\";\n    if (src || altText) {\n        return {\n            start: \"![\" + altText + \"](\" + src + \")\"\n        };\n    } else {\n        return {};\n    }\n}\nfunction markdownList(options) {\n    return function(attributes, list) {\n        return {\n            start: list ? \"\\n\" : \"\",\n            end: list ? \"\" : \"\\n\",\n            list: {\n                isOrdered: options.isOrdered,\n                indent: list ? list.indent + 1 : 0,\n                count: 0\n            }\n        };\n    };\n}\nfunction markdownListItem(attributes, list, listItem) {\n    list = list || {\n        indent: 0,\n        isOrdered: false,\n        count: 0\n    };\n    list.count++;\n    listItem.hasClosed = false;\n    var bullet = list.isOrdered ? list.count + \".\" : \"-\";\n    var start = repeatString(\"\t\", list.indent) + bullet + \" \";\n    return {\n        start: start,\n        end: function() {\n            if (!listItem.hasClosed) {\n                listItem.hasClosed = true;\n                return \"\\n\";\n            }\n        }\n    };\n}\nvar htmlToMarkdown = {\n    \"p\": markdownElement(\"\", \"\\n\\n\"),\n    \"br\": markdownElement(\"\", \"  \\n\"),\n    \"ul\": markdownList({\n        isOrdered: false\n    }),\n    \"ol\": markdownList({\n        isOrdered: true\n    }),\n    \"li\": markdownListItem,\n    \"strong\": symmetricMarkdownElement(\"__\"),\n    \"em\": symmetricMarkdownElement(\"*\"),\n    \"a\": markdownLink,\n    \"img\": markdownImage\n};\n(function() {\n    for(var i = 1; i <= 6; i++){\n        htmlToMarkdown[\"h\" + i] = markdownElement(repeatString(\"#\", i) + \" \", \"\\n\\n\");\n    }\n})();\nfunction repeatString(value, count) {\n    return new Array(count + 1).join(value);\n}\nfunction markdownWriter() {\n    var fragments = [];\n    var elementStack = [];\n    var list = null;\n    var listItem = {};\n    function open(tagName, attributes) {\n        attributes = attributes || {};\n        var createElement = htmlToMarkdown[tagName] || function() {\n            return {};\n        };\n        var element = createElement(attributes, list, listItem);\n        elementStack.push({\n            end: element.end,\n            list: list\n        });\n        if (element.list) {\n            list = element.list;\n        }\n        var anchorBeforeStart = element.anchorPosition === \"before\";\n        if (anchorBeforeStart) {\n            writeAnchor(attributes);\n        }\n        fragments.push(element.start || \"\");\n        if (!anchorBeforeStart) {\n            writeAnchor(attributes);\n        }\n    }\n    function writeAnchor(attributes) {\n        if (attributes.id) {\n            fragments.push('<a id=\"' + attributes.id + '\"></a>');\n        }\n    }\n    function close(tagName) {\n        var element = elementStack.pop();\n        list = element.list;\n        var end = _.isFunction(element.end) ? element.end() : element.end;\n        fragments.push(end || \"\");\n    }\n    function selfClosing(tagName, attributes) {\n        open(tagName, attributes);\n        close(tagName);\n    }\n    function text(value) {\n        fragments.push(escapeMarkdown(value));\n    }\n    function asString() {\n        return fragments.join(\"\");\n    }\n    return {\n        asString: asString,\n        open: open,\n        close: close,\n        text: text,\n        selfClosing: selfClosing\n    };\n}\nexports.writer = markdownWriter;\nfunction escapeMarkdown(value) {\n    return value.replace(/\\\\/g, \"\\\\\\\\\").replace(/([\\`\\*_\\{\\}\\[\\]\\(\\)\\#\\+\\-\\.\\!])/g, \"\\\\$1\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/writers/markdown-writer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/xml/index.js":
/*!************************************************!*\
  !*** ../node_modules/mammoth/lib/xml/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var nodes = __webpack_require__(/*! ./nodes */ \"(ssr)/../node_modules/mammoth/lib/xml/nodes.js\");\nexports.Element = nodes.Element;\nexports.element = nodes.element;\nexports.emptyElement = nodes.emptyElement;\nexports.text = nodes.text;\nexports.readString = __webpack_require__(/*! ./reader */ \"(ssr)/../node_modules/mammoth/lib/xml/reader.js\").readString;\nexports.writeString = __webpack_require__(/*! ./writer */ \"(ssr)/../node_modules/mammoth/lib/xml/writer.js\").writeString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3htbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQywrREFBUztBQUU3QkMsZUFBZSxHQUFHRixNQUFNRyxPQUFPO0FBQy9CRCxlQUFlLEdBQUdGLE1BQU1JLE9BQU87QUFDL0JGLG9CQUFvQixHQUFHRixNQUFNSyxZQUFZO0FBQ3pDSCxZQUFZLEdBQUdGLE1BQU1NLElBQUk7QUFDekJKLHNIQUFtRDtBQUNuREEsd0hBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tYW1tb3RoL2xpYi94bWwvaW5kZXguanM/NGU1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9kZXMgPSByZXF1aXJlKFwiLi9ub2Rlc1wiKTtcblxuZXhwb3J0cy5FbGVtZW50ID0gbm9kZXMuRWxlbWVudDtcbmV4cG9ydHMuZWxlbWVudCA9IG5vZGVzLmVsZW1lbnQ7XG5leHBvcnRzLmVtcHR5RWxlbWVudCA9IG5vZGVzLmVtcHR5RWxlbWVudDtcbmV4cG9ydHMudGV4dCA9IG5vZGVzLnRleHQ7XG5leHBvcnRzLnJlYWRTdHJpbmcgPSByZXF1aXJlKFwiLi9yZWFkZXJcIikucmVhZFN0cmluZztcbmV4cG9ydHMud3JpdGVTdHJpbmcgPSByZXF1aXJlKFwiLi93cml0ZXJcIikud3JpdGVTdHJpbmc7XG4iXSwibmFtZXMiOlsibm9kZXMiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIkVsZW1lbnQiLCJlbGVtZW50IiwiZW1wdHlFbGVtZW50IiwidGV4dCIsInJlYWRTdHJpbmciLCJ3cml0ZVN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/xml/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/xml/nodes.js":
/*!************************************************!*\
  !*** ../node_modules/mammoth/lib/xml/nodes.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nexports.Element = Element;\nexports.element = function(name, attributes, children) {\n    return new Element(name, attributes, children);\n};\nexports.text = function(value) {\n    return {\n        type: \"text\",\n        value: value\n    };\n};\nvar emptyElement = exports.emptyElement = {\n    first: function() {\n        return null;\n    },\n    firstOrEmpty: function() {\n        return emptyElement;\n    },\n    attributes: {},\n    children: []\n};\nfunction Element(name, attributes, children) {\n    this.type = \"element\";\n    this.name = name;\n    this.attributes = attributes || {};\n    this.children = children || [];\n}\nElement.prototype.first = function(name) {\n    return _.find(this.children, function(child) {\n        return child.name === name;\n    });\n};\nElement.prototype.firstOrEmpty = function(name) {\n    return this.first(name) || emptyElement;\n};\nElement.prototype.getElementsByTagName = function(name) {\n    var elements = _.filter(this.children, function(child) {\n        return child.name === name;\n    });\n    return toElementList(elements);\n};\nElement.prototype.text = function() {\n    if (this.children.length === 0) {\n        return \"\";\n    } else if (this.children.length !== 1 || this.children[0].type !== \"text\") {\n        throw new Error(\"Not implemented\");\n    }\n    return this.children[0].value;\n};\nvar elementListPrototype = {\n    getElementsByTagName: function(name) {\n        return toElementList(_.flatten(this.map(function(element) {\n            return element.getElementsByTagName(name);\n        }, true)));\n    }\n};\nfunction toElementList(array) {\n    return _.extend(array, elementListPrototype);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3htbC9ub2Rlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxJQUFJQyxtQkFBT0EsQ0FBQyx5RUFBWTtBQUc1QkMsZUFBZSxHQUFHQztBQUNsQkQsZUFBZSxHQUFHLFNBQVNHLElBQUksRUFBRUMsVUFBVSxFQUFFQyxRQUFRO0lBQ2pELE9BQU8sSUFBSUosUUFBUUUsTUFBTUMsWUFBWUM7QUFDekM7QUFDQUwsWUFBWSxHQUFHLFNBQVNPLEtBQUs7SUFDekIsT0FBTztRQUNIQyxNQUFNO1FBQ05ELE9BQU9BO0lBQ1g7QUFDSjtBQUdBLElBQUlFLGVBQWVULG9CQUFvQixHQUFHO0lBQ3RDVSxPQUFPO1FBQ0gsT0FBTztJQUNYO0lBQ0FDLGNBQWM7UUFDVixPQUFPRjtJQUNYO0lBQ0FMLFlBQVksQ0FBQztJQUNiQyxVQUFVLEVBQUU7QUFDaEI7QUFFQSxTQUFTSixRQUFRRSxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsUUFBUTtJQUN2QyxJQUFJLENBQUNHLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ0wsSUFBSSxHQUFHQTtJQUNaLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxjQUFjLENBQUM7SUFDakMsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFlBQVksRUFBRTtBQUNsQztBQUVBSixRQUFRVyxTQUFTLENBQUNGLEtBQUssR0FBRyxTQUFTUCxJQUFJO0lBQ25DLE9BQU9MLEVBQUVlLElBQUksQ0FBQyxJQUFJLENBQUNSLFFBQVEsRUFBRSxTQUFTUyxLQUFLO1FBQ3ZDLE9BQU9BLE1BQU1YLElBQUksS0FBS0E7SUFDMUI7QUFDSjtBQUVBRixRQUFRVyxTQUFTLENBQUNELFlBQVksR0FBRyxTQUFTUixJQUFJO0lBQzFDLE9BQU8sSUFBSSxDQUFDTyxLQUFLLENBQUNQLFNBQVNNO0FBQy9CO0FBRUFSLFFBQVFXLFNBQVMsQ0FBQ0csb0JBQW9CLEdBQUcsU0FBU1osSUFBSTtJQUNsRCxJQUFJYSxXQUFXbEIsRUFBRW1CLE1BQU0sQ0FBQyxJQUFJLENBQUNaLFFBQVEsRUFBRSxTQUFTUyxLQUFLO1FBQ2pELE9BQU9BLE1BQU1YLElBQUksS0FBS0E7SUFDMUI7SUFDQSxPQUFPZSxjQUFjRjtBQUN6QjtBQUVBZixRQUFRVyxTQUFTLENBQUNOLElBQUksR0FBRztJQUNyQixJQUFJLElBQUksQ0FBQ0QsUUFBUSxDQUFDYyxNQUFNLEtBQUssR0FBRztRQUM1QixPQUFPO0lBQ1gsT0FBTyxJQUFJLElBQUksQ0FBQ2QsUUFBUSxDQUFDYyxNQUFNLEtBQUssS0FBSyxJQUFJLENBQUNkLFFBQVEsQ0FBQyxFQUFFLENBQUNHLElBQUksS0FBSyxRQUFRO1FBQ3ZFLE1BQU0sSUFBSVksTUFBTTtJQUNwQjtJQUNBLE9BQU8sSUFBSSxDQUFDZixRQUFRLENBQUMsRUFBRSxDQUFDRSxLQUFLO0FBQ2pDO0FBRUEsSUFBSWMsdUJBQXVCO0lBQ3ZCTixzQkFBc0IsU0FBU1osSUFBSTtRQUMvQixPQUFPZSxjQUFjcEIsRUFBRXdCLE9BQU8sQ0FBQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxTQUFTckIsT0FBTztZQUNwRCxPQUFPQSxRQUFRYSxvQkFBb0IsQ0FBQ1o7UUFDeEMsR0FBRztJQUNQO0FBQ0o7QUFFQSxTQUFTZSxjQUFjTSxLQUFLO0lBQ3hCLE9BQU8xQixFQUFFMkIsTUFBTSxDQUFDRCxPQUFPSDtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIveG1sL25vZGVzLmpzPzcyMGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcblxuXG5leHBvcnRzLkVsZW1lbnQgPSBFbGVtZW50O1xuZXhwb3J0cy5lbGVtZW50ID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gbmV3IEVsZW1lbnQobmFtZSwgYXR0cmlidXRlcywgY2hpbGRyZW4pO1xufTtcbmV4cG9ydHMudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG59O1xuXG5cbnZhciBlbXB0eUVsZW1lbnQgPSBleHBvcnRzLmVtcHR5RWxlbWVudCA9IHtcbiAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgZmlyc3RPckVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5RWxlbWVudDtcbiAgICB9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBbXVxufTtcblxuZnVuY3Rpb24gRWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzLCBjaGlsZHJlbikge1xuICAgIHRoaXMudHlwZSA9IFwiZWxlbWVudFwiO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcyB8fCB7fTtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW4gfHwgW107XG59XG5cbkVsZW1lbnQucHJvdG90eXBlLmZpcnN0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBfLmZpbmQodGhpcy5jaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLm5hbWUgPT09IG5hbWU7XG4gICAgfSk7XG59O1xuXG5FbGVtZW50LnByb3RvdHlwZS5maXJzdE9yRW1wdHkgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlyc3QobmFtZSkgfHwgZW1wdHlFbGVtZW50O1xufTtcblxuRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gXy5maWx0ZXIodGhpcy5jaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLm5hbWUgPT09IG5hbWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvRWxlbWVudExpc3QoZWxlbWVudHMpO1xufTtcblxuRWxlbWVudC5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoICE9PSAxIHx8IHRoaXMuY2hpbGRyZW5bMF0udHlwZSAhPT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlblswXS52YWx1ZTtcbn07XG5cbnZhciBlbGVtZW50TGlzdFByb3RvdHlwZSA9IHtcbiAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICByZXR1cm4gdG9FbGVtZW50TGlzdChfLmZsYXR0ZW4odGhpcy5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUobmFtZSk7XG4gICAgICAgIH0sIHRydWUpKSk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gdG9FbGVtZW50TGlzdChhcnJheSkge1xuICAgIHJldHVybiBfLmV4dGVuZChhcnJheSwgZWxlbWVudExpc3RQcm90b3R5cGUpO1xufVxuIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiZXhwb3J0cyIsIkVsZW1lbnQiLCJlbGVtZW50IiwibmFtZSIsImF0dHJpYnV0ZXMiLCJjaGlsZHJlbiIsInRleHQiLCJ2YWx1ZSIsInR5cGUiLCJlbXB0eUVsZW1lbnQiLCJmaXJzdCIsImZpcnN0T3JFbXB0eSIsInByb3RvdHlwZSIsImZpbmQiLCJjaGlsZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZWxlbWVudHMiLCJmaWx0ZXIiLCJ0b0VsZW1lbnRMaXN0IiwibGVuZ3RoIiwiRXJyb3IiLCJlbGVtZW50TGlzdFByb3RvdHlwZSIsImZsYXR0ZW4iLCJtYXAiLCJhcnJheSIsImV4dGVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/xml/nodes.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/xml/reader.js":
/*!*************************************************!*\
  !*** ../node_modules/mammoth/lib/xml/reader.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var promises = __webpack_require__(/*! ../promises */ \"(ssr)/../node_modules/mammoth/lib/promises.js\");\nvar _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar xmldom = __webpack_require__(/*! ./xmldom */ \"(ssr)/../node_modules/mammoth/lib/xml/xmldom.js\");\nvar nodes = __webpack_require__(/*! ./nodes */ \"(ssr)/../node_modules/mammoth/lib/xml/nodes.js\");\nvar Element = nodes.Element;\nexports.readString = readString;\nvar Node = xmldom.Node;\nfunction readString(xmlString, namespaceMap) {\n    namespaceMap = namespaceMap || {};\n    try {\n        var document = xmldom.parseFromString(xmlString, \"text/xml\");\n    } catch (error) {\n        return promises.reject(error);\n    }\n    if (document.documentElement.tagName === \"parsererror\") {\n        return promises.resolve(new Error(document.documentElement.textContent));\n    }\n    function convertNode(node) {\n        switch(node.nodeType){\n            case Node.ELEMENT_NODE:\n                return convertElement(node);\n            case Node.TEXT_NODE:\n                return nodes.text(node.nodeValue);\n        }\n    }\n    function convertElement(element) {\n        var convertedName = convertName(element);\n        var convertedChildren = [];\n        _.forEach(element.childNodes, function(childNode) {\n            var convertedNode = convertNode(childNode);\n            if (convertedNode) {\n                convertedChildren.push(convertedNode);\n            }\n        });\n        var convertedAttributes = {};\n        _.forEach(element.attributes, function(attribute) {\n            convertedAttributes[convertName(attribute)] = attribute.value;\n        });\n        return new Element(convertedName, convertedAttributes, convertedChildren);\n    }\n    function convertName(node) {\n        if (node.namespaceURI) {\n            var mappedPrefix = namespaceMap[node.namespaceURI];\n            var prefix;\n            if (mappedPrefix) {\n                prefix = mappedPrefix + \":\";\n            } else {\n                prefix = \"{\" + node.namespaceURI + \"}\";\n            }\n            return prefix + node.localName;\n        } else {\n            return node.localName;\n        }\n    }\n    return promises.resolve(convertNode(document.documentElement));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3htbC9yZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsV0FBV0MsbUJBQU9BLENBQUMsa0VBQWE7QUFDcEMsSUFBSUMsSUFBSUQsbUJBQU9BLENBQUMseUVBQVk7QUFFNUIsSUFBSUUsU0FBU0YsbUJBQU9BLENBQUMsaUVBQVU7QUFDL0IsSUFBSUcsUUFBUUgsbUJBQU9BLENBQUMsK0RBQVM7QUFDN0IsSUFBSUksVUFBVUQsTUFBTUMsT0FBTztBQUUzQkMsa0JBQWtCLEdBQUdDO0FBRXJCLElBQUlDLE9BQU9MLE9BQU9LLElBQUk7QUFFdEIsU0FBU0QsV0FBV0UsU0FBUyxFQUFFQyxZQUFZO0lBQ3ZDQSxlQUFlQSxnQkFBZ0IsQ0FBQztJQUVoQyxJQUFJO1FBQ0EsSUFBSUMsV0FBV1IsT0FBT1MsZUFBZSxDQUFDSCxXQUFXO0lBQ3JELEVBQUUsT0FBT0ksT0FBTztRQUNaLE9BQU9iLFNBQVNjLE1BQU0sQ0FBQ0Q7SUFDM0I7SUFFQSxJQUFJRixTQUFTSSxlQUFlLENBQUNDLE9BQU8sS0FBSyxlQUFlO1FBQ3BELE9BQU9oQixTQUFTaUIsT0FBTyxDQUFDLElBQUlDLE1BQU1QLFNBQVNJLGVBQWUsQ0FBQ0ksV0FBVztJQUMxRTtJQUVBLFNBQVNDLFlBQVlDLElBQUk7UUFDckIsT0FBUUEsS0FBS0MsUUFBUTtZQUNyQixLQUFLZCxLQUFLZSxZQUFZO2dCQUNsQixPQUFPQyxlQUFlSDtZQUMxQixLQUFLYixLQUFLaUIsU0FBUztnQkFDZixPQUFPckIsTUFBTXNCLElBQUksQ0FBQ0wsS0FBS00sU0FBUztRQUNwQztJQUNKO0lBRUEsU0FBU0gsZUFBZUksT0FBTztRQUMzQixJQUFJQyxnQkFBZ0JDLFlBQVlGO1FBRWhDLElBQUlHLG9CQUFvQixFQUFFO1FBQzFCN0IsRUFBRThCLE9BQU8sQ0FBQ0osUUFBUUssVUFBVSxFQUFFLFNBQVNDLFNBQVM7WUFDNUMsSUFBSUMsZ0JBQWdCZixZQUFZYztZQUNoQyxJQUFJQyxlQUFlO2dCQUNmSixrQkFBa0JLLElBQUksQ0FBQ0Q7WUFDM0I7UUFDSjtRQUVBLElBQUlFLHNCQUFzQixDQUFDO1FBQzNCbkMsRUFBRThCLE9BQU8sQ0FBQ0osUUFBUVUsVUFBVSxFQUFFLFNBQVNDLFNBQVM7WUFDNUNGLG1CQUFtQixDQUFDUCxZQUFZUyxXQUFXLEdBQUdBLFVBQVVDLEtBQUs7UUFDakU7UUFFQSxPQUFPLElBQUluQyxRQUFRd0IsZUFBZVEscUJBQXFCTjtJQUMzRDtJQUVBLFNBQVNELFlBQVlULElBQUk7UUFDckIsSUFBSUEsS0FBS29CLFlBQVksRUFBRTtZQUNuQixJQUFJQyxlQUFlaEMsWUFBWSxDQUFDVyxLQUFLb0IsWUFBWSxDQUFDO1lBQ2xELElBQUlFO1lBQ0osSUFBSUQsY0FBYztnQkFDZEMsU0FBU0QsZUFBZTtZQUM1QixPQUFPO2dCQUNIQyxTQUFTLE1BQU10QixLQUFLb0IsWUFBWSxHQUFHO1lBQ3ZDO1lBQ0EsT0FBT0UsU0FBU3RCLEtBQUt1QixTQUFTO1FBQ2xDLE9BQU87WUFDSCxPQUFPdkIsS0FBS3VCLFNBQVM7UUFDekI7SUFDSjtJQUVBLE9BQU81QyxTQUFTaUIsT0FBTyxDQUFDRyxZQUFZVCxTQUFTSSxlQUFlO0FBQ2hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tYW1tb3RoL2xpYi94bWwvcmVhZGVyLmpzPzZiMjgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHByb21pc2VzID0gcmVxdWlyZShcIi4uL3Byb21pc2VzXCIpO1xudmFyIF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcblxudmFyIHhtbGRvbSA9IHJlcXVpcmUoXCIuL3htbGRvbVwiKTtcbnZhciBub2RlcyA9IHJlcXVpcmUoXCIuL25vZGVzXCIpO1xudmFyIEVsZW1lbnQgPSBub2Rlcy5FbGVtZW50O1xuXG5leHBvcnRzLnJlYWRTdHJpbmcgPSByZWFkU3RyaW5nO1xuXG52YXIgTm9kZSA9IHhtbGRvbS5Ob2RlO1xuXG5mdW5jdGlvbiByZWFkU3RyaW5nKHhtbFN0cmluZywgbmFtZXNwYWNlTWFwKSB7XG4gICAgbmFtZXNwYWNlTWFwID0gbmFtZXNwYWNlTWFwIHx8IHt9O1xuXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGRvY3VtZW50ID0geG1sZG9tLnBhcnNlRnJvbVN0cmluZyh4bWxTdHJpbmcsIFwidGV4dC94bWxcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VzLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC50YWdOYW1lID09PSBcInBhcnNlcmVycm9yXCIpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VzLnJlc29sdmUobmV3IEVycm9yKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC50ZXh0Q29udGVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnZlcnROb2RlKG5vZGUpIHtcbiAgICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgTm9kZS5FTEVNRU5UX05PREU6XG4gICAgICAgICAgICByZXR1cm4gY29udmVydEVsZW1lbnQobm9kZSk7XG4gICAgICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMudGV4dChub2RlLm5vZGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb252ZXJ0RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHZhciBjb252ZXJ0ZWROYW1lID0gY29udmVydE5hbWUoZWxlbWVudCk7XG5cbiAgICAgICAgdmFyIGNvbnZlcnRlZENoaWxkcmVuID0gW107XG4gICAgICAgIF8uZm9yRWFjaChlbGVtZW50LmNoaWxkTm9kZXMsIGZ1bmN0aW9uKGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgdmFyIGNvbnZlcnRlZE5vZGUgPSBjb252ZXJ0Tm9kZShjaGlsZE5vZGUpO1xuICAgICAgICAgICAgaWYgKGNvbnZlcnRlZE5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb252ZXJ0ZWRDaGlsZHJlbi5wdXNoKGNvbnZlcnRlZE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY29udmVydGVkQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICBfLmZvckVhY2goZWxlbWVudC5hdHRyaWJ1dGVzLCBmdW5jdGlvbihhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIGNvbnZlcnRlZEF0dHJpYnV0ZXNbY29udmVydE5hbWUoYXR0cmlidXRlKV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgRWxlbWVudChjb252ZXJ0ZWROYW1lLCBjb252ZXJ0ZWRBdHRyaWJ1dGVzLCBjb252ZXJ0ZWRDaGlsZHJlbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29udmVydE5hbWUobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5uYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICAgIHZhciBtYXBwZWRQcmVmaXggPSBuYW1lc3BhY2VNYXBbbm9kZS5uYW1lc3BhY2VVUkldO1xuICAgICAgICAgICAgdmFyIHByZWZpeDtcbiAgICAgICAgICAgIGlmIChtYXBwZWRQcmVmaXgpIHtcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBtYXBwZWRQcmVmaXggKyBcIjpcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gXCJ7XCIgKyBub2RlLm5hbWVzcGFjZVVSSSArIFwifVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIG5vZGUubG9jYWxOYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUubG9jYWxOYW1lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2VzLnJlc29sdmUoY29udmVydE5vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSk7XG59XG4iXSwibmFtZXMiOlsicHJvbWlzZXMiLCJyZXF1aXJlIiwiXyIsInhtbGRvbSIsIm5vZGVzIiwiRWxlbWVudCIsImV4cG9ydHMiLCJyZWFkU3RyaW5nIiwiTm9kZSIsInhtbFN0cmluZyIsIm5hbWVzcGFjZU1hcCIsImRvY3VtZW50IiwicGFyc2VGcm9tU3RyaW5nIiwiZXJyb3IiLCJyZWplY3QiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwicmVzb2x2ZSIsIkVycm9yIiwidGV4dENvbnRlbnQiLCJjb252ZXJ0Tm9kZSIsIm5vZGUiLCJub2RlVHlwZSIsIkVMRU1FTlRfTk9ERSIsImNvbnZlcnRFbGVtZW50IiwiVEVYVF9OT0RFIiwidGV4dCIsIm5vZGVWYWx1ZSIsImVsZW1lbnQiLCJjb252ZXJ0ZWROYW1lIiwiY29udmVydE5hbWUiLCJjb252ZXJ0ZWRDaGlsZHJlbiIsImZvckVhY2giLCJjaGlsZE5vZGVzIiwiY2hpbGROb2RlIiwiY29udmVydGVkTm9kZSIsInB1c2giLCJjb252ZXJ0ZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZSIsInZhbHVlIiwibmFtZXNwYWNlVVJJIiwibWFwcGVkUHJlZml4IiwicHJlZml4IiwibG9jYWxOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/xml/reader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/xml/writer.js":
/*!*************************************************!*\
  !*** ../node_modules/mammoth/lib/xml/writer.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar xmlbuilder = __webpack_require__(/*! xmlbuilder */ \"(ssr)/../node_modules/xmlbuilder/lib/index.js\");\nexports.writeString = writeString;\nfunction writeString(root, namespaces) {\n    var uriToPrefix = _.invert(namespaces);\n    var nodeWriters = {\n        element: writeElement,\n        text: writeTextNode\n    };\n    function writeNode(builder, node) {\n        return nodeWriters[node.type](builder, node);\n    }\n    function writeElement(builder, element) {\n        var elementBuilder = builder.element(mapElementName(element.name), element.attributes);\n        element.children.forEach(function(child) {\n            writeNode(elementBuilder, child);\n        });\n    }\n    function mapElementName(name) {\n        var longFormMatch = /^\\{(.*)\\}(.*)$/.exec(name);\n        if (longFormMatch) {\n            var prefix = uriToPrefix[longFormMatch[1]];\n            return prefix + (prefix === \"\" ? \"\" : \":\") + longFormMatch[2];\n        } else {\n            return name;\n        }\n    }\n    function writeDocument(root) {\n        var builder = xmlbuilder.create(mapElementName(root.name), {\n            version: \"1.0\",\n            encoding: \"UTF-8\",\n            standalone: true\n        });\n        _.forEach(namespaces, function(uri, prefix) {\n            var key = \"xmlns\" + (prefix === \"\" ? \"\" : \":\" + prefix);\n            builder.attribute(key, uri);\n        });\n        root.children.forEach(function(child) {\n            writeNode(builder, child);\n        });\n        return builder.end();\n    }\n    return writeDocument(root);\n}\nfunction writeTextNode(builder, node) {\n    builder.text(node.value);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3htbC93cml0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSUMsbUJBQU9BLENBQUMseUVBQVk7QUFDNUIsSUFBSUMsYUFBYUQsbUJBQU9BLENBQUMsaUVBQVk7QUFHckNFLG1CQUFtQixHQUFHQztBQUd0QixTQUFTQSxZQUFZQyxJQUFJLEVBQUVDLFVBQVU7SUFDakMsSUFBSUMsY0FBY1AsRUFBRVEsTUFBTSxDQUFDRjtJQUUzQixJQUFJRyxjQUFjO1FBQ2RDLFNBQVNDO1FBQ1RDLE1BQU1DO0lBQ1Y7SUFFQSxTQUFTQyxVQUFVQyxPQUFPLEVBQUVDLElBQUk7UUFDNUIsT0FBT1AsV0FBVyxDQUFDTyxLQUFLQyxJQUFJLENBQUMsQ0FBQ0YsU0FBU0M7SUFDM0M7SUFFQSxTQUFTTCxhQUFhSSxPQUFPLEVBQUVMLE9BQU87UUFDbEMsSUFBSVEsaUJBQWlCSCxRQUFRTCxPQUFPLENBQUNTLGVBQWVULFFBQVFVLElBQUksR0FBR1YsUUFBUVcsVUFBVTtRQUNyRlgsUUFBUVksUUFBUSxDQUFDQyxPQUFPLENBQUMsU0FBU0MsS0FBSztZQUNuQ1YsVUFBVUksZ0JBQWdCTTtRQUM5QjtJQUNKO0lBRUEsU0FBU0wsZUFBZUMsSUFBSTtRQUN4QixJQUFJSyxnQkFBZ0IsaUJBQWlCQyxJQUFJLENBQUNOO1FBQzFDLElBQUlLLGVBQWU7WUFDZixJQUFJRSxTQUFTcEIsV0FBVyxDQUFDa0IsYUFBYSxDQUFDLEVBQUUsQ0FBQztZQUMxQyxPQUFPRSxTQUFVQSxDQUFBQSxXQUFXLEtBQUssS0FBSyxHQUFFLElBQUtGLGFBQWEsQ0FBQyxFQUFFO1FBQ2pFLE9BQU87WUFDSCxPQUFPTDtRQUNYO0lBQ0o7SUFFQSxTQUFTUSxjQUFjdkIsSUFBSTtRQUN2QixJQUFJVSxVQUFVYixXQUNUMkIsTUFBTSxDQUFDVixlQUFlZCxLQUFLZSxJQUFJLEdBQUc7WUFDL0JVLFNBQVM7WUFDVEMsVUFBVTtZQUNWQyxZQUFZO1FBQ2hCO1FBRUpoQyxFQUFFdUIsT0FBTyxDQUFDakIsWUFBWSxTQUFTMkIsR0FBRyxFQUFFTixNQUFNO1lBQ3RDLElBQUlPLE1BQU0sVUFBV1AsQ0FBQUEsV0FBVyxLQUFLLEtBQUssTUFBTUEsTUFBSztZQUNyRFosUUFBUW9CLFNBQVMsQ0FBQ0QsS0FBS0Q7UUFDM0I7UUFFQTVCLEtBQUtpQixRQUFRLENBQUNDLE9BQU8sQ0FBQyxTQUFTQyxLQUFLO1lBQ2hDVixVQUFVQyxTQUFTUztRQUN2QjtRQUNBLE9BQU9ULFFBQVFxQixHQUFHO0lBQ3RCO0lBRUEsT0FBT1IsY0FBY3ZCO0FBQ3pCO0FBRUEsU0FBU1EsY0FBY0UsT0FBTyxFQUFFQyxJQUFJO0lBQ2hDRCxRQUFRSCxJQUFJLENBQUNJLEtBQUtxQixLQUFLO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9tYW1tb3RoL2xpYi94bWwvd3JpdGVyLmpzPzgxOWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcbnZhciB4bWxidWlsZGVyID0gcmVxdWlyZShcInhtbGJ1aWxkZXJcIik7XG5cblxuZXhwb3J0cy53cml0ZVN0cmluZyA9IHdyaXRlU3RyaW5nO1xuXG5cbmZ1bmN0aW9uIHdyaXRlU3RyaW5nKHJvb3QsIG5hbWVzcGFjZXMpIHtcbiAgICB2YXIgdXJpVG9QcmVmaXggPSBfLmludmVydChuYW1lc3BhY2VzKTtcbiAgICBcbiAgICB2YXIgbm9kZVdyaXRlcnMgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHdyaXRlRWxlbWVudCxcbiAgICAgICAgdGV4dDogd3JpdGVUZXh0Tm9kZVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB3cml0ZU5vZGUoYnVpbGRlciwgbm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZVdyaXRlcnNbbm9kZS50eXBlXShidWlsZGVyLCBub2RlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cml0ZUVsZW1lbnQoYnVpbGRlciwgZWxlbWVudCkge1xuICAgICAgICB2YXIgZWxlbWVudEJ1aWxkZXIgPSBidWlsZGVyLmVsZW1lbnQobWFwRWxlbWVudE5hbWUoZWxlbWVudC5uYW1lKSwgZWxlbWVudC5hdHRyaWJ1dGVzKTtcbiAgICAgICAgZWxlbWVudC5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICB3cml0ZU5vZGUoZWxlbWVudEJ1aWxkZXIsIGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIG1hcEVsZW1lbnROYW1lKG5hbWUpIHtcbiAgICAgICAgdmFyIGxvbmdGb3JtTWF0Y2ggPSAvXlxceyguKilcXH0oLiopJC8uZXhlYyhuYW1lKTtcbiAgICAgICAgaWYgKGxvbmdGb3JtTWF0Y2gpIHtcbiAgICAgICAgICAgIHZhciBwcmVmaXggPSB1cmlUb1ByZWZpeFtsb25nRm9ybU1hdGNoWzFdXTtcbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAocHJlZml4ID09PSBcIlwiID8gXCJcIiA6IFwiOlwiKSArIGxvbmdGb3JtTWF0Y2hbMl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiB3cml0ZURvY3VtZW50KHJvb3QpIHtcbiAgICAgICAgdmFyIGJ1aWxkZXIgPSB4bWxidWlsZGVyXG4gICAgICAgICAgICAuY3JlYXRlKG1hcEVsZW1lbnROYW1lKHJvb3QubmFtZSksIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAnMS4wJyxcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogJ1VURi04JyxcbiAgICAgICAgICAgICAgICBzdGFuZGFsb25lOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIF8uZm9yRWFjaChuYW1lc3BhY2VzLCBmdW5jdGlvbih1cmksIHByZWZpeCkge1xuICAgICAgICAgICAgdmFyIGtleSA9IFwieG1sbnNcIiArIChwcmVmaXggPT09IFwiXCIgPyBcIlwiIDogXCI6XCIgKyBwcmVmaXgpO1xuICAgICAgICAgICAgYnVpbGRlci5hdHRyaWJ1dGUoa2V5LCB1cmkpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJvb3QuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgd3JpdGVOb2RlKGJ1aWxkZXIsIGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBidWlsZGVyLmVuZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB3cml0ZURvY3VtZW50KHJvb3QpO1xufVxuXG5mdW5jdGlvbiB3cml0ZVRleHROb2RlKGJ1aWxkZXIsIG5vZGUpIHtcbiAgICBidWlsZGVyLnRleHQobm9kZS52YWx1ZSk7XG59XG4iXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJ4bWxidWlsZGVyIiwiZXhwb3J0cyIsIndyaXRlU3RyaW5nIiwicm9vdCIsIm5hbWVzcGFjZXMiLCJ1cmlUb1ByZWZpeCIsImludmVydCIsIm5vZGVXcml0ZXJzIiwiZWxlbWVudCIsIndyaXRlRWxlbWVudCIsInRleHQiLCJ3cml0ZVRleHROb2RlIiwid3JpdGVOb2RlIiwiYnVpbGRlciIsIm5vZGUiLCJ0eXBlIiwiZWxlbWVudEJ1aWxkZXIiLCJtYXBFbGVtZW50TmFtZSIsIm5hbWUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRyZW4iLCJmb3JFYWNoIiwiY2hpbGQiLCJsb25nRm9ybU1hdGNoIiwiZXhlYyIsInByZWZpeCIsIndyaXRlRG9jdW1lbnQiLCJjcmVhdGUiLCJ2ZXJzaW9uIiwiZW5jb2RpbmciLCJzdGFuZGFsb25lIiwidXJpIiwia2V5IiwiYXR0cmlidXRlIiwiZW5kIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/xml/writer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/xml/xmldom.js":
/*!*************************************************!*\
  !*** ../node_modules/mammoth/lib/xml/xmldom.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var xmldom = __webpack_require__(/*! @xmldom/xmldom */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/index.js\");\nvar dom = __webpack_require__(/*! @xmldom/xmldom/lib/dom */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/dom.js\");\nfunction parseFromString(string) {\n    var error = null;\n    var domParser = new xmldom.DOMParser({\n        errorHandler: function(level, message) {\n            error = {\n                level: level,\n                message: message\n            };\n        }\n    });\n    var document = domParser.parseFromString(string);\n    if (error === null) {\n        return document;\n    } else {\n        throw new Error(error.level + \": \" + error.message);\n    }\n}\nexports.parseFromString = parseFromString;\nexports.Node = dom.Node;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3htbC94bWxkb20uanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUMseUVBQWdCO0FBQ3JDLElBQUlDLE1BQU1ELG1CQUFPQSxDQUFDLCtFQUF3QjtBQUUxQyxTQUFTRSxnQkFBZ0JDLE1BQU07SUFDM0IsSUFBSUMsUUFBUTtJQUVaLElBQUlDLFlBQVksSUFBSU4sT0FBT08sU0FBUyxDQUFDO1FBQ2pDQyxjQUFjLFNBQVNDLEtBQUssRUFBRUMsT0FBTztZQUNqQ0wsUUFBUTtnQkFBQ0ksT0FBT0E7Z0JBQU9DLFNBQVNBO1lBQU87UUFDM0M7SUFDSjtJQUVBLElBQUlDLFdBQVdMLFVBQVVILGVBQWUsQ0FBQ0M7SUFFekMsSUFBSUMsVUFBVSxNQUFNO1FBQ2hCLE9BQU9NO0lBQ1gsT0FBTztRQUNILE1BQU0sSUFBSUMsTUFBTVAsTUFBTUksS0FBSyxHQUFHLE9BQU9KLE1BQU1LLE9BQU87SUFDdEQ7QUFDSjtBQUVBRyx1QkFBdUIsR0FBR1Y7QUFDMUJVLFlBQVksR0FBR1gsSUFBSVksSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbWFtbW90aC9saWIveG1sL3htbGRvbS5qcz85ZDVlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB4bWxkb20gPSByZXF1aXJlKFwiQHhtbGRvbS94bWxkb21cIik7XG52YXIgZG9tID0gcmVxdWlyZShcIkB4bWxkb20veG1sZG9tL2xpYi9kb21cIik7XG5cbmZ1bmN0aW9uIHBhcnNlRnJvbVN0cmluZyhzdHJpbmcpIHtcbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgdmFyIGRvbVBhcnNlciA9IG5ldyB4bWxkb20uRE9NUGFyc2VyKHtcbiAgICAgICAgZXJyb3JIYW5kbGVyOiBmdW5jdGlvbihsZXZlbCwgbWVzc2FnZSkge1xuICAgICAgICAgICAgZXJyb3IgPSB7bGV2ZWw6IGxldmVsLCBtZXNzYWdlOiBtZXNzYWdlfTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGRvY3VtZW50ID0gZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyhzdHJpbmcpO1xuXG4gICAgaWYgKGVycm9yID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IubGV2ZWwgKyBcIjogXCIgKyBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG59XG5cbmV4cG9ydHMucGFyc2VGcm9tU3RyaW5nID0gcGFyc2VGcm9tU3RyaW5nO1xuZXhwb3J0cy5Ob2RlID0gZG9tLk5vZGU7XG4iXSwibmFtZXMiOlsieG1sZG9tIiwicmVxdWlyZSIsImRvbSIsInBhcnNlRnJvbVN0cmluZyIsInN0cmluZyIsImVycm9yIiwiZG9tUGFyc2VyIiwiRE9NUGFyc2VyIiwiZXJyb3JIYW5kbGVyIiwibGV2ZWwiLCJtZXNzYWdlIiwiZG9jdW1lbnQiLCJFcnJvciIsImV4cG9ydHMiLCJOb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/xml/xmldom.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/mammoth/lib/zipfile.js":
/*!**********************************************!*\
  !*** ../node_modules/mammoth/lib/zipfile.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var base64js = __webpack_require__(/*! base64-js */ \"(ssr)/../node_modules/base64-js/index.js\");\nvar JSZip = __webpack_require__(/*! jszip */ \"(ssr)/../node_modules/jszip/lib/index.js\");\nexports.openArrayBuffer = openArrayBuffer;\nexports.splitPath = splitPath;\nexports.joinPath = joinPath;\nfunction openArrayBuffer(arrayBuffer) {\n    return JSZip.loadAsync(arrayBuffer).then(function(zipFile) {\n        function exists(name) {\n            return zipFile.file(name) !== null;\n        }\n        function read(name, encoding) {\n            return zipFile.file(name).async(\"uint8array\").then(function(array) {\n                if (encoding === \"base64\") {\n                    return base64js.fromByteArray(array);\n                } else if (encoding) {\n                    var decoder = new TextDecoder(encoding);\n                    return decoder.decode(array);\n                } else {\n                    return array;\n                }\n            });\n        }\n        function write(name, contents) {\n            zipFile.file(name, contents);\n        }\n        function toArrayBuffer() {\n            return zipFile.generateAsync({\n                type: \"arraybuffer\"\n            });\n        }\n        return {\n            exists: exists,\n            read: read,\n            write: write,\n            toArrayBuffer: toArrayBuffer\n        };\n    });\n}\nfunction splitPath(path) {\n    var lastIndex = path.lastIndexOf(\"/\");\n    if (lastIndex === -1) {\n        return {\n            dirname: \"\",\n            basename: path\n        };\n    } else {\n        return {\n            dirname: path.substring(0, lastIndex),\n            basename: path.substring(lastIndex + 1)\n        };\n    }\n}\nfunction joinPath() {\n    var nonEmptyPaths = Array.prototype.filter.call(arguments, function(path) {\n        return path;\n    });\n    var relevantPaths = [];\n    nonEmptyPaths.forEach(function(path) {\n        if (/^\\//.test(path)) {\n            relevantPaths = [\n                path\n            ];\n        } else {\n            relevantPaths.push(path);\n        }\n    });\n    return relevantPaths.join(\"/\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3ppcGZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsV0FBV0MsbUJBQU9BLENBQUMsMkRBQVc7QUFDbEMsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUMsdURBQU87QUFFM0JFLHVCQUF1QixHQUFHQztBQUMxQkQsaUJBQWlCLEdBQUdFO0FBQ3BCRixnQkFBZ0IsR0FBR0c7QUFFbkIsU0FBU0YsZ0JBQWdCRyxXQUFXO0lBQ2hDLE9BQU9MLE1BQU1NLFNBQVMsQ0FBQ0QsYUFBYUUsSUFBSSxDQUFDLFNBQVNDLE9BQU87UUFDckQsU0FBU0MsT0FBT0MsSUFBSTtZQUNoQixPQUFPRixRQUFRRyxJQUFJLENBQUNELFVBQVU7UUFDbEM7UUFFQSxTQUFTRSxLQUFLRixJQUFJLEVBQUVHLFFBQVE7WUFDeEIsT0FBT0wsUUFBUUcsSUFBSSxDQUFDRCxNQUFNSSxLQUFLLENBQUMsY0FBY1AsSUFBSSxDQUFDLFNBQVNRLEtBQUs7Z0JBQzdELElBQUlGLGFBQWEsVUFBVTtvQkFDdkIsT0FBT2YsU0FBU2tCLGFBQWEsQ0FBQ0Q7Z0JBQ2xDLE9BQU8sSUFBSUYsVUFBVTtvQkFDakIsSUFBSUksVUFBVSxJQUFJQyxZQUFZTDtvQkFDOUIsT0FBT0ksUUFBUUUsTUFBTSxDQUFDSjtnQkFDMUIsT0FBTztvQkFDSCxPQUFPQTtnQkFDWDtZQUNKO1FBQ0o7UUFFQSxTQUFTSyxNQUFNVixJQUFJLEVBQUVXLFFBQVE7WUFDekJiLFFBQVFHLElBQUksQ0FBQ0QsTUFBTVc7UUFDdkI7UUFFQSxTQUFTQztZQUNMLE9BQU9kLFFBQVFlLGFBQWEsQ0FBQztnQkFBQ0MsTUFBTTtZQUFhO1FBQ3JEO1FBRUEsT0FBTztZQUNIZixRQUFRQTtZQUNSRyxNQUFNQTtZQUNOUSxPQUFPQTtZQUNQRSxlQUFlQTtRQUNuQjtJQUNKO0FBQ0o7QUFFQSxTQUFTbkIsVUFBVXNCLElBQUk7SUFDbkIsSUFBSUMsWUFBWUQsS0FBS0UsV0FBVyxDQUFDO0lBQ2pDLElBQUlELGNBQWMsQ0FBQyxHQUFHO1FBQ2xCLE9BQU87WUFBQ0UsU0FBUztZQUFJQyxVQUFVSjtRQUFJO0lBQ3ZDLE9BQU87UUFDSCxPQUFPO1lBQ0hHLFNBQVNILEtBQUtLLFNBQVMsQ0FBQyxHQUFHSjtZQUMzQkcsVUFBVUosS0FBS0ssU0FBUyxDQUFDSixZQUFZO1FBQ3pDO0lBQ0o7QUFDSjtBQUVBLFNBQVN0QjtJQUNMLElBQUkyQixnQkFBZ0JDLE1BQU1DLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUNDLFdBQVcsU0FBU1gsSUFBSTtRQUNwRSxPQUFPQTtJQUNYO0lBRUEsSUFBSVksZ0JBQWdCLEVBQUU7SUFFdEJOLGNBQWNPLE9BQU8sQ0FBQyxTQUFTYixJQUFJO1FBQy9CLElBQUksTUFBTWMsSUFBSSxDQUFDZCxPQUFPO1lBQ2xCWSxnQkFBZ0I7Z0JBQUNaO2FBQUs7UUFDMUIsT0FBTztZQUNIWSxjQUFjRyxJQUFJLENBQUNmO1FBQ3ZCO0lBQ0o7SUFFQSxPQUFPWSxjQUFjSSxJQUFJLENBQUM7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL21hbW1vdGgvbGliL3ppcGZpbGUuanM/MTJmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZTY0anMgPSByZXF1aXJlKFwiYmFzZTY0LWpzXCIpO1xudmFyIEpTWmlwID0gcmVxdWlyZShcImpzemlwXCIpO1xuXG5leHBvcnRzLm9wZW5BcnJheUJ1ZmZlciA9IG9wZW5BcnJheUJ1ZmZlcjtcbmV4cG9ydHMuc3BsaXRQYXRoID0gc3BsaXRQYXRoO1xuZXhwb3J0cy5qb2luUGF0aCA9IGpvaW5QYXRoO1xuXG5mdW5jdGlvbiBvcGVuQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gSlNaaXAubG9hZEFzeW5jKGFycmF5QnVmZmVyKS50aGVuKGZ1bmN0aW9uKHppcEZpbGUpIHtcbiAgICAgICAgZnVuY3Rpb24gZXhpc3RzKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB6aXBGaWxlLmZpbGUobmFtZSkgIT09IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWFkKG5hbWUsIGVuY29kaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gemlwRmlsZS5maWxlKG5hbWUpLmFzeW5jKFwidWludDhhcnJheVwiKS50aGVuKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSBcImJhc2U2NFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlNjRqcy5mcm9tQnl0ZUFycmF5KGFycmF5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVuY29kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKGVuY29kaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGFycmF5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB3cml0ZShuYW1lLCBjb250ZW50cykge1xuICAgICAgICAgICAgemlwRmlsZS5maWxlKG5hbWUsIGNvbnRlbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gemlwRmlsZS5nZW5lcmF0ZUFzeW5jKHt0eXBlOiBcImFycmF5YnVmZmVyXCJ9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBleGlzdHM6IGV4aXN0cyxcbiAgICAgICAgICAgIHJlYWQ6IHJlYWQsXG4gICAgICAgICAgICB3cml0ZTogd3JpdGUsXG4gICAgICAgICAgICB0b0FycmF5QnVmZmVyOiB0b0FycmF5QnVmZmVyXG4gICAgICAgIH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0UGF0aChwYXRoKSB7XG4gICAgdmFyIGxhc3RJbmRleCA9IHBhdGgubGFzdEluZGV4T2YoXCIvXCIpO1xuICAgIGlmIChsYXN0SW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiB7ZGlybmFtZTogXCJcIiwgYmFzZW5hbWU6IHBhdGh9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXJuYW1lOiBwYXRoLnN1YnN0cmluZygwLCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgYmFzZW5hbWU6IHBhdGguc3Vic3RyaW5nKGxhc3RJbmRleCArIDEpXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBqb2luUGF0aCgpIHtcbiAgICB2YXIgbm9uRW1wdHlQYXRocyA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChhcmd1bWVudHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfSk7XG5cbiAgICB2YXIgcmVsZXZhbnRQYXRocyA9IFtdO1xuXG4gICAgbm9uRW1wdHlQYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgaWYgKC9eXFwvLy50ZXN0KHBhdGgpKSB7XG4gICAgICAgICAgICByZWxldmFudFBhdGhzID0gW3BhdGhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVsZXZhbnRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVsZXZhbnRQYXRocy5qb2luKFwiL1wiKTtcbn1cbiJdLCJuYW1lcyI6WyJiYXNlNjRqcyIsInJlcXVpcmUiLCJKU1ppcCIsImV4cG9ydHMiLCJvcGVuQXJyYXlCdWZmZXIiLCJzcGxpdFBhdGgiLCJqb2luUGF0aCIsImFycmF5QnVmZmVyIiwibG9hZEFzeW5jIiwidGhlbiIsInppcEZpbGUiLCJleGlzdHMiLCJuYW1lIiwiZmlsZSIsInJlYWQiLCJlbmNvZGluZyIsImFzeW5jIiwiYXJyYXkiLCJmcm9tQnl0ZUFycmF5IiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwid3JpdGUiLCJjb250ZW50cyIsInRvQXJyYXlCdWZmZXIiLCJnZW5lcmF0ZUFzeW5jIiwidHlwZSIsInBhdGgiLCJsYXN0SW5kZXgiLCJsYXN0SW5kZXhPZiIsImRpcm5hbWUiLCJiYXNlbmFtZSIsInN1YnN0cmluZyIsIm5vbkVtcHR5UGF0aHMiLCJBcnJheSIsInByb3RvdHlwZSIsImZpbHRlciIsImNhbGwiLCJhcmd1bWVudHMiLCJyZWxldmFudFBhdGhzIiwiZm9yRWFjaCIsInRlc3QiLCJwdXNoIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mammoth/lib/zipfile.js\n");

/***/ })

};
;