/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lop";
exports.ids = ["vendor-chunks/lop"];
exports.modules = {

/***/ "(ssr)/../node_modules/lop/index.js":
/*!************************************!*\
  !*** ../node_modules/lop/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Parser = __webpack_require__(/*! ./lib/parser */ \"(ssr)/../node_modules/lop/lib/parser.js\").Parser;\nexports.rules = __webpack_require__(/*! ./lib/rules */ \"(ssr)/../node_modules/lop/lib/rules.js\");\nexports.errors = __webpack_require__(/*! ./lib/errors */ \"(ssr)/../node_modules/lop/lib/errors.js\");\nexports.results = __webpack_require__(/*! ./lib/parsing-results */ \"(ssr)/../node_modules/lop/lib/parsing-results.js\");\nexports.StringSource = __webpack_require__(/*! ./lib/StringSource */ \"(ssr)/../node_modules/lop/lib/StringSource.js\");\nexports.Token = __webpack_require__(/*! ./lib/Token */ \"(ssr)/../node_modules/lop/lib/Token.js\");\nexports.bottomUp = __webpack_require__(/*! ./lib/bottom-up */ \"(ssr)/../node_modules/lop/lib/bottom-up.js\");\nexports.RegexTokeniser = __webpack_require__(/*! ./lib/regex-tokeniser */ \"(ssr)/../node_modules/lop/lib/regex-tokeniser.js\").RegexTokeniser;\nexports.rule = function(ruleBuilder) {\n    var rule;\n    return function(input) {\n        if (!rule) {\n            rule = ruleBuilder();\n        }\n        return rule(input);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xvcC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsMEdBQStDO0FBQy9DQSxnR0FBc0M7QUFDdENBLG1HQUF3QztBQUN4Q0Esc0hBQWtEO0FBQ2xEQSxxSEFBb0Q7QUFDcERBLGdHQUFzQztBQUN0Q0EsMkdBQTZDO0FBQzdDQSw0SUFBd0U7QUFFeEVBLFlBQVksR0FBRyxTQUFTVyxXQUFXO0lBQy9CLElBQUlEO0lBQ0osT0FBTyxTQUFTRSxLQUFLO1FBQ2pCLElBQUksQ0FBQ0YsTUFBTTtZQUNQQSxPQUFPQztRQUNYO1FBQ0EsT0FBT0QsS0FBS0U7SUFDaEI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbG9wL2luZGV4LmpzPzdjNDMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5QYXJzZXIgPSByZXF1aXJlKFwiLi9saWIvcGFyc2VyXCIpLlBhcnNlcjtcbmV4cG9ydHMucnVsZXMgPSByZXF1aXJlKFwiLi9saWIvcnVsZXNcIik7XG5leHBvcnRzLmVycm9ycyA9IHJlcXVpcmUoXCIuL2xpYi9lcnJvcnNcIik7XG5leHBvcnRzLnJlc3VsdHMgPSByZXF1aXJlKFwiLi9saWIvcGFyc2luZy1yZXN1bHRzXCIpO1xuZXhwb3J0cy5TdHJpbmdTb3VyY2UgPSByZXF1aXJlKFwiLi9saWIvU3RyaW5nU291cmNlXCIpO1xuZXhwb3J0cy5Ub2tlbiA9IHJlcXVpcmUoXCIuL2xpYi9Ub2tlblwiKTtcbmV4cG9ydHMuYm90dG9tVXAgPSByZXF1aXJlKFwiLi9saWIvYm90dG9tLXVwXCIpO1xuZXhwb3J0cy5SZWdleFRva2VuaXNlciA9IHJlcXVpcmUoXCIuL2xpYi9yZWdleC10b2tlbmlzZXJcIikuUmVnZXhUb2tlbmlzZXI7XG5cbmV4cG9ydHMucnVsZSA9IGZ1bmN0aW9uKHJ1bGVCdWlsZGVyKSB7XG4gICAgdmFyIHJ1bGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmICghcnVsZSkge1xuICAgICAgICAgICAgcnVsZSA9IHJ1bGVCdWlsZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bGUoaW5wdXQpO1xuICAgIH07XG59O1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJQYXJzZXIiLCJyZXF1aXJlIiwicnVsZXMiLCJlcnJvcnMiLCJyZXN1bHRzIiwiU3RyaW5nU291cmNlIiwiVG9rZW4iLCJib3R0b21VcCIsIlJlZ2V4VG9rZW5pc2VyIiwicnVsZSIsInJ1bGVCdWlsZGVyIiwiaW5wdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/StringSource.js":
/*!***********************************************!*\
  !*** ../node_modules/lop/lib/StringSource.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\nvar StringSource = module.exports = function(string, description) {\n    var self = {\n        asString: function() {\n            return string;\n        },\n        range: function(startIndex, endIndex) {\n            return new StringSourceRange(string, description, startIndex, endIndex);\n        }\n    };\n    return self;\n};\nvar StringSourceRange = function(string, description, startIndex, endIndex) {\n    this._string = string;\n    this._description = description;\n    this._startIndex = startIndex;\n    this._endIndex = endIndex;\n};\nStringSourceRange.prototype.to = function(otherRange) {\n    // TODO: Assert that tokens are the same across both iterators\n    return new StringSourceRange(this._string, this._description, this._startIndex, otherRange._endIndex);\n};\nStringSourceRange.prototype.describe = function() {\n    var position = this._position();\n    var description = this._description ? this._description + \"\\n\" : \"\";\n    return description + \"Line number: \" + position.lineNumber + \"\\nCharacter number: \" + position.characterNumber;\n};\nStringSourceRange.prototype.lineNumber = function() {\n    return this._position().lineNumber;\n};\nStringSourceRange.prototype.characterNumber = function() {\n    return this._position().characterNumber;\n};\nStringSourceRange.prototype._position = function() {\n    var self = this;\n    var index = 0;\n    var nextNewLine = function() {\n        return self._string.indexOf(\"\\n\", index);\n    };\n    var lineNumber = 1;\n    while(nextNewLine() !== -1 && nextNewLine() < this._startIndex){\n        index = nextNewLine() + 1;\n        lineNumber += 1;\n    }\n    var characterNumber = this._startIndex - index + 1;\n    return {\n        lineNumber: lineNumber,\n        characterNumber: characterNumber\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvU3RyaW5nU291cmNlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxlQUFlQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsTUFBTSxFQUFFQyxXQUFXO0lBQzVELElBQUlDLE9BQU87UUFDUEMsVUFBVTtZQUNOLE9BQU9IO1FBQ1g7UUFDQUksT0FBTyxTQUFTQyxVQUFVLEVBQUVDLFFBQVE7WUFDaEMsT0FBTyxJQUFJQyxrQkFBa0JQLFFBQVFDLGFBQWFJLFlBQVlDO1FBQ2xFO0lBQ0o7SUFDQSxPQUFPSjtBQUNYO0FBRUEsSUFBSUssb0JBQW9CLFNBQVNQLE1BQU0sRUFBRUMsV0FBVyxFQUFFSSxVQUFVLEVBQUVDLFFBQVE7SUFDdEUsSUFBSSxDQUFDRSxPQUFPLEdBQUdSO0lBQ2YsSUFBSSxDQUFDUyxZQUFZLEdBQUdSO0lBQ3BCLElBQUksQ0FBQ1MsV0FBVyxHQUFHTDtJQUNuQixJQUFJLENBQUNNLFNBQVMsR0FBR0w7QUFDckI7QUFFQUMsa0JBQWtCSyxTQUFTLENBQUNDLEVBQUUsR0FBRyxTQUFTQyxVQUFVO0lBQ2hELDhEQUE4RDtJQUM5RCxPQUFPLElBQUlQLGtCQUFrQixJQUFJLENBQUNDLE9BQU8sRUFBRSxJQUFJLENBQUNDLFlBQVksRUFBRSxJQUFJLENBQUNDLFdBQVcsRUFBRUksV0FBV0gsU0FBUztBQUN4RztBQUVBSixrQkFBa0JLLFNBQVMsQ0FBQ0csUUFBUSxHQUFHO0lBQ25DLElBQUlDLFdBQVcsSUFBSSxDQUFDQyxTQUFTO0lBQzdCLElBQUloQixjQUFjLElBQUksQ0FBQ1EsWUFBWSxHQUFHLElBQUksQ0FBQ0EsWUFBWSxHQUFHLE9BQU87SUFDakUsT0FBT1IsY0FBYyxrQkFBa0JlLFNBQVNFLFVBQVUsR0FBRyx5QkFBeUJGLFNBQVNHLGVBQWU7QUFDbEg7QUFFQVosa0JBQWtCSyxTQUFTLENBQUNNLFVBQVUsR0FBRztJQUNyQyxPQUFPLElBQUksQ0FBQ0QsU0FBUyxHQUFHQyxVQUFVO0FBQ3RDO0FBRUFYLGtCQUFrQkssU0FBUyxDQUFDTyxlQUFlLEdBQUc7SUFDMUMsT0FBTyxJQUFJLENBQUNGLFNBQVMsR0FBR0UsZUFBZTtBQUMzQztBQUVBWixrQkFBa0JLLFNBQVMsQ0FBQ0ssU0FBUyxHQUFHO0lBQ3BDLElBQUlmLE9BQU8sSUFBSTtJQUNmLElBQUlrQixRQUFRO0lBQ1osSUFBSUMsY0FBYztRQUNkLE9BQU9uQixLQUFLTSxPQUFPLENBQUNjLE9BQU8sQ0FBQyxNQUFNRjtJQUN0QztJQUVBLElBQUlGLGFBQWE7SUFDakIsTUFBT0csa0JBQWtCLENBQUMsS0FBS0EsZ0JBQWdCLElBQUksQ0FBQ1gsV0FBVyxDQUFFO1FBQzdEVSxRQUFRQyxnQkFBZ0I7UUFDeEJILGNBQWM7SUFDbEI7SUFDQSxJQUFJQyxrQkFBa0IsSUFBSSxDQUFDVCxXQUFXLEdBQUdVLFFBQVE7SUFDakQsT0FBTztRQUFDRixZQUFZQTtRQUFZQyxpQkFBaUJBO0lBQWU7QUFDcEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvU3RyaW5nU291cmNlLmpzP2I5NWQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFN0cmluZ1NvdXJjZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3RyaW5nLCBkZXNjcmlwdGlvbikge1xuICAgIHZhciBzZWxmID0ge1xuICAgICAgICBhc1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgICB9LFxuICAgICAgICByYW5nZTogZnVuY3Rpb24oc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyaW5nU291cmNlUmFuZ2Uoc3RyaW5nLCBkZXNjcmlwdGlvbiwgc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZjtcbn07XG5cbnZhciBTdHJpbmdTb3VyY2VSYW5nZSA9IGZ1bmN0aW9uKHN0cmluZywgZGVzY3JpcHRpb24sIHN0YXJ0SW5kZXgsIGVuZEluZGV4KSB7XG4gICAgdGhpcy5fc3RyaW5nID0gc3RyaW5nO1xuICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5fc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgdGhpcy5fZW5kSW5kZXggPSBlbmRJbmRleDtcbn07XG5cblN0cmluZ1NvdXJjZVJhbmdlLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uKG90aGVyUmFuZ2UpIHtcbiAgICAvLyBUT0RPOiBBc3NlcnQgdGhhdCB0b2tlbnMgYXJlIHRoZSBzYW1lIGFjcm9zcyBib3RoIGl0ZXJhdG9yc1xuICAgIHJldHVybiBuZXcgU3RyaW5nU291cmNlUmFuZ2UodGhpcy5fc3RyaW5nLCB0aGlzLl9kZXNjcmlwdGlvbiwgdGhpcy5fc3RhcnRJbmRleCwgb3RoZXJSYW5nZS5fZW5kSW5kZXgpO1xufTtcblxuU3RyaW5nU291cmNlUmFuZ2UucHJvdG90eXBlLmRlc2NyaWJlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gdGhpcy5fcG9zaXRpb24oKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLl9kZXNjcmlwdGlvbiA/IHRoaXMuX2Rlc2NyaXB0aW9uICsgXCJcXG5cIiA6IFwiXCI7XG4gICAgcmV0dXJuIGRlc2NyaXB0aW9uICsgXCJMaW5lIG51bWJlcjogXCIgKyBwb3NpdGlvbi5saW5lTnVtYmVyICsgXCJcXG5DaGFyYWN0ZXIgbnVtYmVyOiBcIiArIHBvc2l0aW9uLmNoYXJhY3Rlck51bWJlcjtcbn07XG5cblN0cmluZ1NvdXJjZVJhbmdlLnByb3RvdHlwZS5saW5lTnVtYmVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uKCkubGluZU51bWJlcjtcbn07XG5cblN0cmluZ1NvdXJjZVJhbmdlLnByb3RvdHlwZS5jaGFyYWN0ZXJOdW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb24oKS5jaGFyYWN0ZXJOdW1iZXI7XG59O1xuXG5TdHJpbmdTb3VyY2VSYW5nZS5wcm90b3R5cGUuX3Bvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIG5leHROZXdMaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9zdHJpbmcuaW5kZXhPZihcIlxcblwiLCBpbmRleCk7XG4gICAgfTtcblxuICAgIHZhciBsaW5lTnVtYmVyID0gMTtcbiAgICB3aGlsZSAobmV4dE5ld0xpbmUoKSAhPT0gLTEgJiYgbmV4dE5ld0xpbmUoKSA8IHRoaXMuX3N0YXJ0SW5kZXgpIHtcbiAgICAgICAgaW5kZXggPSBuZXh0TmV3TGluZSgpICsgMTtcbiAgICAgICAgbGluZU51bWJlciArPSAxO1xuICAgIH1cbiAgICB2YXIgY2hhcmFjdGVyTnVtYmVyID0gdGhpcy5fc3RhcnRJbmRleCAtIGluZGV4ICsgMTtcbiAgICByZXR1cm4ge2xpbmVOdW1iZXI6IGxpbmVOdW1iZXIsIGNoYXJhY3Rlck51bWJlcjogY2hhcmFjdGVyTnVtYmVyfTtcbn07XG4iXSwibmFtZXMiOlsiU3RyaW5nU291cmNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0cmluZyIsImRlc2NyaXB0aW9uIiwic2VsZiIsImFzU3RyaW5nIiwicmFuZ2UiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJTdHJpbmdTb3VyY2VSYW5nZSIsIl9zdHJpbmciLCJfZGVzY3JpcHRpb24iLCJfc3RhcnRJbmRleCIsIl9lbmRJbmRleCIsInByb3RvdHlwZSIsInRvIiwib3RoZXJSYW5nZSIsImRlc2NyaWJlIiwicG9zaXRpb24iLCJfcG9zaXRpb24iLCJsaW5lTnVtYmVyIiwiY2hhcmFjdGVyTnVtYmVyIiwiaW5kZXgiLCJuZXh0TmV3TGluZSIsImluZGV4T2YiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/StringSource.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/Token.js":
/*!****************************************!*\
  !*** ../node_modules/lop/lib/Token.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = function(name, value, source) {\n    this.name = name;\n    this.value = value;\n    if (source) {\n        this.source = source;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvVG9rZW4uanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDekMsSUFBSSxDQUFDRixJQUFJLEdBQUdBO0lBQ1osSUFBSSxDQUFDQyxLQUFLLEdBQUdBO0lBQ2IsSUFBSUMsUUFBUTtRQUNSLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtJQUNsQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9sb3AvbGliL1Rva2VuLmpzPzIxZGEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgc291cmNlKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwidmFsdWUiLCJzb3VyY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/Token.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/TokenIterator.js":
/*!************************************************!*\
  !*** ../node_modules/lop/lib/TokenIterator.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\nvar TokenIterator = module.exports = function(tokens, startIndex) {\n    this._tokens = tokens;\n    this._startIndex = startIndex || 0;\n};\nTokenIterator.prototype.head = function() {\n    return this._tokens[this._startIndex];\n};\nTokenIterator.prototype.tail = function(startIndex) {\n    return new TokenIterator(this._tokens, this._startIndex + 1);\n};\nTokenIterator.prototype.toArray = function() {\n    return this._tokens.slice(this._startIndex);\n};\nTokenIterator.prototype.end = function() {\n    return this._tokens[this._tokens.length - 1];\n};\n// TODO: doesn't need to be a method, can be a separate function,\n// which simplifies implementation of the TokenIterator interface\nTokenIterator.prototype.to = function(end) {\n    var start = this.head().source;\n    var endToken = end.head() || end.end();\n    return start.to(endToken.source);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvVG9rZW5JdGVyYXRvci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsZ0JBQWdCQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsTUFBTSxFQUFFQyxVQUFVO0lBQzVELElBQUksQ0FBQ0MsT0FBTyxHQUFHRjtJQUNmLElBQUksQ0FBQ0csV0FBVyxHQUFHRixjQUFjO0FBQ3JDO0FBRUFKLGNBQWNPLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHO0lBQzNCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDQyxXQUFXLENBQUM7QUFDekM7QUFFQU4sY0FBY08sU0FBUyxDQUFDRSxJQUFJLEdBQUcsU0FBU0wsVUFBVTtJQUM5QyxPQUFPLElBQUlKLGNBQWMsSUFBSSxDQUFDSyxPQUFPLEVBQUUsSUFBSSxDQUFDQyxXQUFXLEdBQUc7QUFDOUQ7QUFFQU4sY0FBY08sU0FBUyxDQUFDRyxPQUFPLEdBQUc7SUFDOUIsT0FBTyxJQUFJLENBQUNMLE9BQU8sQ0FBQ00sS0FBSyxDQUFDLElBQUksQ0FBQ0wsV0FBVztBQUM5QztBQUVBTixjQUFjTyxTQUFTLENBQUNLLEdBQUcsR0FBRztJQUMxQixPQUFPLElBQUksQ0FBQ1AsT0FBTyxDQUFDLElBQUksQ0FBQ0EsT0FBTyxDQUFDUSxNQUFNLEdBQUcsRUFBRTtBQUNoRDtBQUVBLGlFQUFpRTtBQUNqRSxpRUFBaUU7QUFDakViLGNBQWNPLFNBQVMsQ0FBQ08sRUFBRSxHQUFHLFNBQVNGLEdBQUc7SUFDckMsSUFBSUcsUUFBUSxJQUFJLENBQUNQLElBQUksR0FBR1EsTUFBTTtJQUM5QixJQUFJQyxXQUFXTCxJQUFJSixJQUFJLE1BQU1JLElBQUlBLEdBQUc7SUFDcEMsT0FBT0csTUFBTUQsRUFBRSxDQUFDRyxTQUFTRCxNQUFNO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9sb3AvbGliL1Rva2VuSXRlcmF0b3IuanM/MzA3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVG9rZW5JdGVyYXRvciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odG9rZW5zLCBzdGFydEluZGV4KSB7XG4gICAgdGhpcy5fdG9rZW5zID0gdG9rZW5zO1xuICAgIHRoaXMuX3N0YXJ0SW5kZXggPSBzdGFydEluZGV4IHx8IDA7XG59O1xuXG5Ub2tlbkl0ZXJhdG9yLnByb3RvdHlwZS5oZWFkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Rva2Vuc1t0aGlzLl9zdGFydEluZGV4XTtcbn07XG5cblRva2VuSXRlcmF0b3IucHJvdG90eXBlLnRhaWwgPSBmdW5jdGlvbihzdGFydEluZGV4KSB7XG4gICAgcmV0dXJuIG5ldyBUb2tlbkl0ZXJhdG9yKHRoaXMuX3Rva2VucywgdGhpcy5fc3RhcnRJbmRleCArIDEpO1xufTtcblxuVG9rZW5JdGVyYXRvci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl90b2tlbnMuc2xpY2UodGhpcy5fc3RhcnRJbmRleCk7XG59O1xuXG5Ub2tlbkl0ZXJhdG9yLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9rZW5zW3RoaXMuX3Rva2Vucy5sZW5ndGggLSAxXTtcbn07XG5cbi8vIFRPRE86IGRvZXNuJ3QgbmVlZCB0byBiZSBhIG1ldGhvZCwgY2FuIGJlIGEgc2VwYXJhdGUgZnVuY3Rpb24sXG4vLyB3aGljaCBzaW1wbGlmaWVzIGltcGxlbWVudGF0aW9uIG9mIHRoZSBUb2tlbkl0ZXJhdG9yIGludGVyZmFjZVxuVG9rZW5JdGVyYXRvci5wcm90b3R5cGUudG8gPSBmdW5jdGlvbihlbmQpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmhlYWQoKS5zb3VyY2U7XG4gICAgdmFyIGVuZFRva2VuID0gZW5kLmhlYWQoKSB8fCBlbmQuZW5kKCk7XG4gICAgcmV0dXJuIHN0YXJ0LnRvKGVuZFRva2VuLnNvdXJjZSk7XG59O1xuIl0sIm5hbWVzIjpbIlRva2VuSXRlcmF0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwidG9rZW5zIiwic3RhcnRJbmRleCIsIl90b2tlbnMiLCJfc3RhcnRJbmRleCIsInByb3RvdHlwZSIsImhlYWQiLCJ0YWlsIiwidG9BcnJheSIsInNsaWNlIiwiZW5kIiwibGVuZ3RoIiwidG8iLCJzdGFydCIsInNvdXJjZSIsImVuZFRva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/TokenIterator.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/bottom-up.js":
/*!********************************************!*\
  !*** ../node_modules/lop/lib/bottom-up.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var rules = __webpack_require__(/*! ./rules */ \"(ssr)/../node_modules/lop/lib/rules.js\");\nvar results = __webpack_require__(/*! ./parsing-results */ \"(ssr)/../node_modules/lop/lib/parsing-results.js\");\nexports.parser = function(name, prefixRules, infixRuleBuilders) {\n    var self = {\n        rule: rule,\n        leftAssociative: leftAssociative,\n        rightAssociative: rightAssociative\n    };\n    var infixRules = new InfixRules(infixRuleBuilders.map(createInfixRule));\n    var prefixRule = rules.firstOf(name, prefixRules);\n    function createInfixRule(infixRuleBuilder) {\n        return {\n            name: infixRuleBuilder.name,\n            rule: lazyRule(infixRuleBuilder.ruleBuilder.bind(null, self))\n        };\n    }\n    function rule() {\n        return createRule(infixRules);\n    }\n    function leftAssociative(name) {\n        return createRule(infixRules.untilExclusive(name));\n    }\n    function rightAssociative(name) {\n        return createRule(infixRules.untilInclusive(name));\n    }\n    function createRule(infixRules) {\n        return apply.bind(null, infixRules);\n    }\n    function apply(infixRules, tokens) {\n        var leftResult = prefixRule(tokens);\n        if (leftResult.isSuccess()) {\n            return infixRules.apply(leftResult);\n        } else {\n            return leftResult;\n        }\n    }\n    return self;\n};\nfunction InfixRules(infixRules) {\n    function untilExclusive(name) {\n        return new InfixRules(infixRules.slice(0, ruleNames().indexOf(name)));\n    }\n    function untilInclusive(name) {\n        return new InfixRules(infixRules.slice(0, ruleNames().indexOf(name) + 1));\n    }\n    function ruleNames() {\n        return infixRules.map(function(rule) {\n            return rule.name;\n        });\n    }\n    function apply(leftResult) {\n        var currentResult;\n        var source;\n        while(true){\n            currentResult = applyToTokens(leftResult.remaining());\n            if (currentResult.isSuccess()) {\n                source = leftResult.source().to(currentResult.source());\n                leftResult = results.success(currentResult.value()(leftResult.value(), source), currentResult.remaining(), source);\n            } else if (currentResult.isFailure()) {\n                return leftResult;\n            } else {\n                return currentResult;\n            }\n        }\n    }\n    function applyToTokens(tokens) {\n        return rules.firstOf(\"infix\", infixRules.map(function(infix) {\n            return infix.rule;\n        }))(tokens);\n    }\n    return {\n        apply: apply,\n        untilExclusive: untilExclusive,\n        untilInclusive: untilInclusive\n    };\n}\nexports.infix = function(name, ruleBuilder) {\n    function map(func) {\n        return exports.infix(name, function(parser) {\n            var rule = ruleBuilder(parser);\n            return function(tokens) {\n                var result = rule(tokens);\n                return result.map(function(right) {\n                    return function(left, source) {\n                        return func(left, right, source);\n                    };\n                });\n            };\n        });\n    }\n    return {\n        name: name,\n        ruleBuilder: ruleBuilder,\n        map: map\n    };\n};\n// TODO: move into a sensible place and remove duplication\nvar lazyRule = function(ruleBuilder) {\n    var rule;\n    return function(input) {\n        if (!rule) {\n            rule = ruleBuilder();\n        }\n        return rule(input);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/bottom-up.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/errors.js":
/*!*****************************************!*\
  !*** ../node_modules/lop/lib/errors.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.error = function(options) {\n    return new Error(options);\n};\nvar Error = function(options) {\n    this.expected = options.expected;\n    this.actual = options.actual;\n    this._location = options.location;\n};\nError.prototype.describe = function() {\n    var locationDescription = this._location ? this._location.describe() + \":\\n\" : \"\";\n    return locationDescription + \"Expected \" + this.expected + \"\\nbut got \" + this.actual;\n};\nError.prototype.lineNumber = function() {\n    return this._location.lineNumber();\n};\nError.prototype.characterNumber = function() {\n    return this._location.characterNumber();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBQSxhQUFhLEdBQUcsU0FBU0UsT0FBTztJQUM1QixPQUFPLElBQUlDLE1BQU1EO0FBQ3JCO0FBRUEsSUFBSUMsUUFBUSxTQUFTRCxPQUFPO0lBQ3hCLElBQUksQ0FBQ0UsUUFBUSxHQUFHRixRQUFRRSxRQUFRO0lBQ2hDLElBQUksQ0FBQ0MsTUFBTSxHQUFHSCxRQUFRRyxNQUFNO0lBQzVCLElBQUksQ0FBQ0MsU0FBUyxHQUFHSixRQUFRSyxRQUFRO0FBQ3JDO0FBRUFKLE1BQU1LLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHO0lBQ3ZCLElBQUlDLHNCQUFzQixJQUFJLENBQUNKLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQ0csUUFBUSxLQUFLLFFBQVE7SUFDL0UsT0FBT0Msc0JBQXNCLGNBQWMsSUFBSSxDQUFDTixRQUFRLEdBQUcsZUFBZSxJQUFJLENBQUNDLE1BQU07QUFDekY7QUFFQUYsTUFBTUssU0FBUyxDQUFDRyxVQUFVLEdBQUc7SUFDekIsT0FBTyxJQUFJLENBQUNMLFNBQVMsQ0FBQ0ssVUFBVTtBQUNwQztBQUVBUixNQUFNSyxTQUFTLENBQUNJLGVBQWUsR0FBRztJQUM5QixPQUFPLElBQUksQ0FBQ04sU0FBUyxDQUFDTSxlQUFlO0FBQ3pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9sb3AvbGliL2Vycm9ycy5qcz85ZjM5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZXJyb3IgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihvcHRpb25zKTtcbn07XG5cbnZhciBFcnJvciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsO1xuICAgIHRoaXMuX2xvY2F0aW9uID0gb3B0aW9ucy5sb2NhdGlvbjtcbn07XG5cbkVycm9yLnByb3RvdHlwZS5kZXNjcmliZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsb2NhdGlvbkRlc2NyaXB0aW9uID0gdGhpcy5fbG9jYXRpb24gPyB0aGlzLl9sb2NhdGlvbi5kZXNjcmliZSgpICsgXCI6XFxuXCIgOiBcIlwiO1xuICAgIHJldHVybiBsb2NhdGlvbkRlc2NyaXB0aW9uICsgXCJFeHBlY3RlZCBcIiArIHRoaXMuZXhwZWN0ZWQgKyBcIlxcbmJ1dCBnb3QgXCIgKyB0aGlzLmFjdHVhbDtcbn07XG5cbkVycm9yLnByb3RvdHlwZS5saW5lTnVtYmVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2F0aW9uLmxpbmVOdW1iZXIoKTtcbn07XG5cbkVycm9yLnByb3RvdHlwZS5jaGFyYWN0ZXJOdW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYXRpb24uY2hhcmFjdGVyTnVtYmVyKCk7XG59O1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJlcnJvciIsIm9wdGlvbnMiLCJFcnJvciIsImV4cGVjdGVkIiwiYWN0dWFsIiwiX2xvY2F0aW9uIiwibG9jYXRpb24iLCJwcm90b3R5cGUiLCJkZXNjcmliZSIsImxvY2F0aW9uRGVzY3JpcHRpb24iLCJsaW5lTnVtYmVyIiwiY2hhcmFjdGVyTnVtYmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/errors.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/lazy-iterators.js":
/*!*************************************************!*\
  !*** ../node_modules/lop/lib/lazy-iterators.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var fromArray = exports.fromArray = function(array) {\n    var index = 0;\n    var hasNext = function() {\n        return index < array.length;\n    };\n    return new LazyIterator({\n        hasNext: hasNext,\n        next: function() {\n            if (!hasNext()) {\n                throw new Error(\"No more elements\");\n            } else {\n                return array[index++];\n            }\n        }\n    });\n};\nvar LazyIterator = function(iterator) {\n    this._iterator = iterator;\n};\nLazyIterator.prototype.map = function(func) {\n    var iterator = this._iterator;\n    return new LazyIterator({\n        hasNext: function() {\n            return iterator.hasNext();\n        },\n        next: function() {\n            return func(iterator.next());\n        }\n    });\n};\nLazyIterator.prototype.filter = function(condition) {\n    var iterator = this._iterator;\n    var moved = false;\n    var hasNext = false;\n    var next;\n    var moveIfNecessary = function() {\n        if (moved) {\n            return;\n        }\n        moved = true;\n        hasNext = false;\n        while(iterator.hasNext() && !hasNext){\n            next = iterator.next();\n            hasNext = condition(next);\n        }\n    };\n    return new LazyIterator({\n        hasNext: function() {\n            moveIfNecessary();\n            return hasNext;\n        },\n        next: function() {\n            moveIfNecessary();\n            var toReturn = next;\n            moved = false;\n            return toReturn;\n        }\n    });\n};\nLazyIterator.prototype.first = function() {\n    var iterator = this._iterator;\n    if (this._iterator.hasNext()) {\n        return iterator.next();\n    } else {\n        return null;\n    }\n};\nLazyIterator.prototype.toArray = function() {\n    var result = [];\n    while(this._iterator.hasNext()){\n        result.push(this._iterator.next());\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvbGF6eS1pdGVyYXRvcnMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsWUFBWUMsaUJBQWlCLEdBQUcsU0FBU0MsS0FBSztJQUM5QyxJQUFJQyxRQUFRO0lBQ1osSUFBSUMsVUFBVTtRQUNWLE9BQU9ELFFBQVFELE1BQU1HLE1BQU07SUFDL0I7SUFDQSxPQUFPLElBQUlDLGFBQWE7UUFDcEJGLFNBQVNBO1FBQ1RHLE1BQU07WUFDRixJQUFJLENBQUNILFdBQVc7Z0JBQ1osTUFBTSxJQUFJSSxNQUFNO1lBQ3BCLE9BQU87Z0JBQ0gsT0FBT04sS0FBSyxDQUFDQyxRQUFRO1lBQ3pCO1FBQ0o7SUFDSjtBQUNKO0FBRUEsSUFBSUcsZUFBZSxTQUFTRyxRQUFRO0lBQ2hDLElBQUksQ0FBQ0MsU0FBUyxHQUFHRDtBQUNyQjtBQUVBSCxhQUFhSyxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFTQyxJQUFJO0lBQ3RDLElBQUlKLFdBQVcsSUFBSSxDQUFDQyxTQUFTO0lBQzdCLE9BQU8sSUFBSUosYUFBYTtRQUNwQkYsU0FBUztZQUNMLE9BQU9LLFNBQVNMLE9BQU87UUFDM0I7UUFDQUcsTUFBTTtZQUNGLE9BQU9NLEtBQUtKLFNBQVNGLElBQUk7UUFDN0I7SUFDSjtBQUNKO0FBRUFELGFBQWFLLFNBQVMsQ0FBQ0csTUFBTSxHQUFHLFNBQVNDLFNBQVM7SUFDOUMsSUFBSU4sV0FBVyxJQUFJLENBQUNDLFNBQVM7SUFFN0IsSUFBSU0sUUFBUTtJQUNaLElBQUlaLFVBQVU7SUFDZCxJQUFJRztJQUNKLElBQUlVLGtCQUFrQjtRQUNsQixJQUFJRCxPQUFPO1lBQ1A7UUFDSjtRQUNBQSxRQUFRO1FBQ1JaLFVBQVU7UUFDVixNQUFPSyxTQUFTTCxPQUFPLE1BQU0sQ0FBQ0EsUUFBUztZQUNuQ0csT0FBT0UsU0FBU0YsSUFBSTtZQUNwQkgsVUFBVVcsVUFBVVI7UUFDeEI7SUFDSjtJQUVBLE9BQU8sSUFBSUQsYUFBYTtRQUNwQkYsU0FBUztZQUNMYTtZQUNBLE9BQU9iO1FBQ1g7UUFDQUcsTUFBTTtZQUNGVTtZQUNBLElBQUlDLFdBQVdYO1lBQ2ZTLFFBQVE7WUFDUixPQUFPRTtRQUNYO0lBQ0o7QUFDSjtBQUVBWixhQUFhSyxTQUFTLENBQUNRLEtBQUssR0FBRztJQUMzQixJQUFJVixXQUFXLElBQUksQ0FBQ0MsU0FBUztJQUM3QixJQUFJLElBQUksQ0FBQ0EsU0FBUyxDQUFDTixPQUFPLElBQUk7UUFDMUIsT0FBT0ssU0FBU0YsSUFBSTtJQUN4QixPQUFPO1FBQ0gsT0FBTztJQUNYO0FBQ0o7QUFFQUQsYUFBYUssU0FBUyxDQUFDUyxPQUFPLEdBQUc7SUFDN0IsSUFBSUMsU0FBUyxFQUFFO0lBQ2YsTUFBTyxJQUFJLENBQUNYLFNBQVMsQ0FBQ04sT0FBTyxHQUFJO1FBQzdCaUIsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ1osU0FBUyxDQUFDSCxJQUFJO0lBQ25DO0lBQ0EsT0FBT2M7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9sYXp5LWl0ZXJhdG9ycy5qcz9mNWIyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBmcm9tQXJyYXkgPSBleHBvcnRzLmZyb21BcnJheSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaGFzTmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaW5kZXggPCBhcnJheS5sZW5ndGg7XG4gICAgfTtcbiAgICByZXR1cm4gbmV3IExhenlJdGVyYXRvcih7XG4gICAgICAgIGhhc05leHQ6IGhhc05leHQsXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFoYXNOZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBtb3JlIGVsZW1lbnRzXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlbaW5kZXgrK107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbnZhciBMYXp5SXRlcmF0b3IgPSBmdW5jdGlvbihpdGVyYXRvcikge1xuICAgIHRoaXMuX2l0ZXJhdG9yID0gaXRlcmF0b3I7XG59O1xuXG5MYXp5SXRlcmF0b3IucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICByZXR1cm4gbmV3IExhenlJdGVyYXRvcih7XG4gICAgICAgIGhhc05leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLmhhc05leHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuYyhpdGVyYXRvci5uZXh0KCkpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5MYXp5SXRlcmF0b3IucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uKGNvbmRpdGlvbikge1xuICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuICAgIFxuICAgIHZhciBtb3ZlZCA9IGZhbHNlO1xuICAgIHZhciBoYXNOZXh0ID0gZmFsc2U7XG4gICAgdmFyIG5leHQ7XG4gICAgdmFyIG1vdmVJZk5lY2Vzc2FyeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAobW92ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgIGhhc05leHQgPSBmYWxzZTtcbiAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLmhhc05leHQoKSAmJiAhaGFzTmV4dCkge1xuICAgICAgICAgICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGhhc05leHQgPSBjb25kaXRpb24obmV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBuZXcgTGF6eUl0ZXJhdG9yKHtcbiAgICAgICAgaGFzTmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBtb3ZlSWZOZWNlc3NhcnkoKTtcbiAgICAgICAgICAgIHJldHVybiBoYXNOZXh0O1xuICAgICAgICB9LFxuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG1vdmVJZk5lY2Vzc2FyeSgpO1xuICAgICAgICAgICAgdmFyIHRvUmV0dXJuID0gbmV4dDtcbiAgICAgICAgICAgIG1vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdG9SZXR1cm47XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbkxhenlJdGVyYXRvci5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICBpZiAodGhpcy5faXRlcmF0b3IuaGFzTmV4dCgpKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvci5uZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufTtcblxuTGF6eUl0ZXJhdG9yLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlICh0aGlzLl9pdGVyYXRvci5oYXNOZXh0KCkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godGhpcy5faXRlcmF0b3IubmV4dCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsiZnJvbUFycmF5IiwiZXhwb3J0cyIsImFycmF5IiwiaW5kZXgiLCJoYXNOZXh0IiwibGVuZ3RoIiwiTGF6eUl0ZXJhdG9yIiwibmV4dCIsIkVycm9yIiwiaXRlcmF0b3IiLCJfaXRlcmF0b3IiLCJwcm90b3R5cGUiLCJtYXAiLCJmdW5jIiwiZmlsdGVyIiwiY29uZGl0aW9uIiwibW92ZWQiLCJtb3ZlSWZOZWNlc3NhcnkiLCJ0b1JldHVybiIsImZpcnN0IiwidG9BcnJheSIsInJlc3VsdCIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/lazy-iterators.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/parser.js":
/*!*****************************************!*\
  !*** ../node_modules/lop/lib/parser.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var TokenIterator = __webpack_require__(/*! ./TokenIterator */ \"(ssr)/../node_modules/lop/lib/TokenIterator.js\");\nexports.Parser = function(options) {\n    var parseTokens = function(parser, tokens) {\n        return parser(new TokenIterator(tokens));\n    };\n    return {\n        parseTokens: parseTokens\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLGdCQUFnQkMsbUJBQU9BLENBQUMsdUVBQWlCO0FBRTdDQyxjQUFjLEdBQUcsU0FBU0UsT0FBTztJQUM3QixJQUFJQyxjQUFjLFNBQVNDLE1BQU0sRUFBRUMsTUFBTTtRQUNyQyxPQUFPRCxPQUFPLElBQUlOLGNBQWNPO0lBQ3BDO0lBRUEsT0FBTztRQUNIRixhQUFhQTtJQUNqQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXRzLWFlcm8taXNvLWZyb250ZW5kLy4uL25vZGVfbW9kdWxlcy9sb3AvbGliL3BhcnNlci5qcz8xMDFkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBUb2tlbkl0ZXJhdG9yID0gcmVxdWlyZShcIi4vVG9rZW5JdGVyYXRvclwiKTtcblxuZXhwb3J0cy5QYXJzZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIHBhcnNlVG9rZW5zID0gZnVuY3Rpb24ocGFyc2VyLCB0b2tlbnMpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlcihuZXcgVG9rZW5JdGVyYXRvcih0b2tlbnMpKTtcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIHBhcnNlVG9rZW5zOiBwYXJzZVRva2Vuc1xuICAgIH07XG59O1xuIl0sIm5hbWVzIjpbIlRva2VuSXRlcmF0b3IiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIlBhcnNlciIsIm9wdGlvbnMiLCJwYXJzZVRva2VucyIsInBhcnNlciIsInRva2VucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/parsing-results.js":
/*!**************************************************!*\
  !*** ../node_modules/lop/lib/parsing-results.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    failure: function(errors, remaining) {\n        if (errors.length < 1) {\n            throw new Error(\"Failure must have errors\");\n        }\n        return new Result({\n            status: \"failure\",\n            remaining: remaining,\n            errors: errors\n        });\n    },\n    error: function(errors, remaining) {\n        if (errors.length < 1) {\n            throw new Error(\"Failure must have errors\");\n        }\n        return new Result({\n            status: \"error\",\n            remaining: remaining,\n            errors: errors\n        });\n    },\n    success: function(value, remaining, source) {\n        return new Result({\n            status: \"success\",\n            value: value,\n            source: source,\n            remaining: remaining,\n            errors: []\n        });\n    },\n    cut: function(remaining) {\n        return new Result({\n            status: \"cut\",\n            remaining: remaining,\n            errors: []\n        });\n    }\n};\nvar Result = function(options) {\n    this._value = options.value;\n    this._status = options.status;\n    this._hasValue = options.value !== undefined;\n    this._remaining = options.remaining;\n    this._source = options.source;\n    this._errors = options.errors;\n};\nResult.prototype.map = function(func) {\n    if (this._hasValue) {\n        return new Result({\n            value: func(this._value, this._source),\n            status: this._status,\n            remaining: this._remaining,\n            source: this._source,\n            errors: this._errors\n        });\n    } else {\n        return this;\n    }\n};\nResult.prototype.changeRemaining = function(remaining) {\n    return new Result({\n        value: this._value,\n        status: this._status,\n        remaining: remaining,\n        source: this._source,\n        errors: this._errors\n    });\n};\nResult.prototype.isSuccess = function() {\n    return this._status === \"success\" || this._status === \"cut\";\n};\nResult.prototype.isFailure = function() {\n    return this._status === \"failure\";\n};\nResult.prototype.isError = function() {\n    return this._status === \"error\";\n};\nResult.prototype.isCut = function() {\n    return this._status === \"cut\";\n};\nResult.prototype.value = function() {\n    return this._value;\n};\nResult.prototype.remaining = function() {\n    return this._remaining;\n};\nResult.prototype.source = function() {\n    return this._source;\n};\nResult.prototype.errors = function() {\n    return this._errors;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvcGFyc2luZy1yZXN1bHRzLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2JDLFNBQVMsU0FBU0MsTUFBTSxFQUFFQyxTQUFTO1FBQy9CLElBQUlELE9BQU9FLE1BQU0sR0FBRyxHQUFHO1lBQ25CLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLE9BQU8sSUFBSUMsT0FBTztZQUNkQyxRQUFRO1lBQ1JKLFdBQVdBO1lBQ1hELFFBQVFBO1FBQ1o7SUFDSjtJQUNBTSxPQUFPLFNBQVNOLE1BQU0sRUFBRUMsU0FBUztRQUM3QixJQUFJRCxPQUFPRSxNQUFNLEdBQUcsR0FBRztZQUNuQixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxPQUFPLElBQUlDLE9BQU87WUFDZEMsUUFBUTtZQUNSSixXQUFXQTtZQUNYRCxRQUFRQTtRQUNaO0lBQ0o7SUFDQU8sU0FBUyxTQUFTQyxLQUFLLEVBQUVQLFNBQVMsRUFBRVEsTUFBTTtRQUN0QyxPQUFPLElBQUlMLE9BQU87WUFDZEMsUUFBUTtZQUNSRyxPQUFPQTtZQUNQQyxRQUFRQTtZQUNSUixXQUFXQTtZQUNYRCxRQUFRLEVBQUU7UUFDZDtJQUNKO0lBQ0FVLEtBQUssU0FBU1QsU0FBUztRQUNuQixPQUFPLElBQUlHLE9BQU87WUFDZEMsUUFBUTtZQUNSSixXQUFXQTtZQUNYRCxRQUFRLEVBQUU7UUFDZDtJQUNKO0FBQ0o7QUFFQSxJQUFJSSxTQUFTLFNBQVNPLE9BQU87SUFDekIsSUFBSSxDQUFDQyxNQUFNLEdBQUdELFFBQVFILEtBQUs7SUFDM0IsSUFBSSxDQUFDSyxPQUFPLEdBQUdGLFFBQVFOLE1BQU07SUFDN0IsSUFBSSxDQUFDUyxTQUFTLEdBQUdILFFBQVFILEtBQUssS0FBS087SUFDbkMsSUFBSSxDQUFDQyxVQUFVLEdBQUdMLFFBQVFWLFNBQVM7SUFDbkMsSUFBSSxDQUFDZ0IsT0FBTyxHQUFHTixRQUFRRixNQUFNO0lBQzdCLElBQUksQ0FBQ1MsT0FBTyxHQUFHUCxRQUFRWCxNQUFNO0FBQ2pDO0FBRUFJLE9BQU9lLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFNBQVNDLElBQUk7SUFDaEMsSUFBSSxJQUFJLENBQUNQLFNBQVMsRUFBRTtRQUNoQixPQUFPLElBQUlWLE9BQU87WUFDZEksT0FBT2EsS0FBSyxJQUFJLENBQUNULE1BQU0sRUFBRSxJQUFJLENBQUNLLE9BQU87WUFDckNaLFFBQVEsSUFBSSxDQUFDUSxPQUFPO1lBQ3BCWixXQUFXLElBQUksQ0FBQ2UsVUFBVTtZQUMxQlAsUUFBUSxJQUFJLENBQUNRLE9BQU87WUFDcEJqQixRQUFRLElBQUksQ0FBQ2tCLE9BQU87UUFDeEI7SUFDSixPQUFPO1FBQ0gsT0FBTyxJQUFJO0lBQ2Y7QUFDSjtBQUVBZCxPQUFPZSxTQUFTLENBQUNHLGVBQWUsR0FBRyxTQUFTckIsU0FBUztJQUNqRCxPQUFPLElBQUlHLE9BQU87UUFDZEksT0FBTyxJQUFJLENBQUNJLE1BQU07UUFDbEJQLFFBQVEsSUFBSSxDQUFDUSxPQUFPO1FBQ3BCWixXQUFXQTtRQUNYUSxRQUFRLElBQUksQ0FBQ1EsT0FBTztRQUNwQmpCLFFBQVEsSUFBSSxDQUFDa0IsT0FBTztJQUN4QjtBQUNKO0FBRUFkLE9BQU9lLFNBQVMsQ0FBQ0ksU0FBUyxHQUFHO0lBQ3pCLE9BQU8sSUFBSSxDQUFDVixPQUFPLEtBQUssYUFBYSxJQUFJLENBQUNBLE9BQU8sS0FBSztBQUMxRDtBQUVBVCxPQUFPZSxTQUFTLENBQUNLLFNBQVMsR0FBRztJQUN6QixPQUFPLElBQUksQ0FBQ1gsT0FBTyxLQUFLO0FBQzVCO0FBRUFULE9BQU9lLFNBQVMsQ0FBQ00sT0FBTyxHQUFHO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDWixPQUFPLEtBQUs7QUFDNUI7QUFFQVQsT0FBT2UsU0FBUyxDQUFDTyxLQUFLLEdBQUc7SUFDckIsT0FBTyxJQUFJLENBQUNiLE9BQU8sS0FBSztBQUM1QjtBQUVBVCxPQUFPZSxTQUFTLENBQUNYLEtBQUssR0FBRztJQUNyQixPQUFPLElBQUksQ0FBQ0ksTUFBTTtBQUN0QjtBQUVBUixPQUFPZSxTQUFTLENBQUNsQixTQUFTLEdBQUc7SUFDekIsT0FBTyxJQUFJLENBQUNlLFVBQVU7QUFDMUI7QUFFQVosT0FBT2UsU0FBUyxDQUFDVixNQUFNLEdBQUc7SUFDdEIsT0FBTyxJQUFJLENBQUNRLE9BQU87QUFDdkI7QUFFQWIsT0FBT2UsU0FBUyxDQUFDbkIsTUFBTSxHQUFHO0lBQ3RCLE9BQU8sSUFBSSxDQUFDa0IsT0FBTztBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvbG9wL2xpYi9wYXJzaW5nLXJlc3VsdHMuanM/Nzg3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmYWlsdXJlOiBmdW5jdGlvbihlcnJvcnMsIHJlbWFpbmluZykge1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWx1cmUgbXVzdCBoYXZlIGVycm9yc1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgICAgICAgICBzdGF0dXM6IFwiZmFpbHVyZVwiLFxuICAgICAgICAgICAgcmVtYWluaW5nOiByZW1haW5pbmcsXG4gICAgICAgICAgICBlcnJvcnM6IGVycm9yc1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcnMsIHJlbWFpbmluZykge1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWx1cmUgbXVzdCBoYXZlIGVycm9yc1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgICAgICAgICBzdGF0dXM6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIHJlbWFpbmluZzogcmVtYWluaW5nLFxuICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBzdWNjZXNzOiBmdW5jdGlvbih2YWx1ZSwgcmVtYWluaW5nLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQoe1xuICAgICAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgcmVtYWluaW5nOiByZW1haW5pbmcsXG4gICAgICAgICAgICBlcnJvcnM6IFtdXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgY3V0OiBmdW5jdGlvbihyZW1haW5pbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQoe1xuICAgICAgICAgICAgc3RhdHVzOiBcImN1dFwiLFxuICAgICAgICAgICAgcmVtYWluaW5nOiByZW1haW5pbmcsXG4gICAgICAgICAgICBlcnJvcnM6IFtdXG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5fdmFsdWUgPSBvcHRpb25zLnZhbHVlO1xuICAgIHRoaXMuX3N0YXR1cyA9IG9wdGlvbnMuc3RhdHVzO1xuICAgIHRoaXMuX2hhc1ZhbHVlID0gb3B0aW9ucy52YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JlbWFpbmluZyA9IG9wdGlvbnMucmVtYWluaW5nO1xuICAgIHRoaXMuX3NvdXJjZSA9IG9wdGlvbnMuc291cmNlO1xuICAgIHRoaXMuX2Vycm9ycyA9IG9wdGlvbnMuZXJyb3JzO1xufTtcblxuUmVzdWx0LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgaWYgKHRoaXMuX2hhc1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzdWx0KHtcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jKHRoaXMuX3ZhbHVlLCB0aGlzLl9zb3VyY2UpLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLl9zdGF0dXMsXG4gICAgICAgICAgICByZW1haW5pbmc6IHRoaXMuX3JlbWFpbmluZyxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5fc291cmNlLFxuICAgICAgICAgICAgZXJyb3JzOiB0aGlzLl9lcnJvcnNcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxuUmVzdWx0LnByb3RvdHlwZS5jaGFuZ2VSZW1haW5pbmcgPSBmdW5jdGlvbihyZW1haW5pbmcpIHtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgICAgIHZhbHVlOiB0aGlzLl92YWx1ZSxcbiAgICAgICAgc3RhdHVzOiB0aGlzLl9zdGF0dXMsXG4gICAgICAgIHJlbWFpbmluZzogcmVtYWluaW5nLFxuICAgICAgICBzb3VyY2U6IHRoaXMuX3NvdXJjZSxcbiAgICAgICAgZXJyb3JzOiB0aGlzLl9lcnJvcnNcbiAgICB9KTtcbn07XG5cblJlc3VsdC5wcm90b3R5cGUuaXNTdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1cyA9PT0gXCJzdWNjZXNzXCIgfHwgdGhpcy5fc3RhdHVzID09PSBcImN1dFwiO1xufTtcblxuUmVzdWx0LnByb3RvdHlwZS5pc0ZhaWx1cmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzID09PSBcImZhaWx1cmVcIjtcbn07XG5cblJlc3VsdC5wcm90b3R5cGUuaXNFcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0dXMgPT09IFwiZXJyb3JcIjtcbn07XG5cblJlc3VsdC5wcm90b3R5cGUuaXNDdXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzID09PSBcImN1dFwiO1xufTtcblxuUmVzdWx0LnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbn07XG5cblJlc3VsdC5wcm90b3R5cGUucmVtYWluaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbWFpbmluZztcbn07XG5cblJlc3VsdC5wcm90b3R5cGUuc291cmNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZTtcbn07XG5cblJlc3VsdC5wcm90b3R5cGUuZXJyb3JzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Vycm9ycztcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImZhaWx1cmUiLCJlcnJvcnMiLCJyZW1haW5pbmciLCJsZW5ndGgiLCJFcnJvciIsIlJlc3VsdCIsInN0YXR1cyIsImVycm9yIiwic3VjY2VzcyIsInZhbHVlIiwic291cmNlIiwiY3V0Iiwib3B0aW9ucyIsIl92YWx1ZSIsIl9zdGF0dXMiLCJfaGFzVmFsdWUiLCJ1bmRlZmluZWQiLCJfcmVtYWluaW5nIiwiX3NvdXJjZSIsIl9lcnJvcnMiLCJwcm90b3R5cGUiLCJtYXAiLCJmdW5jIiwiY2hhbmdlUmVtYWluaW5nIiwiaXNTdWNjZXNzIiwiaXNGYWlsdXJlIiwiaXNFcnJvciIsImlzQ3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/parsing-results.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/regex-tokeniser.js":
/*!**************************************************!*\
  !*** ../node_modules/lop/lib/regex-tokeniser.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Token = __webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/lop/lib/Token.js\");\nvar StringSource = __webpack_require__(/*! ./StringSource */ \"(ssr)/../node_modules/lop/lib/StringSource.js\");\nexports.RegexTokeniser = RegexTokeniser;\nfunction RegexTokeniser(rules) {\n    rules = rules.map(function(rule) {\n        return {\n            name: rule.name,\n            regex: new RegExp(rule.regex.source, \"g\")\n        };\n    });\n    function tokenise(input, description) {\n        var source = new StringSource(input, description);\n        var index = 0;\n        var tokens = [];\n        while(index < input.length){\n            var result = readNextToken(input, index, source);\n            index = result.endIndex;\n            tokens.push(result.token);\n        }\n        tokens.push(endToken(input, source));\n        return tokens;\n    }\n    function readNextToken(string, startIndex, source) {\n        for(var i = 0; i < rules.length; i++){\n            var regex = rules[i].regex;\n            regex.lastIndex = startIndex;\n            var result = regex.exec(string);\n            if (result) {\n                var endIndex = startIndex + result[0].length;\n                if (result.index === startIndex && endIndex > startIndex) {\n                    var value = result[1];\n                    var token = new Token(rules[i].name, value, source.range(startIndex, endIndex));\n                    return {\n                        token: token,\n                        endIndex: endIndex\n                    };\n                }\n            }\n        }\n        var endIndex = startIndex + 1;\n        var token = new Token(\"unrecognisedCharacter\", string.substring(startIndex, endIndex), source.range(startIndex, endIndex));\n        return {\n            token: token,\n            endIndex: endIndex\n        };\n    }\n    function endToken(input, source) {\n        return new Token(\"end\", null, source.range(input.length, input.length));\n    }\n    return {\n        tokenise: tokenise\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvcmVnZXgtdG9rZW5pc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDLHVEQUFTO0FBQzdCLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLHFFQUFnQjtBQUUzQ0Usc0JBQXNCLEdBQUdDO0FBRXpCLFNBQVNBLGVBQWVDLEtBQUs7SUFDekJBLFFBQVFBLE1BQU1DLEdBQUcsQ0FBQyxTQUFTQyxJQUFJO1FBQzNCLE9BQU87WUFDSEMsTUFBTUQsS0FBS0MsSUFBSTtZQUNmQyxPQUFPLElBQUlDLE9BQU9ILEtBQUtFLEtBQUssQ0FBQ0UsTUFBTSxFQUFFO1FBQ3pDO0lBQ0o7SUFFQSxTQUFTQyxTQUFTQyxLQUFLLEVBQUVDLFdBQVc7UUFDaEMsSUFBSUgsU0FBUyxJQUFJVCxhQUFhVyxPQUFPQztRQUNyQyxJQUFJQyxRQUFRO1FBQ1osSUFBSUMsU0FBUyxFQUFFO1FBRWYsTUFBT0QsUUFBUUYsTUFBTUksTUFBTSxDQUFFO1lBQ3pCLElBQUlDLFNBQVNDLGNBQWNOLE9BQU9FLE9BQU9KO1lBQ3pDSSxRQUFRRyxPQUFPRSxRQUFRO1lBQ3ZCSixPQUFPSyxJQUFJLENBQUNILE9BQU9JLEtBQUs7UUFDNUI7UUFFQU4sT0FBT0ssSUFBSSxDQUFDRSxTQUFTVixPQUFPRjtRQUM1QixPQUFPSztJQUNYO0lBRUEsU0FBU0csY0FBY0ssTUFBTSxFQUFFQyxVQUFVLEVBQUVkLE1BQU07UUFDN0MsSUFBSyxJQUFJZSxJQUFJLEdBQUdBLElBQUlyQixNQUFNWSxNQUFNLEVBQUVTLElBQUs7WUFDbkMsSUFBSWpCLFFBQVFKLEtBQUssQ0FBQ3FCLEVBQUUsQ0FBQ2pCLEtBQUs7WUFDMUJBLE1BQU1rQixTQUFTLEdBQUdGO1lBQ2xCLElBQUlQLFNBQVNULE1BQU1tQixJQUFJLENBQUNKO1lBRXhCLElBQUlOLFFBQVE7Z0JBQ1IsSUFBSUUsV0FBV0ssYUFBYVAsTUFBTSxDQUFDLEVBQUUsQ0FBQ0QsTUFBTTtnQkFDNUMsSUFBSUMsT0FBT0gsS0FBSyxLQUFLVSxjQUFjTCxXQUFXSyxZQUFZO29CQUN0RCxJQUFJSSxRQUFRWCxNQUFNLENBQUMsRUFBRTtvQkFDckIsSUFBSUksUUFBUSxJQUFJdEIsTUFDWkssS0FBSyxDQUFDcUIsRUFBRSxDQUFDbEIsSUFBSSxFQUNicUIsT0FDQWxCLE9BQU9tQixLQUFLLENBQUNMLFlBQVlMO29CQUU3QixPQUFPO3dCQUFDRSxPQUFPQTt3QkFBT0YsVUFBVUE7b0JBQVE7Z0JBQzVDO1lBQ0o7UUFDSjtRQUNBLElBQUlBLFdBQVdLLGFBQWE7UUFDNUIsSUFBSUgsUUFBUSxJQUFJdEIsTUFDWix5QkFDQXdCLE9BQU9PLFNBQVMsQ0FBQ04sWUFBWUwsV0FDN0JULE9BQU9tQixLQUFLLENBQUNMLFlBQVlMO1FBRTdCLE9BQU87WUFBQ0UsT0FBT0E7WUFBT0YsVUFBVUE7UUFBUTtJQUM1QztJQUVBLFNBQVNHLFNBQVNWLEtBQUssRUFBRUYsTUFBTTtRQUMzQixPQUFPLElBQUlYLE1BQ1AsT0FDQSxNQUNBVyxPQUFPbUIsS0FBSyxDQUFDakIsTUFBTUksTUFBTSxFQUFFSixNQUFNSSxNQUFNO0lBRS9DO0lBRUEsT0FBTztRQUNITCxVQUFVQTtJQUNkO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldHMtYWVyby1pc28tZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL2xvcC9saWIvcmVnZXgtdG9rZW5pc2VyLmpzP2MwMjkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFRva2VuID0gcmVxdWlyZShcIi4vVG9rZW5cIik7XG52YXIgU3RyaW5nU291cmNlID0gcmVxdWlyZShcIi4vU3RyaW5nU291cmNlXCIpO1xuXG5leHBvcnRzLlJlZ2V4VG9rZW5pc2VyID0gUmVnZXhUb2tlbmlzZXI7XG5cbmZ1bmN0aW9uIFJlZ2V4VG9rZW5pc2VyKHJ1bGVzKSB7XG4gICAgcnVsZXMgPSBydWxlcy5tYXAoZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogcnVsZS5uYW1lLFxuICAgICAgICAgICAgcmVnZXg6IG5ldyBSZWdFeHAocnVsZS5yZWdleC5zb3VyY2UsIFwiZ1wiKVxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIFxuICAgIGZ1bmN0aW9uIHRva2VuaXNlKGlucHV0LCBkZXNjcmlwdGlvbikge1xuICAgICAgICB2YXIgc291cmNlID0gbmV3IFN0cmluZ1NvdXJjZShpbnB1dCwgZGVzY3JpcHRpb24pO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgdG9rZW5zID0gW107XG4gICAgXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlYWROZXh0VG9rZW4oaW5wdXQsIGluZGV4LCBzb3VyY2UpO1xuICAgICAgICAgICAgaW5kZXggPSByZXN1bHQuZW5kSW5kZXg7XG4gICAgICAgICAgICB0b2tlbnMucHVzaChyZXN1bHQudG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0b2tlbnMucHVzaChlbmRUb2tlbihpbnB1dCwgc291cmNlKSk7XG4gICAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZE5leHRUb2tlbihzdHJpbmcsIHN0YXJ0SW5kZXgsIHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmVnZXggPSBydWxlc1tpXS5yZWdleDtcbiAgICAgICAgICAgIHJlZ2V4Lmxhc3RJbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHJlc3VsdFswXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pbmRleCA9PT0gc3RhcnRJbmRleCAmJiBlbmRJbmRleCA+IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0WzFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBuZXcgVG9rZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlc1tpXS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UucmFuZ2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7dG9rZW46IHRva2VuLCBlbmRJbmRleDogZW5kSW5kZXh9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgMTtcbiAgICAgICAgdmFyIHRva2VuID0gbmV3IFRva2VuKFxuICAgICAgICAgICAgXCJ1bnJlY29nbmlzZWRDaGFyYWN0ZXJcIixcbiAgICAgICAgICAgIHN0cmluZy5zdWJzdHJpbmcoc3RhcnRJbmRleCwgZW5kSW5kZXgpLFxuICAgICAgICAgICAgc291cmNlLnJhbmdlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4ge3Rva2VuOiB0b2tlbiwgZW5kSW5kZXg6IGVuZEluZGV4fTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gZW5kVG9rZW4oaW5wdXQsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFxuICAgICAgICAgICAgXCJlbmRcIixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBzb3VyY2UucmFuZ2UoaW5wdXQubGVuZ3RoLCBpbnB1dC5sZW5ndGgpXG4gICAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIHRva2VuaXNlOiB0b2tlbmlzZVxuICAgIH1cbn1cblxuXG4iXSwibmFtZXMiOlsiVG9rZW4iLCJyZXF1aXJlIiwiU3RyaW5nU291cmNlIiwiZXhwb3J0cyIsIlJlZ2V4VG9rZW5pc2VyIiwicnVsZXMiLCJtYXAiLCJydWxlIiwibmFtZSIsInJlZ2V4IiwiUmVnRXhwIiwic291cmNlIiwidG9rZW5pc2UiLCJpbnB1dCIsImRlc2NyaXB0aW9uIiwiaW5kZXgiLCJ0b2tlbnMiLCJsZW5ndGgiLCJyZXN1bHQiLCJyZWFkTmV4dFRva2VuIiwiZW5kSW5kZXgiLCJwdXNoIiwidG9rZW4iLCJlbmRUb2tlbiIsInN0cmluZyIsInN0YXJ0SW5kZXgiLCJpIiwibGFzdEluZGV4IiwiZXhlYyIsInZhbHVlIiwicmFuZ2UiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/regex-tokeniser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/lop/lib/rules.js":
/*!****************************************!*\
  !*** ../node_modules/lop/lib/rules.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _ = __webpack_require__(/*! underscore */ \"(ssr)/../node_modules/underscore/modules/index-all.js\");\nvar options = __webpack_require__(/*! option */ \"(ssr)/../node_modules/option/index.js\");\nvar results = __webpack_require__(/*! ./parsing-results */ \"(ssr)/../node_modules/lop/lib/parsing-results.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/../node_modules/lop/lib/errors.js\");\nvar lazyIterators = __webpack_require__(/*! ./lazy-iterators */ \"(ssr)/../node_modules/lop/lib/lazy-iterators.js\");\nexports.token = function(tokenType, value) {\n    var matchValue = value !== undefined;\n    return function(input) {\n        var token = input.head();\n        if (token && token.name === tokenType && (!matchValue || token.value === value)) {\n            return results.success(token.value, input.tail(), token.source);\n        } else {\n            var expected = describeToken({\n                name: tokenType,\n                value: value\n            });\n            return describeTokenMismatch(input, expected);\n        }\n    };\n};\nexports.tokenOfType = function(tokenType) {\n    return exports.token(tokenType);\n};\nexports.firstOf = function(name, parsers) {\n    if (!_.isArray(parsers)) {\n        parsers = Array.prototype.slice.call(arguments, 1);\n    }\n    return function(input) {\n        return lazyIterators.fromArray(parsers).map(function(parser) {\n            return parser(input);\n        }).filter(function(result) {\n            return result.isSuccess() || result.isError();\n        }).first() || describeTokenMismatch(input, name);\n    };\n};\nexports.then = function(parser, func) {\n    return function(input) {\n        var result = parser(input);\n        if (!result.map) {\n            console.log(result);\n        }\n        return result.map(func);\n    };\n};\nexports.sequence = function() {\n    var parsers = Array.prototype.slice.call(arguments, 0);\n    var rule = function(input) {\n        var result = _.foldl(parsers, function(memo, parser) {\n            var result = memo.result;\n            var hasCut = memo.hasCut;\n            if (!result.isSuccess()) {\n                return {\n                    result: result,\n                    hasCut: hasCut\n                };\n            }\n            var subResult = parser(result.remaining());\n            if (subResult.isCut()) {\n                return {\n                    result: result,\n                    hasCut: true\n                };\n            } else if (subResult.isSuccess()) {\n                var values;\n                if (parser.isCaptured) {\n                    values = result.value().withValue(parser, subResult.value());\n                } else {\n                    values = result.value();\n                }\n                var remaining = subResult.remaining();\n                var source = input.to(remaining);\n                return {\n                    result: results.success(values, remaining, source),\n                    hasCut: hasCut\n                };\n            } else if (hasCut) {\n                return {\n                    result: results.error(subResult.errors(), subResult.remaining()),\n                    hasCut: hasCut\n                };\n            } else {\n                return {\n                    result: subResult,\n                    hasCut: hasCut\n                };\n            }\n        }, {\n            result: results.success(new SequenceValues(), input),\n            hasCut: false\n        }).result;\n        var source = input.to(result.remaining());\n        return result.map(function(values) {\n            return values.withValue(exports.sequence.source, source);\n        });\n    };\n    rule.head = function() {\n        var firstCapture = _.find(parsers, isCapturedRule);\n        return exports.then(rule, exports.sequence.extract(firstCapture));\n    };\n    rule.map = function(func) {\n        return exports.then(rule, function(result) {\n            return func.apply(this, result.toArray());\n        });\n    };\n    function isCapturedRule(subRule) {\n        return subRule.isCaptured;\n    }\n    return rule;\n};\nvar SequenceValues = function(values, valuesArray) {\n    this._values = values || {};\n    this._valuesArray = valuesArray || [];\n};\nSequenceValues.prototype.withValue = function(rule, value) {\n    if (rule.captureName && rule.captureName in this._values) {\n        throw new Error('Cannot add second value for capture \"' + rule.captureName + '\"');\n    } else {\n        var newValues = _.clone(this._values);\n        newValues[rule.captureName] = value;\n        var newValuesArray = this._valuesArray.concat([\n            value\n        ]);\n        return new SequenceValues(newValues, newValuesArray);\n    }\n};\nSequenceValues.prototype.get = function(rule) {\n    if (rule.captureName in this._values) {\n        return this._values[rule.captureName];\n    } else {\n        throw new Error('No value for capture \"' + rule.captureName + '\"');\n    }\n};\nSequenceValues.prototype.toArray = function() {\n    return this._valuesArray;\n};\nexports.sequence.capture = function(rule, name) {\n    var captureRule = function() {\n        return rule.apply(this, arguments);\n    };\n    captureRule.captureName = name;\n    captureRule.isCaptured = true;\n    return captureRule;\n};\nexports.sequence.extract = function(rule) {\n    return function(result) {\n        return result.get(rule);\n    };\n};\nexports.sequence.applyValues = function(func) {\n    // TODO: check captureName doesn't conflict with source or other captures\n    var rules = Array.prototype.slice.call(arguments, 1);\n    return function(result) {\n        var values = rules.map(function(rule) {\n            return result.get(rule);\n        });\n        return func.apply(this, values);\n    };\n};\nexports.sequence.source = {\n    captureName: \"☃source☃\"\n};\nexports.sequence.cut = function() {\n    return function(input) {\n        return results.cut(input);\n    };\n};\nexports.optional = function(rule) {\n    return function(input) {\n        var result = rule(input);\n        if (result.isSuccess()) {\n            return result.map(options.some);\n        } else if (result.isFailure()) {\n            return results.success(options.none, input);\n        } else {\n            return result;\n        }\n    };\n};\nexports.zeroOrMoreWithSeparator = function(rule, separator) {\n    return repeatedWithSeparator(rule, separator, false);\n};\nexports.oneOrMoreWithSeparator = function(rule, separator) {\n    return repeatedWithSeparator(rule, separator, true);\n};\nvar zeroOrMore = exports.zeroOrMore = function(rule) {\n    return function(input) {\n        var values = [];\n        var result;\n        while((result = rule(input)) && result.isSuccess()){\n            input = result.remaining();\n            values.push(result.value());\n        }\n        if (result.isError()) {\n            return result;\n        } else {\n            return results.success(values, input);\n        }\n    };\n};\nexports.oneOrMore = function(rule) {\n    return exports.oneOrMoreWithSeparator(rule, noOpRule);\n};\nfunction noOpRule(input) {\n    return results.success(null, input);\n}\nvar repeatedWithSeparator = function(rule, separator, isOneOrMore) {\n    return function(input) {\n        var result = rule(input);\n        if (result.isSuccess()) {\n            var mainRule = exports.sequence.capture(rule, \"main\");\n            var remainingRule = zeroOrMore(exports.then(exports.sequence(separator, mainRule), exports.sequence.extract(mainRule)));\n            var remainingResult = remainingRule(result.remaining());\n            return results.success([\n                result.value()\n            ].concat(remainingResult.value()), remainingResult.remaining());\n        } else if (isOneOrMore || result.isError()) {\n            return result;\n        } else {\n            return results.success([], input);\n        }\n    };\n};\nexports.leftAssociative = function(leftRule, rightRule, func) {\n    var rights;\n    if (func) {\n        rights = [\n            {\n                func: func,\n                rule: rightRule\n            }\n        ];\n    } else {\n        rights = rightRule;\n    }\n    rights = rights.map(function(right) {\n        return exports.then(right.rule, function(rightValue) {\n            return function(leftValue, source) {\n                return right.func(leftValue, rightValue, source);\n            };\n        });\n    });\n    var repeatedRule = exports.firstOf.apply(null, [\n        \"rules\"\n    ].concat(rights));\n    return function(input) {\n        var start = input;\n        var leftResult = leftRule(input);\n        if (!leftResult.isSuccess()) {\n            return leftResult;\n        }\n        var repeatedResult = repeatedRule(leftResult.remaining());\n        while(repeatedResult.isSuccess()){\n            var remaining = repeatedResult.remaining();\n            var source = start.to(repeatedResult.remaining());\n            var right = repeatedResult.value();\n            leftResult = results.success(right(leftResult.value(), source), remaining, source);\n            repeatedResult = repeatedRule(leftResult.remaining());\n        }\n        if (repeatedResult.isError()) {\n            return repeatedResult;\n        }\n        return leftResult;\n    };\n};\nexports.leftAssociative.firstOf = function() {\n    return Array.prototype.slice.call(arguments, 0);\n};\nexports.nonConsuming = function(rule) {\n    return function(input) {\n        return rule(input).changeRemaining(input);\n    };\n};\nvar describeToken = function(token) {\n    if (token.value) {\n        return token.name + ' \"' + token.value + '\"';\n    } else {\n        return token.name;\n    }\n};\nfunction describeTokenMismatch(input, expected) {\n    var error;\n    var token = input.head();\n    if (token) {\n        error = errors.error({\n            expected: expected,\n            actual: describeToken(token),\n            location: token.source\n        });\n    } else {\n        error = errors.error({\n            expected: expected,\n            actual: \"end of tokens\"\n        });\n    }\n    return results.failure([\n        error\n    ], input);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/lop/lib/rules.js\n");

/***/ })

};
;