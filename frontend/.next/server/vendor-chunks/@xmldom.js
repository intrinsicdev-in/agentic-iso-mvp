/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@xmldom";
exports.ids = ["vendor-chunks/@xmldom"];
exports.modules = {

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js":
/*!*********************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/conventions.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.\n *\n * Works with anything that has a `length` property and index access properties, including NodeList.\n *\n * @template {unknown} T\n * @param {Array<T> | ({length:number, [number]: T})} list\n * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate\n * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,\n * \t\t\t\tallows injecting a custom implementation in tests\n * @returns {T | undefined}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find\n */ function find(list, predicate, ac) {\n    if (ac === undefined) {\n        ac = Array.prototype;\n    }\n    if (list && typeof ac.find === \"function\") {\n        return ac.find.call(list, predicate);\n    }\n    for(var i = 0; i < list.length; i++){\n        if (Object.prototype.hasOwnProperty.call(list, i)) {\n            var item = list[i];\n            if (predicate.call(undefined, item, i, list)) {\n                return item;\n            }\n        }\n    }\n}\n/**\n * \"Shallow freezes\" an object to render it immutable.\n * Uses `Object.freeze` if available,\n * otherwise the immutability is only in the type.\n *\n * Is used to create \"enum like\" objects.\n *\n * @template T\n * @param {T} object the object to freeze\n * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,\n * \t\t\t\tallows to inject custom object constructor for tests\n * @returns {Readonly<T>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n */ function freeze(object, oc) {\n    if (oc === undefined) {\n        oc = Object;\n    }\n    return oc && typeof oc.freeze === \"function\" ? oc.freeze(object) : object;\n}\n/**\n * Since we can not rely on `Object.assign` we provide a simplified version\n * that is sufficient for our needs.\n *\n * @param {Object} target\n * @param {Object | null | undefined} source\n *\n * @returns {Object} target\n * @throws TypeError if target is not an object\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign\n */ function assign(target, source) {\n    if (target === null || typeof target !== \"object\") {\n        throw new TypeError(\"target is not an object\");\n    }\n    for(var key in source){\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\n/**\n * All mime types that are allowed as input to `DOMParser.parseFromString`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec\n * @see DOMParser.prototype.parseFromString\n */ var MIME_TYPE = freeze({\n    /**\n\t * `text/html`, the only mime type that triggers treating an XML document as HTML.\n\t *\n\t * @see DOMParser.SupportedType.isHTML\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec\n\t */ HTML: \"text/html\",\n    /**\n\t * Helper method to check a mime type if it indicates an HTML document\n\t *\n\t * @param {string} [value]\n\t * @returns {boolean}\n\t *\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring \t */ isHTML: function(value) {\n        return value === MIME_TYPE.HTML;\n    },\n    /**\n\t * `application/xml`, the standard mime type for XML documents.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */ XML_APPLICATION: \"application/xml\",\n    /**\n\t * `text/html`, an alias for `application/xml`.\n\t *\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303\n\t * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */ XML_TEXT: \"text/xml\",\n    /**\n\t * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,\n\t * but is parsed as an XML document.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec\n\t * @see https://en.wikipedia.org/wiki/XHTML Wikipedia\n\t */ XML_XHTML_APPLICATION: \"application/xhtml+xml\",\n    /**\n\t * `image/svg+xml`,\n\t *\n\t * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration\n\t * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1\n\t * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia\n\t */ XML_SVG_IMAGE: \"image/svg+xml\"\n});\n/**\n * Namespaces that are used in this code base.\n *\n * @see http://www.w3.org/TR/REC-xml-names\n */ var NAMESPACE = freeze({\n    /**\n\t * The XHTML namespace.\n\t *\n\t * @see http://www.w3.org/1999/xhtml\n\t */ HTML: \"http://www.w3.org/1999/xhtml\",\n    /**\n\t * Checks if `uri` equals `NAMESPACE.HTML`.\n\t *\n\t * @param {string} [uri]\n\t *\n\t * @see NAMESPACE.HTML\n\t */ isHTML: function(uri) {\n        return uri === NAMESPACE.HTML;\n    },\n    /**\n\t * The SVG namespace.\n\t *\n\t * @see http://www.w3.org/2000/svg\n\t */ SVG: \"http://www.w3.org/2000/svg\",\n    /**\n\t * The `xml:` namespace.\n\t *\n\t * @see http://www.w3.org/XML/1998/namespace\n\t */ XML: \"http://www.w3.org/XML/1998/namespace\",\n    /**\n\t * The `xmlns:` namespace\n\t *\n\t * @see https://www.w3.org/2000/xmlns/\n\t */ XMLNS: \"http://www.w3.org/2000/xmlns/\"\n});\nexports.assign = assign;\nexports.find = find;\nexports.freeze = freeze;\nexports.MIME_TYPE = MIME_TYPE;\nexports.NAMESPACE = NAMESPACE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/dom-parser.js":
/*!********************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/dom-parser.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var conventions = __webpack_require__(/*! ./conventions */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\");\nvar dom = __webpack_require__(/*! ./dom */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/dom.js\");\nvar entities = __webpack_require__(/*! ./entities */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/entities.js\");\nvar sax = __webpack_require__(/*! ./sax */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/sax.js\");\nvar DOMImplementation = dom.DOMImplementation;\nvar NAMESPACE = conventions.NAMESPACE;\nvar ParseError = sax.ParseError;\nvar XMLReader = sax.XMLReader;\n/**\n * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:\n *\n * > XML parsed entities are often stored in computer files which,\n * > for editing convenience, are organized into lines.\n * > These lines are typically separated by some combination\n * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).\n * >\n * > To simplify the tasks of applications, the XML processor must behave\n * > as if it normalized all line breaks in external parsed entities (including the document entity)\n * > on input, before parsing, by translating all of the following to a single #xA character:\n * >\n * > 1. the two-character sequence #xD #xA\n * > 2. the two-character sequence #xD #x85\n * > 3. the single character #x85\n * > 4. the single character #x2028\n * > 5. any #xD character that is not immediately followed by #xA or #x85.\n *\n * @param {string} input\n * @returns {string}\n */ function normalizeLineEndings(input) {\n    return input.replace(/\\r[\\n\\u0085]/g, \"\\n\").replace(/[\\r\\u0085\\u2028]/g, \"\\n\");\n}\n/**\n * @typedef Locator\n * @property {number} [columnNumber]\n * @property {number} [lineNumber]\n */ /**\n * @typedef DOMParserOptions\n * @property {DOMHandler} [domBuilder]\n * @property {Function} [errorHandler]\n * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing\n * \t\t\t\t\t\tdefaults to `normalizeLineEndings`\n * @property {Locator} [locator]\n * @property {Record<string, string>} [xmlns]\n *\n * @see normalizeLineEndings\n */ /**\n * The DOMParser interface provides the ability to parse XML or HTML source code\n * from a string into a DOM `Document`.\n *\n * _xmldom is different from the spec in that it allows an `options` parameter,\n * to override the default behavior._\n *\n * @param {DOMParserOptions} [options]\n * @constructor\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization\n */ function DOMParser(options) {\n    this.options = options || {\n        locator: {}\n    };\n}\nDOMParser.prototype.parseFromString = function(source, mimeType) {\n    var options = this.options;\n    var sax = new XMLReader();\n    var domBuilder = options.domBuilder || new DOMHandler(); //contentHandler and LexicalHandler\n    var errorHandler = options.errorHandler;\n    var locator = options.locator;\n    var defaultNSMap = options.xmlns || {};\n    var isHTML = /\\/x?html?$/.test(mimeType); //mimeType.toLowerCase().indexOf('html') > -1;\n    var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;\n    if (locator) {\n        domBuilder.setDocumentLocator(locator);\n    }\n    sax.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);\n    sax.domBuilder = options.domBuilder || domBuilder;\n    if (isHTML) {\n        defaultNSMap[\"\"] = NAMESPACE.HTML;\n    }\n    defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;\n    var normalize = options.normalizeLineEndings || normalizeLineEndings;\n    if (source && typeof source === \"string\") {\n        sax.parse(normalize(source), defaultNSMap, entityMap);\n    } else {\n        sax.errorHandler.error(\"invalid doc source\");\n    }\n    return domBuilder.doc;\n};\nfunction buildErrorHandler(errorImpl, domBuilder, locator) {\n    if (!errorImpl) {\n        if (domBuilder instanceof DOMHandler) {\n            return domBuilder;\n        }\n        errorImpl = domBuilder;\n    }\n    var errorHandler = {};\n    var isCallback = errorImpl instanceof Function;\n    locator = locator || {};\n    function build(key) {\n        var fn = errorImpl[key];\n        if (!fn && isCallback) {\n            fn = errorImpl.length == 2 ? function(msg) {\n                errorImpl(key, msg);\n            } : errorImpl;\n        }\n        errorHandler[key] = fn && function(msg) {\n            fn(\"[xmldom \" + key + \"]\t\" + msg + _locator(locator));\n        } || function() {};\n    }\n    build(\"warning\");\n    build(\"error\");\n    build(\"fatalError\");\n    return errorHandler;\n}\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\n/**\n * +ContentHandler+ErrorHandler\n * +LexicalHandler+EntityResolver2\n * -DeclHandler-DTDHandler\n *\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\n */ function DOMHandler() {\n    this.cdata = false;\n}\nfunction position(locator, node) {\n    node.lineNumber = locator.lineNumber;\n    node.columnNumber = locator.columnNumber;\n}\n/**\n * @see org.xml.sax.ContentHandler#startDocument\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\n */ DOMHandler.prototype = {\n    startDocument: function() {\n        this.doc = new DOMImplementation().createDocument(null, null, null);\n        if (this.locator) {\n            this.doc.documentURI = this.locator.systemId;\n        }\n    },\n    startElement: function(namespaceURI, localName, qName, attrs) {\n        var doc = this.doc;\n        var el = doc.createElementNS(namespaceURI, qName || localName);\n        var len = attrs.length;\n        appendElement(this, el);\n        this.currentElement = el;\n        this.locator && position(this.locator, el);\n        for(var i = 0; i < len; i++){\n            var namespaceURI = attrs.getURI(i);\n            var value = attrs.getValue(i);\n            var qName = attrs.getQName(i);\n            var attr = doc.createAttributeNS(namespaceURI, qName);\n            this.locator && position(attrs.getLocator(i), attr);\n            attr.value = attr.nodeValue = value;\n            el.setAttributeNode(attr);\n        }\n    },\n    endElement: function(namespaceURI, localName, qName) {\n        var current = this.currentElement;\n        var tagName = current.tagName;\n        this.currentElement = current.parentNode;\n    },\n    startPrefixMapping: function(prefix, uri) {},\n    endPrefixMapping: function(prefix) {},\n    processingInstruction: function(target, data) {\n        var ins = this.doc.createProcessingInstruction(target, data);\n        this.locator && position(this.locator, ins);\n        appendElement(this, ins);\n    },\n    ignorableWhitespace: function(ch, start, length) {},\n    characters: function(chars, start, length) {\n        chars = _toString.apply(this, arguments);\n        //console.log(chars)\n        if (chars) {\n            if (this.cdata) {\n                var charNode = this.doc.createCDATASection(chars);\n            } else {\n                var charNode = this.doc.createTextNode(chars);\n            }\n            if (this.currentElement) {\n                this.currentElement.appendChild(charNode);\n            } else if (/^\\s*$/.test(chars)) {\n                this.doc.appendChild(charNode);\n            //process xml\n            }\n            this.locator && position(this.locator, charNode);\n        }\n    },\n    skippedEntity: function(name) {},\n    endDocument: function() {\n        this.doc.normalize();\n    },\n    setDocumentLocator: function(locator) {\n        if (this.locator = locator) {\n            locator.lineNumber = 0;\n        }\n    },\n    //LexicalHandler\n    comment: function(chars, start, length) {\n        chars = _toString.apply(this, arguments);\n        var comm = this.doc.createComment(chars);\n        this.locator && position(this.locator, comm);\n        appendElement(this, comm);\n    },\n    startCDATA: function() {\n        //used in characters() methods\n        this.cdata = true;\n    },\n    endCDATA: function() {\n        this.cdata = false;\n    },\n    startDTD: function(name, publicId, systemId) {\n        var impl = this.doc.implementation;\n        if (impl && impl.createDocumentType) {\n            var dt = impl.createDocumentType(name, publicId, systemId);\n            this.locator && position(this.locator, dt);\n            appendElement(this, dt);\n            this.doc.doctype = dt;\n        }\n    },\n    /**\n\t * @see org.xml.sax.ErrorHandler\n\t * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\n\t */ warning: function(error) {\n        console.warn(\"[xmldom warning]\t\" + error, _locator(this.locator));\n    },\n    error: function(error) {\n        console.error(\"[xmldom error]\t\" + error, _locator(this.locator));\n    },\n    fatalError: function(error) {\n        throw new ParseError(error, this.locator);\n    }\n};\nfunction _locator(l) {\n    if (l) {\n        return \"\\n@\" + (l.systemId || \"\") + \"#[line:\" + l.lineNumber + \",col:\" + l.columnNumber + \"]\";\n    }\n}\nfunction _toString(chars, start, length) {\n    if (typeof chars == \"string\") {\n        return chars.substr(start, length);\n    } else {\n        if (chars.length >= start + length || start) {\n            return new java.lang.String(chars, start, length) + \"\";\n        }\n        return chars;\n    }\n}\n/*\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\n * used method of org.xml.sax.ext.LexicalHandler:\n *  #comment(chars, start, length)\n *  #startCDATA()\n *  #endCDATA()\n *  #startDTD(name, publicId, systemId)\n *\n *\n * IGNORED method of org.xml.sax.ext.LexicalHandler:\n *  #endDTD()\n *  #startEntity(name)\n *  #endEntity(name)\n *\n *\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\n * IGNORED method of org.xml.sax.ext.DeclHandler\n * \t#attributeDecl(eName, aName, type, mode, value)\n *  #elementDecl(name, model)\n *  #externalEntityDecl(name, publicId, systemId)\n *  #internalEntityDecl(name, value)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\n * IGNORED method of org.xml.sax.EntityResolver2\n *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\n *  #resolveEntity(publicId, systemId)\n *  #getExternalSubset(name, baseURI)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\n * IGNORED method of org.xml.sax.DTDHandler\n *  #notationDecl(name, publicId, systemId) {};\n *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\n */ \"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g, function(key) {\n    DOMHandler.prototype[key] = function() {\n        return null;\n    };\n});\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */ function appendElement(hander, node) {\n    if (!hander.currentElement) {\n        hander.doc.appendChild(node);\n    } else {\n        hander.currentElement.appendChild(node);\n    }\n} //appendChild and setAttributeNS are preformance key\nexports.__DOMHandler = DOMHandler;\nexports.normalizeLineEndings = normalizeLineEndings;\nexports.DOMParser = DOMParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/dom-parser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/dom.js":
/*!*************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/dom.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var conventions = __webpack_require__(/*! ./conventions */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\");\nvar find = conventions.find;\nvar NAMESPACE = conventions.NAMESPACE;\n/**\n * A prerequisite for `[].filter`, to drop elements that are empty\n * @param {string} input\n * @returns {boolean}\n */ function notEmptyString(input) {\n    return input !== \"\";\n}\n/**\n * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * @param {string} input\n * @returns {string[]} (can be empty)\n */ function splitOnASCIIWhitespace(input) {\n    // U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE\n    return input ? input.split(/[\\t\\n\\f\\r ]+/).filter(notEmptyString) : [];\n}\n/**\n * Adds element as a key to current if it is not already present.\n *\n * @param {Record<string, boolean | undefined>} current\n * @param {string} element\n * @returns {Record<string, boolean | undefined>}\n */ function orderedSetReducer(current, element) {\n    if (!current.hasOwnProperty(element)) {\n        current[element] = true;\n    }\n    return current;\n}\n/**\n * @see https://infra.spec.whatwg.org/#ordered-set\n * @param {string} input\n * @returns {string[]}\n */ function toOrderedSet(input) {\n    if (!input) return [];\n    var list = splitOnASCIIWhitespace(input);\n    return Object.keys(list.reduce(orderedSetReducer, {}));\n}\n/**\n * Uses `list.indexOf` to implement something like `Array.prototype.includes`,\n * which we can not rely on being available.\n *\n * @param {any[]} list\n * @returns {function(any): boolean}\n */ function arrayIncludes(list) {\n    return function(element) {\n        return list && list.indexOf(element) !== -1;\n    };\n}\nfunction copy(src, dest) {\n    for(var p in src){\n        if (Object.prototype.hasOwnProperty.call(src, p)) {\n            dest[p] = src[p];\n        }\n    }\n}\n/**\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n */ function _extends(Class, Super) {\n    var pt = Class.prototype;\n    if (!(pt instanceof Super)) {\n        function t() {}\n        ;\n        t.prototype = Super.prototype;\n        t = new t();\n        copy(pt, t);\n        Class.prototype = pt = t;\n    }\n    if (pt.constructor != Class) {\n        if (typeof Class != \"function\") {\n            console.error(\"unknown Class:\" + Class);\n        }\n        pt.constructor = Class;\n    }\n}\n// Node Types\nvar NodeType = {};\nvar ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;\nvar ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;\nvar TEXT_NODE = NodeType.TEXT_NODE = 3;\nvar CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;\nvar ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;\nvar ENTITY_NODE = NodeType.ENTITY_NODE = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE = NodeType.COMMENT_NODE = 8;\nvar DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;\nvar DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;\nvar DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;\nvar NOTATION_NODE = NodeType.NOTATION_NODE = 12;\n// ExceptionCode\nvar ExceptionCode = {};\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = \"Index size error\", 1);\nvar DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = \"DOMString size error\", 2);\nvar HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = \"Hierarchy request error\", 3);\nvar WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = \"Wrong document\", 4);\nvar INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = \"Invalid character\", 5);\nvar NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = \"No data allowed\", 6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = \"No modification allowed\", 7);\nvar NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = \"Not found\", 8);\nvar NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = \"Not supported\", 9);\nvar INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = \"Attribute in use\", 10);\n//level2\nvar INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = \"Invalid state\", 11);\nvar SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = \"Syntax error\", 12);\nvar INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = \"Invalid modification\", 13);\nvar NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = \"Invalid namespace\", 14);\nvar INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = \"Invalid access\", 15);\n/**\n * DOM Level 2\n * Object DOMException\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n */ function DOMException(code, message) {\n    if (message instanceof Error) {\n        var error = message;\n    } else {\n        error = this;\n        Error.call(this, ExceptionMessage[code]);\n        this.message = ExceptionMessage[code];\n        if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n    }\n    error.code = code;\n    if (message) this.message = this.message + \": \" + message;\n    return error;\n}\n;\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode, DOMException);\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n * The items in the NodeList are accessible via an integral index, starting from 0.\n */ function NodeList() {}\n;\nNodeList.prototype = {\n    /**\n\t * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n\t * @standard level1\n\t */ length: 0,\n    /**\n\t * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n\t * @standard level1\n\t * @param index  unsigned long\n\t *   Index into the collection.\n\t * @return Node\n\t * \tThe node at the indexth position in the NodeList, or null if that is not a valid index.\n\t */ item: function(index) {\n        return index >= 0 && index < this.length ? this[index] : null;\n    },\n    toString: function(isHTML, nodeFilter) {\n        for(var buf = [], i = 0; i < this.length; i++){\n            serializeToString(this[i], buf, isHTML, nodeFilter);\n        }\n        return buf.join(\"\");\n    },\n    /**\n\t * @private\n\t * @param {function (Node):boolean} predicate\n\t * @returns {Node[]}\n\t */ filter: function(predicate) {\n        return Array.prototype.filter.call(this, predicate);\n    },\n    /**\n\t * @private\n\t * @param {Node} item\n\t * @returns {number}\n\t */ indexOf: function(item) {\n        return Array.prototype.indexOf.call(this, item);\n    }\n};\nfunction LiveNodeList(node, refresh) {\n    this._node = node;\n    this._refresh = refresh;\n    _updateLiveList(this);\n}\nfunction _updateLiveList(list) {\n    var inc = list._node._inc || list._node.ownerDocument._inc;\n    if (list._inc !== inc) {\n        var ls = list._refresh(list._node);\n        __set__(list, \"length\", ls.length);\n        if (!list.$$length || ls.length < list.$$length) {\n            for(var i = ls.length; (i in list); i++){\n                if (Object.prototype.hasOwnProperty.call(list, i)) {\n                    delete list[i];\n                }\n            }\n        }\n        copy(ls, list);\n        list._inc = inc;\n    }\n}\nLiveNodeList.prototype.item = function(i) {\n    _updateLiveList(this);\n    return this[i] || null;\n};\n_extends(LiveNodeList, NodeList);\n/**\n * Objects implementing the NamedNodeMap interface are used\n * to represent collections of nodes that can be accessed by name.\n * Note that NamedNodeMap does not inherit from NodeList;\n * NamedNodeMaps are not maintained in any particular order.\n * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,\n * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,\n * and does not imply that the DOM specifies an order to these Nodes.\n * NamedNodeMap objects in the DOM are live.\n * used for attributes or DocumentType entities\n */ function NamedNodeMap() {}\n;\nfunction _findNodeIndex(list, node) {\n    var i = list.length;\n    while(i--){\n        if (list[i] === node) {\n            return i;\n        }\n    }\n}\nfunction _addNamedNode(el, list, newAttr, oldAttr) {\n    if (oldAttr) {\n        list[_findNodeIndex(list, oldAttr)] = newAttr;\n    } else {\n        list[list.length++] = newAttr;\n    }\n    if (el) {\n        newAttr.ownerElement = el;\n        var doc = el.ownerDocument;\n        if (doc) {\n            oldAttr && _onRemoveAttribute(doc, el, oldAttr);\n            _onAddAttribute(doc, el, newAttr);\n        }\n    }\n}\nfunction _removeNamedNode(el, list, attr) {\n    //console.log('remove attr:'+attr)\n    var i = _findNodeIndex(list, attr);\n    if (i >= 0) {\n        var lastIndex = list.length - 1;\n        while(i < lastIndex){\n            list[i] = list[++i];\n        }\n        list.length = lastIndex;\n        if (el) {\n            var doc = el.ownerDocument;\n            if (doc) {\n                _onRemoveAttribute(doc, el, attr);\n                attr.ownerElement = null;\n            }\n        }\n    } else {\n        throw new DOMException(NOT_FOUND_ERR, new Error(el.tagName + \"@\" + attr));\n    }\n}\nNamedNodeMap.prototype = {\n    length: 0,\n    item: NodeList.prototype.item,\n    getNamedItem: function(key) {\n        //\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n        //\t\t\treturn null;\n        //\t\t}\n        //console.log()\n        var i = this.length;\n        while(i--){\n            var attr = this[i];\n            //console.log(attr.nodeName,key)\n            if (attr.nodeName == key) {\n                return attr;\n            }\n        }\n    },\n    setNamedItem: function(attr) {\n        var el = attr.ownerElement;\n        if (el && el != this._ownerElement) {\n            throw new DOMException(INUSE_ATTRIBUTE_ERR);\n        }\n        var oldAttr = this.getNamedItem(attr.nodeName);\n        _addNamedNode(this._ownerElement, this, attr, oldAttr);\n        return oldAttr;\n    },\n    /* returns Node */ setNamedItemNS: function(attr) {\n        var el = attr.ownerElement, oldAttr;\n        if (el && el != this._ownerElement) {\n            throw new DOMException(INUSE_ATTRIBUTE_ERR);\n        }\n        oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);\n        _addNamedNode(this._ownerElement, this, attr, oldAttr);\n        return oldAttr;\n    },\n    /* returns Node */ removeNamedItem: function(key) {\n        var attr = this.getNamedItem(key);\n        _removeNamedNode(this._ownerElement, this, attr);\n        return attr;\n    },\n    //for level2\n    removeNamedItemNS: function(namespaceURI, localName) {\n        var attr = this.getNamedItemNS(namespaceURI, localName);\n        _removeNamedNode(this._ownerElement, this, attr);\n        return attr;\n    },\n    getNamedItemNS: function(namespaceURI, localName) {\n        var i = this.length;\n        while(i--){\n            var node = this[i];\n            if (node.localName == localName && node.namespaceURI == namespaceURI) {\n                return node;\n            }\n        }\n        return null;\n    }\n};\n/**\n * The DOMImplementation interface represents an object providing methods\n * which are not dependent on any particular document.\n * Such an object is returned by the `Document.implementation` property.\n *\n * __The individual methods describe the differences compared to the specs.__\n *\n * @constructor\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN\n * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)\n * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core\n * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core\n * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard\n */ function DOMImplementation() {}\nDOMImplementation.prototype = {\n    /**\n\t * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.\n\t * The different implementations fairly diverged in what kind of features were reported.\n\t * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.\n\t *\n\t * @deprecated It is deprecated and modern browsers return true in all cases.\n\t *\n\t * @param {string} feature\n\t * @param {string} [version]\n\t * @returns {boolean} always true\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN\n\t * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard\n\t */ hasFeature: function(feature, version) {\n        return true;\n    },\n    /**\n\t * Creates an XML Document object of the specified type with its document element.\n\t *\n\t * __It behaves slightly different from the description in the living standard__:\n\t * - There is no interface/class `XMLDocument`, it returns a `Document` instance.\n\t * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.\n\t * - this implementation is not validating names or qualified names\n\t *   (when parsing XML strings, the SAX parser takes care of that)\n\t *\n\t * @param {string|null} namespaceURI\n\t * @param {string} qualifiedName\n\t * @param {DocumentType=null} doctype\n\t * @returns {Document}\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core\n\t *\n\t * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\n\t * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\n\t * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\n\t */ createDocument: function(namespaceURI, qualifiedName, doctype) {\n        var doc = new Document();\n        doc.implementation = this;\n        doc.childNodes = new NodeList();\n        doc.doctype = doctype || null;\n        if (doctype) {\n            doc.appendChild(doctype);\n        }\n        if (qualifiedName) {\n            var root = doc.createElementNS(namespaceURI, qualifiedName);\n            doc.appendChild(root);\n        }\n        return doc;\n    },\n    /**\n\t * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.\n\t *\n\t * __This behavior is slightly different from the in the specs__:\n\t * - this implementation is not validating names or qualified names\n\t *   (when parsing XML strings, the SAX parser takes care of that)\n\t *\n\t * @param {string} qualifiedName\n\t * @param {string} [publicId]\n\t * @param {string} [systemId]\n\t * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation\n\t * \t\t\t\t  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard\n\t *\n\t * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\n\t * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\n\t * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\n\t */ createDocumentType: function(qualifiedName, publicId, systemId) {\n        var node = new DocumentType();\n        node.name = qualifiedName;\n        node.nodeName = qualifiedName;\n        node.publicId = publicId || \"\";\n        node.systemId = systemId || \"\";\n        return node;\n    }\n};\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n */ function Node() {}\n;\nNode.prototype = {\n    firstChild: null,\n    lastChild: null,\n    previousSibling: null,\n    nextSibling: null,\n    attributes: null,\n    parentNode: null,\n    childNodes: null,\n    ownerDocument: null,\n    nodeValue: null,\n    namespaceURI: null,\n    prefix: null,\n    localName: null,\n    // Modified in DOM Level 2:\n    insertBefore: function(newChild, refChild) {\n        return _insertBefore(this, newChild, refChild);\n    },\n    replaceChild: function(newChild, oldChild) {\n        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\n        if (oldChild) {\n            this.removeChild(oldChild);\n        }\n    },\n    removeChild: function(oldChild) {\n        return _removeChild(this, oldChild);\n    },\n    appendChild: function(newChild) {\n        return this.insertBefore(newChild, null);\n    },\n    hasChildNodes: function() {\n        return this.firstChild != null;\n    },\n    cloneNode: function(deep) {\n        return cloneNode(this.ownerDocument || this, this, deep);\n    },\n    // Modified in DOM Level 2:\n    normalize: function() {\n        var child = this.firstChild;\n        while(child){\n            var next = child.nextSibling;\n            if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {\n                this.removeChild(next);\n                child.appendData(next.data);\n            } else {\n                child.normalize();\n                child = next;\n            }\n        }\n    },\n    // Introduced in DOM Level 2:\n    isSupported: function(feature, version) {\n        return this.ownerDocument.implementation.hasFeature(feature, version);\n    },\n    // Introduced in DOM Level 2:\n    hasAttributes: function() {\n        return this.attributes.length > 0;\n    },\n    /**\n\t * Look up the prefix associated to the given namespace URI, starting from this node.\n\t * **The default namespace declarations are ignored by this method.**\n\t * See Namespace Prefix Lookup for details on the algorithm used by this method.\n\t *\n\t * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._\n\t *\n\t * @param {string | null} namespaceURI\n\t * @returns {string | null}\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo\n\t * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix\n\t * @see https://github.com/xmldom/xmldom/issues/322\n\t */ lookupPrefix: function(namespaceURI) {\n        var el = this;\n        while(el){\n            var map = el._nsMap;\n            //console.dir(map)\n            if (map) {\n                for(var n in map){\n                    if (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) {\n                        return n;\n                    }\n                }\n            }\n            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n        }\n        return null;\n    },\n    // Introduced in DOM Level 3:\n    lookupNamespaceURI: function(prefix) {\n        var el = this;\n        while(el){\n            var map = el._nsMap;\n            //console.dir(map)\n            if (map) {\n                if (Object.prototype.hasOwnProperty.call(map, prefix)) {\n                    return map[prefix];\n                }\n            }\n            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n        }\n        return null;\n    },\n    // Introduced in DOM Level 3:\n    isDefaultNamespace: function(namespaceURI) {\n        var prefix = this.lookupPrefix(namespaceURI);\n        return prefix == null;\n    }\n};\nfunction _xmlEncoder(c) {\n    return c == \"<\" && \"&lt;\" || c == \">\" && \"&gt;\" || c == \"&\" && \"&amp;\" || c == '\"' && \"&quot;\" || \"&#\" + c.charCodeAt() + \";\";\n}\ncopy(NodeType, Node);\ncopy(NodeType, Node.prototype);\n/**\n * @param callback return true for continue,false for break\n * @return boolean true: break visit;\n */ function _visitNode(node, callback) {\n    if (callback(node)) {\n        return true;\n    }\n    if (node = node.firstChild) {\n        do {\n            if (_visitNode(node, callback)) {\n                return true;\n            }\n        }while (node = node.nextSibling);\n    }\n}\nfunction Document() {\n    this.ownerDocument = this;\n}\nfunction _onAddAttribute(doc, el, newAttr) {\n    doc && doc._inc++;\n    var ns = newAttr.namespaceURI;\n    if (ns === NAMESPACE.XMLNS) {\n        //update namespace\n        el._nsMap[newAttr.prefix ? newAttr.localName : \"\"] = newAttr.value;\n    }\n}\nfunction _onRemoveAttribute(doc, el, newAttr, remove) {\n    doc && doc._inc++;\n    var ns = newAttr.namespaceURI;\n    if (ns === NAMESPACE.XMLNS) {\n        //update namespace\n        delete el._nsMap[newAttr.prefix ? newAttr.localName : \"\"];\n    }\n}\n/**\n * Updates `el.childNodes`, updating the indexed items and it's `length`.\n * Passing `newChild` means it will be appended.\n * Otherwise it's assumed that an item has been removed,\n * and `el.firstNode` and it's `.nextSibling` are used\n * to walk the current list of child nodes.\n *\n * @param {Document} doc\n * @param {Node} el\n * @param {Node} [newChild]\n * @private\n */ function _onUpdateChild(doc, el, newChild) {\n    if (doc && doc._inc) {\n        doc._inc++;\n        //update childNodes\n        var cs = el.childNodes;\n        if (newChild) {\n            cs[cs.length++] = newChild;\n        } else {\n            var child = el.firstChild;\n            var i = 0;\n            while(child){\n                cs[i++] = child;\n                child = child.nextSibling;\n            }\n            cs.length = i;\n            delete cs[cs.length];\n        }\n    }\n}\n/**\n * Removes the connections between `parentNode` and `child`\n * and any existing `child.previousSibling` or `child.nextSibling`.\n *\n * @see https://github.com/xmldom/xmldom/issues/135\n * @see https://github.com/xmldom/xmldom/issues/145\n *\n * @param {Node} parentNode\n * @param {Node} child\n * @returns {Node} the child that was removed.\n * @private\n */ function _removeChild(parentNode, child) {\n    var previous = child.previousSibling;\n    var next = child.nextSibling;\n    if (previous) {\n        previous.nextSibling = next;\n    } else {\n        parentNode.firstChild = next;\n    }\n    if (next) {\n        next.previousSibling = previous;\n    } else {\n        parentNode.lastChild = previous;\n    }\n    child.parentNode = null;\n    child.previousSibling = null;\n    child.nextSibling = null;\n    _onUpdateChild(parentNode.ownerDocument, parentNode);\n    return child;\n}\n/**\n * Returns `true` if `node` can be a parent for insertion.\n * @param {Node} node\n * @returns {boolean}\n */ function hasValidParentNodeType(node) {\n    return node && (node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE);\n}\n/**\n * Returns `true` if `node` can be inserted according to it's `nodeType`.\n * @param {Node} node\n * @returns {boolean}\n */ function hasInsertableNodeType(node) {\n    return node && (isElementNode(node) || isTextNode(node) || isDocTypeNode(node) || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.COMMENT_NODE || node.nodeType === Node.PROCESSING_INSTRUCTION_NODE);\n}\n/**\n * Returns true if `node` is a DOCTYPE node\n * @param {Node} node\n * @returns {boolean}\n */ function isDocTypeNode(node) {\n    return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;\n}\n/**\n * Returns true if the node is an element\n * @param {Node} node\n * @returns {boolean}\n */ function isElementNode(node) {\n    return node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Returns true if `node` is a text node\n * @param {Node} node\n * @returns {boolean}\n */ function isTextNode(node) {\n    return node && node.nodeType === Node.TEXT_NODE;\n}\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Document} doc The document node\n * @param {Node} child the node that would become the nextSibling if the element would be inserted\n * @returns {boolean} `true` if an element can be inserted before child\n * @private\n * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function isElementInsertionPossible(doc, child) {\n    var parentChildNodes = doc.childNodes || [];\n    if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {\n        return false;\n    }\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Node} doc The document node\n * @param {Node} child the node that would become the nextSibling if the element would be inserted\n * @returns {boolean} `true` if an element can be inserted before child\n * @private\n * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function isElementReplacementPossible(doc, child) {\n    var parentChildNodes = doc.childNodes || [];\n    function hasElementChildThatIsNotChild(node) {\n        return isElementNode(node) && node !== child;\n    }\n    if (find(parentChildNodes, hasElementChildThatIsNotChild)) {\n        return false;\n    }\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n/**\n * @private\n * Steps 1-5 of the checks before inserting and before replacing a child are the same.\n *\n * @param {Node} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node=} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreInsertionValidity1to5(parent, node, child) {\n    // 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a \"HierarchyRequestError\" DOMException.\n    if (!hasValidParentNodeType(parent)) {\n        throw new DOMException(HIERARCHY_REQUEST_ERR, \"Unexpected parent node type \" + parent.nodeType);\n    }\n    // 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a \"HierarchyRequestError\" DOMException.\n    // not implemented!\n    // 3. If `child` is non-null and its parent is not `parent`, then throw a \"NotFoundError\" DOMException.\n    if (child && child.parentNode !== parent) {\n        throw new DOMException(NOT_FOUND_ERR, \"child not in parent\");\n    }\n    if (// 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a \"HierarchyRequestError\" DOMException.\n    !hasInsertableNodeType(node) || // 5. If either `node` is a Text node and `parent` is a document,\n    // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0\n    // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)\n    // or `node` is a doctype and `parent` is not a document, then throw a \"HierarchyRequestError\" DOMException.\n    isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE) {\n        throw new DOMException(HIERARCHY_REQUEST_ERR, \"Unexpected node type \" + node.nodeType + \" for parent node type \" + parent.nodeType);\n    }\n}\n/**\n * @private\n * Step 6 of the checks before inserting and before replacing a child are different.\n *\n * @param {Document} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreInsertionValidityInDocument(parent, node, child) {\n    var parentChildNodes = parent.childNodes || [];\n    var nodeChildNodes = node.childNodes || [];\n    // DocumentFragment\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n        var nodeChildElements = nodeChildNodes.filter(isElementNode);\n        // If node has more than one element child or has a Text node child.\n        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"More than one element or text in fragment\");\n        }\n        // Otherwise, if `node` has one element child and either `parent` has an element child,\n        // `child` is a doctype, or `child` is non-null and a doctype is following `child`.\n        if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Element in fragment can not be inserted before doctype\");\n        }\n    }\n    // Element\n    if (isElementNode(node)) {\n        // `parent` has an element child, `child` is a doctype,\n        // or `child` is non-null and a doctype is following `child`.\n        if (!isElementInsertionPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one element can be added and only after doctype\");\n        }\n    }\n    // DocumentType\n    if (isDocTypeNode(node)) {\n        // `parent` has a doctype child,\n        if (find(parentChildNodes, isDocTypeNode)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one doctype is allowed\");\n        }\n        var parentElementChild = find(parentChildNodes, isElementNode);\n        // `child` is non-null and an element is preceding `child`,\n        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Doctype can only be inserted before an element\");\n        }\n        // or `child` is null and `parent` has an element child.\n        if (!child && parentElementChild) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Doctype can not be appended since element is present\");\n        }\n    }\n}\n/**\n * @private\n * Step 6 of the checks before inserting and before replacing a child are different.\n *\n * @param {Document} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreReplacementValidityInDocument(parent, node, child) {\n    var parentChildNodes = parent.childNodes || [];\n    var nodeChildNodes = node.childNodes || [];\n    // DocumentFragment\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n        var nodeChildElements = nodeChildNodes.filter(isElementNode);\n        // If `node` has more than one element child or has a Text node child.\n        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"More than one element or text in fragment\");\n        }\n        // Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.\n        if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Element in fragment can not be inserted before doctype\");\n        }\n    }\n    // Element\n    if (isElementNode(node)) {\n        // `parent` has an element child that is not `child` or a doctype is following `child`.\n        if (!isElementReplacementPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one element can be added and only after doctype\");\n        }\n    }\n    // DocumentType\n    if (isDocTypeNode(node)) {\n        function hasDoctypeChildThatIsNotChild(node) {\n            return isDocTypeNode(node) && node !== child;\n        }\n        // `parent` has a doctype child that is not `child`,\n        if (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one doctype is allowed\");\n        }\n        var parentElementChild = find(parentChildNodes, isElementNode);\n        // or an element is preceding `child`.\n        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Doctype can only be inserted before an element\");\n        }\n    }\n}\n/**\n * @private\n * @param {Node} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node=} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function _insertBefore(parent, node, child, _inDocumentAssertion) {\n    // To ensure pre-insertion validity of a node into a parent before a child, run these steps:\n    assertPreInsertionValidity1to5(parent, node, child);\n    // If parent is a document, and any of the statements below, switched on the interface node implements,\n    // are true, then throw a \"HierarchyRequestError\" DOMException.\n    if (parent.nodeType === Node.DOCUMENT_NODE) {\n        (_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);\n    }\n    var cp = node.parentNode;\n    if (cp) {\n        cp.removeChild(node); //remove and update\n    }\n    if (node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n        var newFirst = node.firstChild;\n        if (newFirst == null) {\n            return node;\n        }\n        var newLast = node.lastChild;\n    } else {\n        newFirst = newLast = node;\n    }\n    var pre = child ? child.previousSibling : parent.lastChild;\n    newFirst.previousSibling = pre;\n    newLast.nextSibling = child;\n    if (pre) {\n        pre.nextSibling = newFirst;\n    } else {\n        parent.firstChild = newFirst;\n    }\n    if (child == null) {\n        parent.lastChild = newLast;\n    } else {\n        child.previousSibling = newLast;\n    }\n    do {\n        newFirst.parentNode = parent;\n    }while (newFirst !== newLast && (newFirst = newFirst.nextSibling));\n    _onUpdateChild(parent.ownerDocument || parent, parent);\n    //console.log(parent.lastChild.nextSibling == null)\n    if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {\n        node.firstChild = node.lastChild = null;\n    }\n    return node;\n}\n/**\n * Appends `newChild` to `parentNode`.\n * If `newChild` is already connected to a `parentNode` it is first removed from it.\n *\n * @see https://github.com/xmldom/xmldom/issues/135\n * @see https://github.com/xmldom/xmldom/issues/145\n * @param {Node} parentNode\n * @param {Node} newChild\n * @returns {Node}\n * @private\n */ function _appendSingleChild(parentNode, newChild) {\n    if (newChild.parentNode) {\n        newChild.parentNode.removeChild(newChild);\n    }\n    newChild.parentNode = parentNode;\n    newChild.previousSibling = parentNode.lastChild;\n    newChild.nextSibling = null;\n    if (newChild.previousSibling) {\n        newChild.previousSibling.nextSibling = newChild;\n    } else {\n        parentNode.firstChild = newChild;\n    }\n    parentNode.lastChild = newChild;\n    _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);\n    return newChild;\n}\nDocument.prototype = {\n    //implementation : null,\n    nodeName: \"#document\",\n    nodeType: DOCUMENT_NODE,\n    /**\n\t * The DocumentType node of the document.\n\t *\n\t * @readonly\n\t * @type DocumentType\n\t */ doctype: null,\n    documentElement: null,\n    _inc: 1,\n    insertBefore: function(newChild, refChild) {\n        if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n            var child = newChild.firstChild;\n            while(child){\n                var next = child.nextSibling;\n                this.insertBefore(child, refChild);\n                child = next;\n            }\n            return newChild;\n        }\n        _insertBefore(this, newChild, refChild);\n        newChild.ownerDocument = this;\n        if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {\n            this.documentElement = newChild;\n        }\n        return newChild;\n    },\n    removeChild: function(oldChild) {\n        if (this.documentElement == oldChild) {\n            this.documentElement = null;\n        }\n        return _removeChild(this, oldChild);\n    },\n    replaceChild: function(newChild, oldChild) {\n        //raises\n        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\n        newChild.ownerDocument = this;\n        if (oldChild) {\n            this.removeChild(oldChild);\n        }\n        if (isElementNode(newChild)) {\n            this.documentElement = newChild;\n        }\n    },\n    // Introduced in DOM Level 2:\n    importNode: function(importedNode, deep) {\n        return importNode(this, importedNode, deep);\n    },\n    // Introduced in DOM Level 2:\n    getElementById: function(id) {\n        var rtv = null;\n        _visitNode(this.documentElement, function(node) {\n            if (node.nodeType == ELEMENT_NODE) {\n                if (node.getAttribute(\"id\") == id) {\n                    rtv = node;\n                    return true;\n                }\n            }\n        });\n        return rtv;\n    },\n    /**\n\t * The `getElementsByClassName` method of `Document` interface returns an array-like object\n\t * of all child elements which have **all** of the given class name(s).\n\t *\n\t * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.\n\t *\n\t *\n\t * Warning: This is a live LiveNodeList.\n\t * Changes in the DOM will reflect in the array as the changes occur.\n\t * If an element selected by this array no longer qualifies for the selector,\n\t * it will automatically be removed. Be aware of this for iteration purposes.\n\t *\n\t * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName\n\t * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname\n\t */ getElementsByClassName: function(classNames) {\n        var classNamesSet = toOrderedSet(classNames);\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            if (classNamesSet.length > 0) {\n                _visitNode(base.documentElement, function(node) {\n                    if (node !== base && node.nodeType === ELEMENT_NODE) {\n                        var nodeClassNames = node.getAttribute(\"class\");\n                        // can be null if the attribute does not exist\n                        if (nodeClassNames) {\n                            // before splitting and iterating just compare them for the most common case\n                            var matches = classNames === nodeClassNames;\n                            if (!matches) {\n                                var nodeClassNamesSet = toOrderedSet(nodeClassNames);\n                                matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));\n                            }\n                            if (matches) {\n                                ls.push(node);\n                            }\n                        }\n                    }\n                });\n            }\n            return ls;\n        });\n    },\n    //document factory method:\n    createElement: function(tagName) {\n        var node = new Element();\n        node.ownerDocument = this;\n        node.nodeName = tagName;\n        node.tagName = tagName;\n        node.localName = tagName;\n        node.childNodes = new NodeList();\n        var attrs = node.attributes = new NamedNodeMap();\n        attrs._ownerElement = node;\n        return node;\n    },\n    createDocumentFragment: function() {\n        var node = new DocumentFragment();\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        return node;\n    },\n    createTextNode: function(data) {\n        var node = new Text();\n        node.ownerDocument = this;\n        node.appendData(data);\n        return node;\n    },\n    createComment: function(data) {\n        var node = new Comment();\n        node.ownerDocument = this;\n        node.appendData(data);\n        return node;\n    },\n    createCDATASection: function(data) {\n        var node = new CDATASection();\n        node.ownerDocument = this;\n        node.appendData(data);\n        return node;\n    },\n    createProcessingInstruction: function(target, data) {\n        var node = new ProcessingInstruction();\n        node.ownerDocument = this;\n        node.tagName = node.nodeName = node.target = target;\n        node.nodeValue = node.data = data;\n        return node;\n    },\n    createAttribute: function(name) {\n        var node = new Attr();\n        node.ownerDocument = this;\n        node.name = name;\n        node.nodeName = name;\n        node.localName = name;\n        node.specified = true;\n        return node;\n    },\n    createEntityReference: function(name) {\n        var node = new EntityReference();\n        node.ownerDocument = this;\n        node.nodeName = name;\n        return node;\n    },\n    // Introduced in DOM Level 2:\n    createElementNS: function(namespaceURI, qualifiedName) {\n        var node = new Element();\n        var pl = qualifiedName.split(\":\");\n        var attrs = node.attributes = new NamedNodeMap();\n        node.childNodes = new NodeList();\n        node.ownerDocument = this;\n        node.nodeName = qualifiedName;\n        node.tagName = qualifiedName;\n        node.namespaceURI = namespaceURI;\n        if (pl.length == 2) {\n            node.prefix = pl[0];\n            node.localName = pl[1];\n        } else {\n            //el.prefix = null;\n            node.localName = qualifiedName;\n        }\n        attrs._ownerElement = node;\n        return node;\n    },\n    // Introduced in DOM Level 2:\n    createAttributeNS: function(namespaceURI, qualifiedName) {\n        var node = new Attr();\n        var pl = qualifiedName.split(\":\");\n        node.ownerDocument = this;\n        node.nodeName = qualifiedName;\n        node.name = qualifiedName;\n        node.namespaceURI = namespaceURI;\n        node.specified = true;\n        if (pl.length == 2) {\n            node.prefix = pl[0];\n            node.localName = pl[1];\n        } else {\n            //el.prefix = null;\n            node.localName = qualifiedName;\n        }\n        return node;\n    }\n};\n_extends(Document, Node);\nfunction Element() {\n    this._nsMap = {};\n}\n;\nElement.prototype = {\n    nodeType: ELEMENT_NODE,\n    hasAttribute: function(name) {\n        return this.getAttributeNode(name) != null;\n    },\n    getAttribute: function(name) {\n        var attr = this.getAttributeNode(name);\n        return attr && attr.value || \"\";\n    },\n    getAttributeNode: function(name) {\n        return this.attributes.getNamedItem(name);\n    },\n    setAttribute: function(name, value) {\n        var attr = this.ownerDocument.createAttribute(name);\n        attr.value = attr.nodeValue = \"\" + value;\n        this.setAttributeNode(attr);\n    },\n    removeAttribute: function(name) {\n        var attr = this.getAttributeNode(name);\n        attr && this.removeAttributeNode(attr);\n    },\n    //four real opeartion method\n    appendChild: function(newChild) {\n        if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n            return this.insertBefore(newChild, null);\n        } else {\n            return _appendSingleChild(this, newChild);\n        }\n    },\n    setAttributeNode: function(newAttr) {\n        return this.attributes.setNamedItem(newAttr);\n    },\n    setAttributeNodeNS: function(newAttr) {\n        return this.attributes.setNamedItemNS(newAttr);\n    },\n    removeAttributeNode: function(oldAttr) {\n        //console.log(this == oldAttr.ownerElement)\n        return this.attributes.removeNamedItem(oldAttr.nodeName);\n    },\n    //get real attribute name,and remove it by removeAttributeNode\n    removeAttributeNS: function(namespaceURI, localName) {\n        var old = this.getAttributeNodeNS(namespaceURI, localName);\n        old && this.removeAttributeNode(old);\n    },\n    hasAttributeNS: function(namespaceURI, localName) {\n        return this.getAttributeNodeNS(namespaceURI, localName) != null;\n    },\n    getAttributeNS: function(namespaceURI, localName) {\n        var attr = this.getAttributeNodeNS(namespaceURI, localName);\n        return attr && attr.value || \"\";\n    },\n    setAttributeNS: function(namespaceURI, qualifiedName, value) {\n        var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n        attr.value = attr.nodeValue = \"\" + value;\n        this.setAttributeNode(attr);\n    },\n    getAttributeNodeNS: function(namespaceURI, localName) {\n        return this.attributes.getNamedItemNS(namespaceURI, localName);\n    },\n    getElementsByTagName: function(tagName) {\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            _visitNode(base, function(node) {\n                if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === \"*\" || node.tagName == tagName)) {\n                    ls.push(node);\n                }\n            });\n            return ls;\n        });\n    },\n    getElementsByTagNameNS: function(namespaceURI, localName) {\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            _visitNode(base, function(node) {\n                if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === \"*\" || node.namespaceURI === namespaceURI) && (localName === \"*\" || node.localName == localName)) {\n                    ls.push(node);\n                }\n            });\n            return ls;\n        });\n    }\n};\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n_extends(Element, Node);\nfunction Attr() {}\n;\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr, Node);\nfunction CharacterData() {}\n;\nCharacterData.prototype = {\n    data: \"\",\n    substringData: function(offset, count) {\n        return this.data.substring(offset, offset + count);\n    },\n    appendData: function(text) {\n        text = this.data + text;\n        this.nodeValue = this.data = text;\n        this.length = text.length;\n    },\n    insertData: function(offset, text) {\n        this.replaceData(offset, 0, text);\n    },\n    appendChild: function(newChild) {\n        throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);\n    },\n    deleteData: function(offset, count) {\n        this.replaceData(offset, count, \"\");\n    },\n    replaceData: function(offset, count, text) {\n        var start = this.data.substring(0, offset);\n        var end = this.data.substring(offset + count);\n        text = start + text + end;\n        this.nodeValue = this.data = text;\n        this.length = text.length;\n    }\n};\n_extends(CharacterData, Node);\nfunction Text() {}\n;\nText.prototype = {\n    nodeName: \"#text\",\n    nodeType: TEXT_NODE,\n    splitText: function(offset) {\n        var text = this.data;\n        var newText = text.substring(offset);\n        text = text.substring(0, offset);\n        this.data = this.nodeValue = text;\n        this.length = text.length;\n        var newNode = this.ownerDocument.createTextNode(newText);\n        if (this.parentNode) {\n            this.parentNode.insertBefore(newNode, this.nextSibling);\n        }\n        return newNode;\n    }\n};\n_extends(Text, CharacterData);\nfunction Comment() {}\n;\nComment.prototype = {\n    nodeName: \"#comment\",\n    nodeType: COMMENT_NODE\n};\n_extends(Comment, CharacterData);\nfunction CDATASection() {}\n;\nCDATASection.prototype = {\n    nodeName: \"#cdata-section\",\n    nodeType: CDATA_SECTION_NODE\n};\n_extends(CDATASection, CharacterData);\nfunction DocumentType() {}\n;\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType, Node);\nfunction Notation() {}\n;\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation, Node);\nfunction Entity() {}\n;\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity, Node);\nfunction EntityReference() {}\n;\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference, Node);\nfunction DocumentFragment() {}\n;\nDocumentFragment.prototype.nodeName = \"#document-fragment\";\nDocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment, Node);\nfunction ProcessingInstruction() {}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction, Node);\nfunction XMLSerializer() {}\nXMLSerializer.prototype.serializeToString = function(node, isHtml, nodeFilter) {\n    return nodeSerializeToString.call(node, isHtml, nodeFilter);\n};\nNode.prototype.toString = nodeSerializeToString;\nfunction nodeSerializeToString(isHtml, nodeFilter) {\n    var buf = [];\n    var refNode = this.nodeType == 9 && this.documentElement || this;\n    var prefix = refNode.prefix;\n    var uri = refNode.namespaceURI;\n    if (uri && prefix == null) {\n        //console.log(prefix)\n        var prefix = refNode.lookupPrefix(uri);\n        if (prefix == null) {\n            //isHTML = true;\n            var visibleNamespaces = [\n                {\n                    namespace: uri,\n                    prefix: null\n                }\n            ];\n        }\n    }\n    serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);\n    //console.log('###',this.nodeType,uri,prefix,buf.join(''))\n    return buf.join(\"\");\n}\nfunction needNamespaceDefine(node, isHTML, visibleNamespaces) {\n    var prefix = node.prefix || \"\";\n    var uri = node.namespaceURI;\n    // According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,\n    // and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :\n    // > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.\n    // in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)\n    // and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :\n    // > [...] Furthermore, the attribute value [...] must not be an empty string.\n    // so serializing empty namespace value like xmlns:ds=\"\" would produce an invalid XML document.\n    if (!uri) {\n        return false;\n    }\n    if (prefix === \"xml\" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {\n        return false;\n    }\n    var i = visibleNamespaces.length;\n    while(i--){\n        var ns = visibleNamespaces[i];\n        // get namespace prefix\n        if (ns.prefix === prefix) {\n            return ns.namespace !== uri;\n        }\n    }\n    return true;\n}\n/**\n * Well-formed constraint: No < in Attribute Values\n * > The replacement text of any entity referred to directly or indirectly\n * > in an attribute value must not contain a <.\n * @see https://www.w3.org/TR/xml11/#CleanAttrVals\n * @see https://www.w3.org/TR/xml11/#NT-AttValue\n *\n * Literal whitespace other than space that appear in attribute values\n * are serialized as their entity references, so they will be preserved.\n * (In contrast to whitespace literals in the input which are normalized to spaces)\n * @see https://www.w3.org/TR/xml11/#AVNormalize\n * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes\n */ function addSerializedAttribute(buf, qualifiedName, value) {\n    buf.push(\" \", qualifiedName, '=\"', value.replace(/[<>&\"\\t\\n\\r]/g, _xmlEncoder), '\"');\n}\nfunction serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {\n    if (!visibleNamespaces) {\n        visibleNamespaces = [];\n    }\n    if (nodeFilter) {\n        node = nodeFilter(node);\n        if (node) {\n            if (typeof node == \"string\") {\n                buf.push(node);\n                return;\n            }\n        } else {\n            return;\n        }\n    //buf.sort.apply(attrs, attributeSorter);\n    }\n    switch(node.nodeType){\n        case ELEMENT_NODE:\n            var attrs = node.attributes;\n            var len = attrs.length;\n            var child = node.firstChild;\n            var nodeName = node.tagName;\n            isHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML;\n            var prefixedNodeName = nodeName;\n            if (!isHTML && !node.prefix && node.namespaceURI) {\n                var defaultNS;\n                // lookup current default ns from `xmlns` attribute\n                for(var ai = 0; ai < attrs.length; ai++){\n                    if (attrs.item(ai).name === \"xmlns\") {\n                        defaultNS = attrs.item(ai).value;\n                        break;\n                    }\n                }\n                if (!defaultNS) {\n                    // lookup current default ns in visibleNamespaces\n                    for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){\n                        var namespace = visibleNamespaces[nsi];\n                        if (namespace.prefix === \"\" && namespace.namespace === node.namespaceURI) {\n                            defaultNS = namespace.namespace;\n                            break;\n                        }\n                    }\n                }\n                if (defaultNS !== node.namespaceURI) {\n                    for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){\n                        var namespace = visibleNamespaces[nsi];\n                        if (namespace.namespace === node.namespaceURI) {\n                            if (namespace.prefix) {\n                                prefixedNodeName = namespace.prefix + \":\" + nodeName;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            buf.push(\"<\", prefixedNodeName);\n            for(var i = 0; i < len; i++){\n                // add namespaces for attributes\n                var attr = attrs.item(i);\n                if (attr.prefix == \"xmlns\") {\n                    visibleNamespaces.push({\n                        prefix: attr.localName,\n                        namespace: attr.value\n                    });\n                } else if (attr.nodeName == \"xmlns\") {\n                    visibleNamespaces.push({\n                        prefix: \"\",\n                        namespace: attr.value\n                    });\n                }\n            }\n            for(var i = 0; i < len; i++){\n                var attr = attrs.item(i);\n                if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {\n                    var prefix = attr.prefix || \"\";\n                    var uri = attr.namespaceURI;\n                    addSerializedAttribute(buf, prefix ? \"xmlns:\" + prefix : \"xmlns\", uri);\n                    visibleNamespaces.push({\n                        prefix: prefix,\n                        namespace: uri\n                    });\n                }\n                serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);\n            }\n            // add namespace for current node\n            if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {\n                var prefix = node.prefix || \"\";\n                var uri = node.namespaceURI;\n                addSerializedAttribute(buf, prefix ? \"xmlns:\" + prefix : \"xmlns\", uri);\n                visibleNamespaces.push({\n                    prefix: prefix,\n                    namespace: uri\n                });\n            }\n            if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {\n                buf.push(\">\");\n                //if is cdata child node\n                if (isHTML && /^script$/i.test(nodeName)) {\n                    while(child){\n                        if (child.data) {\n                            buf.push(child.data);\n                        } else {\n                            serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n                        }\n                        child = child.nextSibling;\n                    }\n                } else {\n                    while(child){\n                        serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n                        child = child.nextSibling;\n                    }\n                }\n                buf.push(\"</\", prefixedNodeName, \">\");\n            } else {\n                buf.push(\"/>\");\n            }\n            // remove added visible namespaces\n            //visibleNamespaces.length = startVisibleNamespaces;\n            return;\n        case DOCUMENT_NODE:\n        case DOCUMENT_FRAGMENT_NODE:\n            var child = node.firstChild;\n            while(child){\n                serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n                child = child.nextSibling;\n            }\n            return;\n        case ATTRIBUTE_NODE:\n            return addSerializedAttribute(buf, node.name, node.value);\n        case TEXT_NODE:\n            /**\n\t\t * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,\n\t\t * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.\n\t\t * If they are needed elsewhere, they must be escaped using either numeric character references or the strings\n\t\t * `&amp;` and `&lt;` respectively.\n\t\t * The right angle bracket (>) may be represented using the string \" &gt; \", and must, for compatibility,\n\t\t * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,\n\t\t * when that string is not marking the end of a CDATA section.\n\t\t *\n\t\t * In the content of elements, character data is any string of characters\n\t\t * which does not contain the start-delimiter of any markup\n\t\t * and does not include the CDATA-section-close delimiter, `]]>`.\n\t\t *\n\t\t * @see https://www.w3.org/TR/xml/#NT-CharData\n\t\t * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node\n\t\t */ return buf.push(node.data.replace(/[<&>]/g, _xmlEncoder));\n        case CDATA_SECTION_NODE:\n            return buf.push(\"<![CDATA[\", node.data, \"]]>\");\n        case COMMENT_NODE:\n            return buf.push(\"<!--\", node.data, \"-->\");\n        case DOCUMENT_TYPE_NODE:\n            var pubid = node.publicId;\n            var sysid = node.systemId;\n            buf.push(\"<!DOCTYPE \", node.name);\n            if (pubid) {\n                buf.push(\" PUBLIC \", pubid);\n                if (sysid && sysid != \".\") {\n                    buf.push(\" \", sysid);\n                }\n                buf.push(\">\");\n            } else if (sysid && sysid != \".\") {\n                buf.push(\" SYSTEM \", sysid, \">\");\n            } else {\n                var sub = node.internalSubset;\n                if (sub) {\n                    buf.push(\" [\", sub, \"]\");\n                }\n                buf.push(\">\");\n            }\n            return;\n        case PROCESSING_INSTRUCTION_NODE:\n            return buf.push(\"<?\", node.target, \" \", node.data, \"?>\");\n        case ENTITY_REFERENCE_NODE:\n            return buf.push(\"&\", node.nodeName, \";\");\n        //case ENTITY_NODE:\n        //case NOTATION_NODE:\n        default:\n            buf.push(\"??\", node.nodeName);\n    }\n}\nfunction importNode(doc, node, deep) {\n    var node2;\n    switch(node.nodeType){\n        case ELEMENT_NODE:\n            node2 = node.cloneNode(false);\n            node2.ownerDocument = doc;\n        //var attrs = node2.attributes;\n        //var len = attrs.length;\n        //for(var i=0;i<len;i++){\n        //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n        //}\n        case DOCUMENT_FRAGMENT_NODE:\n            break;\n        case ATTRIBUTE_NODE:\n            deep = true;\n            break;\n    }\n    if (!node2) {\n        node2 = node.cloneNode(false); //false\n    }\n    node2.ownerDocument = doc;\n    node2.parentNode = null;\n    if (deep) {\n        var child = node.firstChild;\n        while(child){\n            node2.appendChild(importNode(doc, child, deep));\n            child = child.nextSibling;\n        }\n    }\n    return node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction cloneNode(doc, node, deep) {\n    var node2 = new node.constructor();\n    for(var n in node){\n        if (Object.prototype.hasOwnProperty.call(node, n)) {\n            var v = node[n];\n            if (typeof v != \"object\") {\n                if (v != node2[n]) {\n                    node2[n] = v;\n                }\n            }\n        }\n    }\n    if (node.childNodes) {\n        node2.childNodes = new NodeList();\n    }\n    node2.ownerDocument = doc;\n    switch(node2.nodeType){\n        case ELEMENT_NODE:\n            var attrs = node.attributes;\n            var attrs2 = node2.attributes = new NamedNodeMap();\n            var len = attrs.length;\n            attrs2._ownerElement = node2;\n            for(var i = 0; i < len; i++){\n                node2.setAttributeNode(cloneNode(doc, attrs.item(i), true));\n            }\n            break;\n            ;\n        case ATTRIBUTE_NODE:\n            deep = true;\n    }\n    if (deep) {\n        var child = node.firstChild;\n        while(child){\n            node2.appendChild(cloneNode(doc, child, deep));\n            child = child.nextSibling;\n        }\n    }\n    return node2;\n}\nfunction __set__(object, key, value) {\n    object[key] = value;\n}\n//do dynamic\ntry {\n    if (Object.defineProperty) {\n        Object.defineProperty(LiveNodeList.prototype, \"length\", {\n            get: function() {\n                _updateLiveList(this);\n                return this.$$length;\n            }\n        });\n        Object.defineProperty(Node.prototype, \"textContent\", {\n            get: function() {\n                return getTextContent(this);\n            },\n            set: function(data) {\n                switch(this.nodeType){\n                    case ELEMENT_NODE:\n                    case DOCUMENT_FRAGMENT_NODE:\n                        while(this.firstChild){\n                            this.removeChild(this.firstChild);\n                        }\n                        if (data || String(data)) {\n                            this.appendChild(this.ownerDocument.createTextNode(data));\n                        }\n                        break;\n                    default:\n                        this.data = data;\n                        this.value = data;\n                        this.nodeValue = data;\n                }\n            }\n        });\n        function getTextContent(node) {\n            switch(node.nodeType){\n                case ELEMENT_NODE:\n                case DOCUMENT_FRAGMENT_NODE:\n                    var buf = [];\n                    node = node.firstChild;\n                    while(node){\n                        if (node.nodeType !== 7 && node.nodeType !== 8) {\n                            buf.push(getTextContent(node));\n                        }\n                        node = node.nextSibling;\n                    }\n                    return buf.join(\"\");\n                default:\n                    return node.nodeValue;\n            }\n        }\n        __set__ = function(object, key, value) {\n            //console.log(value)\n            object[\"$$\" + key] = value;\n        };\n    }\n} catch (e) {}\n//if(typeof require == 'function'){\nexports.DocumentType = DocumentType;\nexports.DOMException = DOMException;\nexports.DOMImplementation = DOMImplementation;\nexports.Element = Element;\nexports.Node = Node;\nexports.NodeList = NodeList;\nexports.XMLSerializer = XMLSerializer; //}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B4bWxkb20veG1sZG9tL2xpYi9kb20uanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUMsOEVBQWU7QUFFekMsSUFBSUMsT0FBT0YsWUFBWUUsSUFBSTtBQUMzQixJQUFJQyxZQUFZSCxZQUFZRyxTQUFTO0FBRXJDOzs7O0NBSUMsR0FDRCxTQUFTQyxlQUFnQkMsS0FBSztJQUM3QixPQUFPQSxVQUFVO0FBQ2xCO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsdUJBQXVCRCxLQUFLO0lBQ3BDLDREQUE0RDtJQUM1RCxPQUFPQSxRQUFRQSxNQUFNRSxLQUFLLENBQUMsZ0JBQWdCQyxNQUFNLENBQUNKLGtCQUFrQixFQUFFO0FBQ3ZFO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU0ssa0JBQW1CQyxPQUFPLEVBQUVDLE9BQU87SUFDM0MsSUFBSSxDQUFDRCxRQUFRRSxjQUFjLENBQUNELFVBQVU7UUFDckNELE9BQU8sQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBQ0EsT0FBT0Q7QUFDUjtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTRyxhQUFhUixLQUFLO0lBQzFCLElBQUksQ0FBQ0EsT0FBTyxPQUFPLEVBQUU7SUFDckIsSUFBSVMsT0FBT1IsdUJBQXVCRDtJQUNsQyxPQUFPVSxPQUFPQyxJQUFJLENBQUNGLEtBQUtHLE1BQU0sQ0FBQ1IsbUJBQW1CLENBQUM7QUFDcEQ7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTUyxjQUFlSixJQUFJO0lBQzNCLE9BQU8sU0FBU0gsT0FBTztRQUN0QixPQUFPRyxRQUFRQSxLQUFLSyxPQUFPLENBQUNSLGFBQWEsQ0FBQztJQUMzQztBQUNEO0FBRUEsU0FBU1MsS0FBS0MsR0FBRyxFQUFDQyxJQUFJO0lBQ3JCLElBQUksSUFBSUMsS0FBS0YsSUFBSTtRQUNoQixJQUFJTixPQUFPUyxTQUFTLENBQUNaLGNBQWMsQ0FBQ2EsSUFBSSxDQUFDSixLQUFLRSxJQUFJO1lBQ2pERCxJ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O29CQUNKLElBQUkrQixNQUFNLEVBQUU7b0JBQ1pPLE9BQU9BLEtBQUt1RCxVQUFVO29CQUN0QixNQUFNdkQsS0FBSzt3QkFDVixJQUFHQSxLQUFLOEUsUUFBUSxLQUFHLEtBQUs5RSxLQUFLOEUsUUFBUSxLQUFJLEdBQUU7NEJBQzFDckYsSUFBSWtKLElBQUksQ0FBQ2lGLGVBQWU1Tjt3QkFDekI7d0JBQ0FBLE9BQU9BLEtBQUswRCxXQUFXO29CQUN4QjtvQkFDQSxPQUFPakUsSUFBSUcsSUFBSSxDQUFDO2dCQUNqQjtvQkFDQyxPQUFPSSxLQUFLNkQsU0FBUztZQUN0QjtRQUNEO1FBRUFwRCxVQUFVLFNBQVNnTixNQUFNLEVBQUMvTCxHQUFHLEVBQUNzRSxLQUFLO1lBQ2xDLG9CQUFvQjtZQUNwQnlILE1BQU0sQ0FBQyxPQUFLL0wsSUFBSSxHQUFHc0U7UUFDcEI7SUFDRDtBQUNELEVBQUMsT0FBTStILEdBQUUsQ0FDVDtBQUVBLG1DQUFtQztBQUNsQ0Msb0JBQW9CLEdBQUc1SztBQUN2QjRLLG9CQUFvQixHQUFHblA7QUFDdkJtUCx5QkFBeUIsR0FBRzVMO0FBQzVCNEwsZUFBZSxHQUFHbkY7QUFDbEJtRixZQUFZLEdBQUcxSztBQUNmMEssZ0JBQWdCLEdBQUc5TztBQUNuQjhPLHFCQUFxQixHQUFHaEMsZUFDekIsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvQHhtbGRvbS94bWxkb20vbGliL2RvbS5qcz84NTRiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb252ZW50aW9ucyA9IHJlcXVpcmUoXCIuL2NvbnZlbnRpb25zXCIpO1xuXG52YXIgZmluZCA9IGNvbnZlbnRpb25zLmZpbmQ7XG52YXIgTkFNRVNQQUNFID0gY29udmVudGlvbnMuTkFNRVNQQUNFO1xuXG4vKipcbiAqIEEgcHJlcmVxdWlzaXRlIGZvciBgW10uZmlsdGVyYCwgdG8gZHJvcCBlbGVtZW50cyB0aGF0IGFyZSBlbXB0eVxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gbm90RW1wdHlTdHJpbmcgKGlucHV0KSB7XG5cdHJldHVybiBpbnB1dCAhPT0gJydcbn1cbi8qKlxuICogQHNlZSBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3BsaXQtb24tYXNjaWktd2hpdGVzcGFjZVxuICogQHNlZSBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jYXNjaWktd2hpdGVzcGFjZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFxuICogQHJldHVybnMge3N0cmluZ1tdfSAoY2FuIGJlIGVtcHR5KVxuICovXG5mdW5jdGlvbiBzcGxpdE9uQVNDSUlXaGl0ZXNwYWNlKGlucHV0KSB7XG5cdC8vIFUrMDAwOSBUQUIsIFUrMDAwQSBMRiwgVSswMDBDIEZGLCBVKzAwMEQgQ1IsIFUrMDAyMCBTUEFDRVxuXHRyZXR1cm4gaW5wdXQgPyBpbnB1dC5zcGxpdCgvW1xcdFxcblxcZlxcciBdKy8pLmZpbHRlcihub3RFbXB0eVN0cmluZykgOiBbXVxufVxuXG4vKipcbiAqIEFkZHMgZWxlbWVudCBhcyBhIGtleSB0byBjdXJyZW50IGlmIGl0IGlzIG5vdCBhbHJlYWR5IHByZXNlbnQuXG4gKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBib29sZWFuIHwgdW5kZWZpbmVkPn0gY3VycmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtSZWNvcmQ8c3RyaW5nLCBib29sZWFuIHwgdW5kZWZpbmVkPn1cbiAqL1xuZnVuY3Rpb24gb3JkZXJlZFNldFJlZHVjZXIgKGN1cnJlbnQsIGVsZW1lbnQpIHtcblx0aWYgKCFjdXJyZW50Lmhhc093blByb3BlcnR5KGVsZW1lbnQpKSB7XG5cdFx0Y3VycmVudFtlbGVtZW50XSA9IHRydWU7XG5cdH1cblx0cmV0dXJuIGN1cnJlbnQ7XG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jb3JkZXJlZC1zZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFxuICogQHJldHVybnMge3N0cmluZ1tdfVxuICovXG5mdW5jdGlvbiB0b09yZGVyZWRTZXQoaW5wdXQpIHtcblx0aWYgKCFpbnB1dCkgcmV0dXJuIFtdO1xuXHR2YXIgbGlzdCA9IHNwbGl0T25BU0NJSVdoaXRlc3BhY2UoaW5wdXQpO1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobGlzdC5yZWR1Y2Uob3JkZXJlZFNldFJlZHVjZXIsIHt9KSlcbn1cblxuLyoqXG4gKiBVc2VzIGBsaXN0LmluZGV4T2ZgIHRvIGltcGxlbWVudCBzb21ldGhpbmcgbGlrZSBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCxcbiAqIHdoaWNoIHdlIGNhbiBub3QgcmVseSBvbiBiZWluZyBhdmFpbGFibGUuXG4gKlxuICogQHBhcmFtIHthbnlbXX0gbGlzdFxuICogQHJldHVybnMge2Z1bmN0aW9uKGFueSk6IGJvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGFycmF5SW5jbHVkZXMgKGxpc3QpIHtcblx0cmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gbGlzdCAmJiBsaXN0LmluZGV4T2YoZWxlbWVudCkgIT09IC0xO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNvcHkoc3JjLGRlc3Qpe1xuXHRmb3IodmFyIHAgaW4gc3JjKXtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNyYywgcCkpIHtcblx0XHRcdGRlc3RbcF0gPSBzcmNbcF07XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuXlxcdytcXC5wcm90b3R5cGVcXC4oW19cXHddKylcXHMqPVxccyooKD86LipcXHtcXHMqP1tcXHJcXG5dW1xcc1xcU10qP159KXxcXFMuKj8oPz1bO1xcclxcbl0pKTs/XG5eXFx3K1xcLnByb3RvdHlwZVxcLihbX1xcd10rKVxccyo9XFxzKihcXFMuKj8oPz1bO1xcclxcbl0pKTs/XG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKENsYXNzLFN1cGVyKXtcblx0dmFyIHB0ID0gQ2xhc3MucHJvdG90eXBlO1xuXHRpZighKHB0IGluc3RhbmNlb2YgU3VwZXIpKXtcblx0XHRmdW5jdGlvbiB0KCl7fTtcblx0XHR0LnByb3RvdHlwZSA9IFN1cGVyLnByb3RvdHlwZTtcblx0XHR0ID0gbmV3IHQoKTtcblx0XHRjb3B5KHB0LHQpO1xuXHRcdENsYXNzLnByb3RvdHlwZSA9IHB0ID0gdDtcblx0fVxuXHRpZihwdC5jb25zdHJ1Y3RvciAhPSBDbGFzcyl7XG5cdFx0aWYodHlwZW9mIENsYXNzICE9ICdmdW5jdGlvbicpe1xuXHRcdFx0Y29uc29sZS5lcnJvcihcInVua25vd24gQ2xhc3M6XCIrQ2xhc3MpXG5cdFx0fVxuXHRcdHB0LmNvbnN0cnVjdG9yID0gQ2xhc3Ncblx0fVxufVxuXG4vLyBOb2RlIFR5cGVzXG52YXIgTm9kZVR5cGUgPSB7fVxudmFyIEVMRU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IE5vZGVUeXBlLkVMRU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IDE7XG52YXIgQVRUUklCVVRFX05PREUgICAgICAgICAgICAgID0gTm9kZVR5cGUuQVRUUklCVVRFX05PREUgICAgICAgICAgICAgID0gMjtcbnZhciBURVhUX05PREUgICAgICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5URVhUX05PREUgICAgICAgICAgICAgICAgICAgPSAzO1xudmFyIENEQVRBX1NFQ1RJT05fTk9ERSAgICAgICAgICA9IE5vZGVUeXBlLkNEQVRBX1NFQ1RJT05fTk9ERSAgICAgICAgICA9IDQ7XG52YXIgRU5USVRZX1JFRkVSRU5DRV9OT0RFICAgICAgID0gTm9kZVR5cGUuRU5USVRZX1JFRkVSRU5DRV9OT0RFICAgICAgID0gNTtcbnZhciBFTlRJVFlfTk9ERSAgICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5FTlRJVFlfTk9ERSAgICAgICAgICAgICAgICAgPSA2O1xudmFyIFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSA9IE5vZGVUeXBlLlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSA9IDc7XG52YXIgQ09NTUVOVF9OT0RFICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuQ09NTUVOVF9OT0RFICAgICAgICAgICAgICAgID0gODtcbnZhciBET0NVTUVOVF9OT0RFICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9OT0RFICAgICAgICAgICAgICAgPSA5O1xudmFyIERPQ1VNRU5UX1RZUEVfTk9ERSAgICAgICAgICA9IE5vZGVUeXBlLkRPQ1VNRU5UX1RZUEVfTk9ERSAgICAgICAgICA9IDEwO1xudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgICAgICA9IE5vZGVUeXBlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgICAgICA9IDExO1xudmFyIE5PVEFUSU9OX05PREUgICAgICAgICAgICAgICA9IE5vZGVUeXBlLk5PVEFUSU9OX05PREUgICAgICAgICAgICAgICA9IDEyO1xuXG4vLyBFeGNlcHRpb25Db2RlXG52YXIgRXhjZXB0aW9uQ29kZSA9IHt9XG52YXIgRXhjZXB0aW9uTWVzc2FnZSA9IHt9O1xudmFyIElOREVYX1NJWkVfRVJSICAgICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuSU5ERVhfU0laRV9FUlIgICAgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzFdPVwiSW5kZXggc2l6ZSBlcnJvclwiKSwxKTtcbnZhciBET01TVFJJTkdfU0laRV9FUlIgICAgICAgICAgPSBFeGNlcHRpb25Db2RlLkRPTVNUUklOR19TSVpFX0VSUiAgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsyXT1cIkRPTVN0cmluZyBzaXplIGVycm9yXCIpLDIpO1xudmFyIEhJRVJBUkNIWV9SRVFVRVNUX0VSUiAgICAgICA9IEV4Y2VwdGlvbkNvZGUuSElFUkFSQ0hZX1JFUVVFU1RfRVJSICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzNdPVwiSGllcmFyY2h5IHJlcXVlc3QgZXJyb3JcIiksMyk7XG52YXIgV1JPTkdfRE9DVU1FTlRfRVJSICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5XUk9OR19ET0NVTUVOVF9FUlIgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbNF09XCJXcm9uZyBkb2N1bWVudFwiKSw0KTtcbnZhciBJTlZBTElEX0NIQVJBQ1RFUl9FUlIgICAgICAgPSBFeGNlcHRpb25Db2RlLklOVkFMSURfQ0hBUkFDVEVSX0VSUiAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVs1XT1cIkludmFsaWQgY2hhcmFjdGVyXCIpLDUpO1xudmFyIE5PX0RBVEFfQUxMT1dFRF9FUlIgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9fREFUQV9BTExPV0VEX0VSUiAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzZdPVwiTm8gZGF0YSBhbGxvd2VkXCIpLDYpO1xudmFyIE5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiA9IEV4Y2VwdGlvbkNvZGUuTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSID0gKChFeGNlcHRpb25NZXNzYWdlWzddPVwiTm8gbW9kaWZpY2F0aW9uIGFsbG93ZWRcIiksNyk7XG52YXIgTk9UX0ZPVU5EX0VSUiAgICAgICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5OT1RfRk9VTkRfRVJSICAgICAgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbOF09XCJOb3QgZm91bmRcIiksOCk7XG52YXIgTk9UX1NVUFBPUlRFRF9FUlIgICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5OT1RfU1VQUE9SVEVEX0VSUiAgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbOV09XCJOb3Qgc3VwcG9ydGVkXCIpLDkpO1xudmFyIElOVVNFX0FUVFJJQlVURV9FUlIgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuSU5VU0VfQVRUUklCVVRFX0VSUiAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzEwXT1cIkF0dHJpYnV0ZSBpbiB1c2VcIiksMTApO1xuLy9sZXZlbDJcbnZhciBJTlZBTElEX1NUQVRFX0VSUiAgICAgICAgXHQ9IEV4Y2VwdGlvbkNvZGUuSU5WQUxJRF9TVEFURV9FUlIgICAgICAgIFx0PSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMTFdPVwiSW52YWxpZCBzdGF0ZVwiKSwxMSk7XG52YXIgU1lOVEFYX0VSUiAgICAgICAgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLlNZTlRBWF9FUlIgICAgICAgICAgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzEyXT1cIlN5bnRheCBlcnJvclwiKSwxMik7XG52YXIgSU5WQUxJRF9NT0RJRklDQVRJT05fRVJSIFx0PSBFeGNlcHRpb25Db2RlLklOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzEzXT1cIkludmFsaWQgbW9kaWZpY2F0aW9uXCIpLDEzKTtcbnZhciBOQU1FU1BBQ0VfRVJSICAgICAgICAgICAgXHQ9IEV4Y2VwdGlvbkNvZGUuTkFNRVNQQUNFX0VSUiAgICAgICAgICAgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxNF09XCJJbnZhbGlkIG5hbWVzcGFjZVwiKSwxNCk7XG52YXIgSU5WQUxJRF9BQ0NFU1NfRVJSICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLklOVkFMSURfQUNDRVNTX0VSUiAgICAgIFx0PSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMTVdPVwiSW52YWxpZCBhY2Nlc3NcIiksMTUpO1xuXG4vKipcbiAqIERPTSBMZXZlbCAyXG4gKiBPYmplY3QgRE9NRXhjZXB0aW9uXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDAvUkVDLURPTS1MZXZlbC0yLUNvcmUtMjAwMDExMTMvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1ET00tTGV2ZWwtMS9lY21hLXNjcmlwdC1sYW5ndWFnZS1iaW5kaW5nLmh0bWxcbiAqL1xuZnVuY3Rpb24gRE9NRXhjZXB0aW9uKGNvZGUsIG1lc3NhZ2UpIHtcblx0aWYobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKXtcblx0XHR2YXIgZXJyb3IgPSBtZXNzYWdlO1xuXHR9ZWxzZXtcblx0XHRlcnJvciA9IHRoaXM7XG5cdFx0RXJyb3IuY2FsbCh0aGlzLCBFeGNlcHRpb25NZXNzYWdlW2NvZGVdKTtcblx0XHR0aGlzLm1lc3NhZ2UgPSBFeGNlcHRpb25NZXNzYWdlW2NvZGVdO1xuXHRcdGlmKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBET01FeGNlcHRpb24pO1xuXHR9XG5cdGVycm9yLmNvZGUgPSBjb2RlO1xuXHRpZihtZXNzYWdlKSB0aGlzLm1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UgKyBcIjogXCIgKyBtZXNzYWdlO1xuXHRyZXR1cm4gZXJyb3I7XG59O1xuRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcbmNvcHkoRXhjZXB0aW9uQ29kZSxET01FeGNlcHRpb24pXG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAwL1JFQy1ET00tTGV2ZWwtMi1Db3JlLTIwMDAxMTEzL2NvcmUuaHRtbCNJRC01MzYyOTcxNzdcbiAqIFRoZSBOb2RlTGlzdCBpbnRlcmZhY2UgcHJvdmlkZXMgdGhlIGFic3RyYWN0aW9uIG9mIGFuIG9yZGVyZWQgY29sbGVjdGlvbiBvZiBub2Rlcywgd2l0aG91dCBkZWZpbmluZyBvciBjb25zdHJhaW5pbmcgaG93IHRoaXMgY29sbGVjdGlvbiBpcyBpbXBsZW1lbnRlZC4gTm9kZUxpc3Qgb2JqZWN0cyBpbiB0aGUgRE9NIGFyZSBsaXZlLlxuICogVGhlIGl0ZW1zIGluIHRoZSBOb2RlTGlzdCBhcmUgYWNjZXNzaWJsZSB2aWEgYW4gaW50ZWdyYWwgaW5kZXgsIHN0YXJ0aW5nIGZyb20gMC5cbiAqL1xuZnVuY3Rpb24gTm9kZUxpc3QoKSB7XG59O1xuTm9kZUxpc3QucHJvdG90eXBlID0ge1xuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiBub2RlcyBpbiB0aGUgbGlzdC4gVGhlIHJhbmdlIG9mIHZhbGlkIGNoaWxkIG5vZGUgaW5kaWNlcyBpcyAwIHRvIGxlbmd0aC0xIGluY2x1c2l2ZS5cblx0ICogQHN0YW5kYXJkIGxldmVsMVxuXHQgKi9cblx0bGVuZ3RoOjAsXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbmRleHRoIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24uIElmIGluZGV4IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSBsaXN0LCB0aGlzIHJldHVybnMgbnVsbC5cblx0ICogQHN0YW5kYXJkIGxldmVsMVxuXHQgKiBAcGFyYW0gaW5kZXggIHVuc2lnbmVkIGxvbmdcblx0ICogICBJbmRleCBpbnRvIHRoZSBjb2xsZWN0aW9uLlxuXHQgKiBAcmV0dXJuIE5vZGVcblx0ICogXHRUaGUgbm9kZSBhdCB0aGUgaW5kZXh0aCBwb3NpdGlvbiBpbiB0aGUgTm9kZUxpc3QsIG9yIG51bGwgaWYgdGhhdCBpcyBub3QgYSB2YWxpZCBpbmRleC5cblx0ICovXG5cdGl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0cmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLmxlbmd0aCA/IHRoaXNbaW5kZXhdIDogbnVsbDtcblx0fSxcblx0dG9TdHJpbmc6ZnVuY3Rpb24oaXNIVE1MLG5vZGVGaWx0ZXIpe1xuXHRcdGZvcih2YXIgYnVmID0gW10sIGkgPSAwO2k8dGhpcy5sZW5ndGg7aSsrKXtcblx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKHRoaXNbaV0sYnVmLGlzSFRNTCxub2RlRmlsdGVyKTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ1Zi5qb2luKCcnKTtcblx0fSxcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24gKE5vZGUpOmJvb2xlYW59IHByZWRpY2F0ZVxuXHQgKiBAcmV0dXJucyB7Tm9kZVtdfVxuXHQgKi9cblx0ZmlsdGVyOiBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh0aGlzLCBwcmVkaWNhdGUpO1xuXHR9LFxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOb2RlfSBpdGVtXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9XG5cdCAqL1xuXHRpbmRleE9mOiBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHRoaXMsIGl0ZW0pO1xuXHR9LFxufTtcblxuZnVuY3Rpb24gTGl2ZU5vZGVMaXN0KG5vZGUscmVmcmVzaCl7XG5cdHRoaXMuX25vZGUgPSBub2RlO1xuXHR0aGlzLl9yZWZyZXNoID0gcmVmcmVzaFxuXHRfdXBkYXRlTGl2ZUxpc3QodGhpcyk7XG59XG5mdW5jdGlvbiBfdXBkYXRlTGl2ZUxpc3QobGlzdCl7XG5cdHZhciBpbmMgPSBsaXN0Ll9ub2RlLl9pbmMgfHwgbGlzdC5fbm9kZS5vd25lckRvY3VtZW50Ll9pbmM7XG5cdGlmIChsaXN0Ll9pbmMgIT09IGluYykge1xuXHRcdHZhciBscyA9IGxpc3QuX3JlZnJlc2gobGlzdC5fbm9kZSk7XG5cdFx0X19zZXRfXyhsaXN0LCdsZW5ndGgnLGxzLmxlbmd0aCk7XG5cdFx0aWYgKCFsaXN0LiQkbGVuZ3RoIHx8IGxzLmxlbmd0aCA8IGxpc3QuJCRsZW5ndGgpIHtcblx0XHRcdGZvciAodmFyIGkgPSBscy5sZW5ndGg7IGkgaW4gbGlzdDsgaSsrKSB7XG5cdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobGlzdCwgaSkpIHtcblx0XHRcdFx0XHRkZWxldGUgbGlzdFtpXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRjb3B5KGxzLGxpc3QpO1xuXHRcdGxpc3QuX2luYyA9IGluYztcblx0fVxufVxuTGl2ZU5vZGVMaXN0LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaSl7XG5cdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcblx0cmV0dXJuIHRoaXNbaV0gfHwgbnVsbDtcbn1cblxuX2V4dGVuZHMoTGl2ZU5vZGVMaXN0LE5vZGVMaXN0KTtcblxuLyoqXG4gKiBPYmplY3RzIGltcGxlbWVudGluZyB0aGUgTmFtZWROb2RlTWFwIGludGVyZmFjZSBhcmUgdXNlZFxuICogdG8gcmVwcmVzZW50IGNvbGxlY3Rpb25zIG9mIG5vZGVzIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5IG5hbWUuXG4gKiBOb3RlIHRoYXQgTmFtZWROb2RlTWFwIGRvZXMgbm90IGluaGVyaXQgZnJvbSBOb2RlTGlzdDtcbiAqIE5hbWVkTm9kZU1hcHMgYXJlIG5vdCBtYWludGFpbmVkIGluIGFueSBwYXJ0aWN1bGFyIG9yZGVyLlxuICogT2JqZWN0cyBjb250YWluZWQgaW4gYW4gb2JqZWN0IGltcGxlbWVudGluZyBOYW1lZE5vZGVNYXAgbWF5IGFsc28gYmUgYWNjZXNzZWQgYnkgYW4gb3JkaW5hbCBpbmRleCxcbiAqIGJ1dCB0aGlzIGlzIHNpbXBseSB0byBhbGxvdyBjb252ZW5pZW50IGVudW1lcmF0aW9uIG9mIHRoZSBjb250ZW50cyBvZiBhIE5hbWVkTm9kZU1hcCxcbiAqIGFuZCBkb2VzIG5vdCBpbXBseSB0aGF0IHRoZSBET00gc3BlY2lmaWVzIGFuIG9yZGVyIHRvIHRoZXNlIE5vZGVzLlxuICogTmFtZWROb2RlTWFwIG9iamVjdHMgaW4gdGhlIERPTSBhcmUgbGl2ZS5cbiAqIHVzZWQgZm9yIGF0dHJpYnV0ZXMgb3IgRG9jdW1lbnRUeXBlIGVudGl0aWVzXG4gKi9cbmZ1bmN0aW9uIE5hbWVkTm9kZU1hcCgpIHtcbn07XG5cbmZ1bmN0aW9uIF9maW5kTm9kZUluZGV4KGxpc3Qsbm9kZSl7XG5cdHZhciBpID0gbGlzdC5sZW5ndGg7XG5cdHdoaWxlKGktLSl7XG5cdFx0aWYobGlzdFtpXSA9PT0gbm9kZSl7cmV0dXJuIGl9XG5cdH1cbn1cblxuZnVuY3Rpb24gX2FkZE5hbWVkTm9kZShlbCxsaXN0LG5ld0F0dHIsb2xkQXR0cil7XG5cdGlmKG9sZEF0dHIpe1xuXHRcdGxpc3RbX2ZpbmROb2RlSW5kZXgobGlzdCxvbGRBdHRyKV0gPSBuZXdBdHRyO1xuXHR9ZWxzZXtcblx0XHRsaXN0W2xpc3QubGVuZ3RoKytdID0gbmV3QXR0cjtcblx0fVxuXHRpZihlbCl7XG5cdFx0bmV3QXR0ci5vd25lckVsZW1lbnQgPSBlbDtcblx0XHR2YXIgZG9jID0gZWwub3duZXJEb2N1bWVudDtcblx0XHRpZihkb2Mpe1xuXHRcdFx0b2xkQXR0ciAmJiBfb25SZW1vdmVBdHRyaWJ1dGUoZG9jLGVsLG9sZEF0dHIpO1xuXHRcdFx0X29uQWRkQXR0cmlidXRlKGRvYyxlbCxuZXdBdHRyKTtcblx0XHR9XG5cdH1cbn1cbmZ1bmN0aW9uIF9yZW1vdmVOYW1lZE5vZGUoZWwsbGlzdCxhdHRyKXtcblx0Ly9jb25zb2xlLmxvZygncmVtb3ZlIGF0dHI6JythdHRyKVxuXHR2YXIgaSA9IF9maW5kTm9kZUluZGV4KGxpc3QsYXR0cik7XG5cdGlmKGk+PTApe1xuXHRcdHZhciBsYXN0SW5kZXggPSBsaXN0Lmxlbmd0aC0xXG5cdFx0d2hpbGUoaTxsYXN0SW5kZXgpe1xuXHRcdFx0bGlzdFtpXSA9IGxpc3RbKytpXVxuXHRcdH1cblx0XHRsaXN0Lmxlbmd0aCA9IGxhc3RJbmRleDtcblx0XHRpZihlbCl7XG5cdFx0XHR2YXIgZG9jID0gZWwub3duZXJEb2N1bWVudDtcblx0XHRcdGlmKGRvYyl7XG5cdFx0XHRcdF9vblJlbW92ZUF0dHJpYnV0ZShkb2MsZWwsYXR0cik7XG5cdFx0XHRcdGF0dHIub3duZXJFbGVtZW50ID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdH1lbHNle1xuXHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oTk9UX0ZPVU5EX0VSUixuZXcgRXJyb3IoZWwudGFnTmFtZSsnQCcrYXR0cikpXG5cdH1cbn1cbk5hbWVkTm9kZU1hcC5wcm90b3R5cGUgPSB7XG5cdGxlbmd0aDowLFxuXHRpdGVtOk5vZGVMaXN0LnByb3RvdHlwZS5pdGVtLFxuXHRnZXROYW1lZEl0ZW06IGZ1bmN0aW9uKGtleSkge1xuLy9cdFx0aWYoa2V5LmluZGV4T2YoJzonKT4wIHx8IGtleSA9PSAneG1sbnMnKXtcbi8vXHRcdFx0cmV0dXJuIG51bGw7XG4vL1x0XHR9XG5cdFx0Ly9jb25zb2xlLmxvZygpXG5cdFx0dmFyIGkgPSB0aGlzLmxlbmd0aDtcblx0XHR3aGlsZShpLS0pe1xuXHRcdFx0dmFyIGF0dHIgPSB0aGlzW2ldO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhhdHRyLm5vZGVOYW1lLGtleSlcblx0XHRcdGlmKGF0dHIubm9kZU5hbWUgPT0ga2V5KXtcblx0XHRcdFx0cmV0dXJuIGF0dHI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRzZXROYW1lZEl0ZW06IGZ1bmN0aW9uKGF0dHIpIHtcblx0XHR2YXIgZWwgPSBhdHRyLm93bmVyRWxlbWVudDtcblx0XHRpZihlbCAmJiBlbCE9dGhpcy5fb3duZXJFbGVtZW50KXtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSU5VU0VfQVRUUklCVVRFX0VSUik7XG5cdFx0fVxuXHRcdHZhciBvbGRBdHRyID0gdGhpcy5nZXROYW1lZEl0ZW0oYXR0ci5ub2RlTmFtZSk7XG5cdFx0X2FkZE5hbWVkTm9kZSh0aGlzLl9vd25lckVsZW1lbnQsdGhpcyxhdHRyLG9sZEF0dHIpO1xuXHRcdHJldHVybiBvbGRBdHRyO1xuXHR9LFxuXHQvKiByZXR1cm5zIE5vZGUgKi9cblx0c2V0TmFtZWRJdGVtTlM6IGZ1bmN0aW9uKGF0dHIpIHsvLyByYWlzZXM6IFdST05HX0RPQ1VNRU5UX0VSUixOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlIsSU5VU0VfQVRUUklCVVRFX0VSUlxuXHRcdHZhciBlbCA9IGF0dHIub3duZXJFbGVtZW50LCBvbGRBdHRyO1xuXHRcdGlmKGVsICYmIGVsIT10aGlzLl9vd25lckVsZW1lbnQpe1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihJTlVTRV9BVFRSSUJVVEVfRVJSKTtcblx0XHR9XG5cdFx0b2xkQXR0ciA9IHRoaXMuZ2V0TmFtZWRJdGVtTlMoYXR0ci5uYW1lc3BhY2VVUkksYXR0ci5sb2NhbE5hbWUpO1xuXHRcdF9hZGROYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cixvbGRBdHRyKTtcblx0XHRyZXR1cm4gb2xkQXR0cjtcblx0fSxcblxuXHQvKiByZXR1cm5zIE5vZGUgKi9cblx0cmVtb3ZlTmFtZWRJdGVtOiBmdW5jdGlvbihrZXkpIHtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0TmFtZWRJdGVtKGtleSk7XG5cdFx0X3JlbW92ZU5hbWVkTm9kZSh0aGlzLl9vd25lckVsZW1lbnQsdGhpcyxhdHRyKTtcblx0XHRyZXR1cm4gYXR0cjtcblxuXG5cdH0sLy8gcmFpc2VzOiBOT1RfRk9VTkRfRVJSLE5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUlxuXG5cdC8vZm9yIGxldmVsMlxuXHRyZW1vdmVOYW1lZEl0ZW1OUzpmdW5jdGlvbihuYW1lc3BhY2VVUkksbG9jYWxOYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0TmFtZWRJdGVtTlMobmFtZXNwYWNlVVJJLGxvY2FsTmFtZSk7XG5cdFx0X3JlbW92ZU5hbWVkTm9kZSh0aGlzLl9vd25lckVsZW1lbnQsdGhpcyxhdHRyKTtcblx0XHRyZXR1cm4gYXR0cjtcblx0fSxcblx0Z2V0TmFtZWRJdGVtTlM6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG5cdFx0dmFyIGkgPSB0aGlzLmxlbmd0aDtcblx0XHR3aGlsZShpLS0pe1xuXHRcdFx0dmFyIG5vZGUgPSB0aGlzW2ldO1xuXHRcdFx0aWYobm9kZS5sb2NhbE5hbWUgPT0gbG9jYWxOYW1lICYmIG5vZGUubmFtZXNwYWNlVVJJID09IG5hbWVzcGFjZVVSSSl7XG5cdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufTtcblxuLyoqXG4gKiBUaGUgRE9NSW1wbGVtZW50YXRpb24gaW50ZXJmYWNlIHJlcHJlc2VudHMgYW4gb2JqZWN0IHByb3ZpZGluZyBtZXRob2RzXG4gKiB3aGljaCBhcmUgbm90IGRlcGVuZGVudCBvbiBhbnkgcGFydGljdWxhciBkb2N1bWVudC5cbiAqIFN1Y2ggYW4gb2JqZWN0IGlzIHJldHVybmVkIGJ5IHRoZSBgRG9jdW1lbnQuaW1wbGVtZW50YXRpb25gIHByb3BlcnR5LlxuICpcbiAqIF9fVGhlIGluZGl2aWR1YWwgbWV0aG9kcyBkZXNjcmliZSB0aGUgZGlmZmVyZW5jZXMgY29tcGFyZWQgdG8gdGhlIHNwZWNzLl9fXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NSW1wbGVtZW50YXRpb24gTUROXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9SRUMtRE9NLUxldmVsLTEvbGV2ZWwtb25lLWNvcmUuaHRtbCNJRC0xMDIxNjE0OTAgRE9NIExldmVsIDEgQ29yZSAoSW5pdGlhbClcbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUNvcmUvY29yZS5odG1sI0lELTEwMjE2MTQ5MCBET00gTGV2ZWwgMiBDb3JlXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1Db3JlL2NvcmUuaHRtbCNJRC0xMDIxNjE0OTAgRE9NIExldmVsIDMgQ29yZVxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbWltcGxlbWVudGF0aW9uIERPTSBMaXZpbmcgU3RhbmRhcmRcbiAqL1xuZnVuY3Rpb24gRE9NSW1wbGVtZW50YXRpb24oKSB7XG59XG5cbkRPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZSA9IHtcblx0LyoqXG5cdCAqIFRoZSBET01JbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCkgbWV0aG9kIHJldHVybnMgYSBCb29sZWFuIGZsYWcgaW5kaWNhdGluZyBpZiBhIGdpdmVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkLlxuXHQgKiBUaGUgZGlmZmVyZW50IGltcGxlbWVudGF0aW9ucyBmYWlybHkgZGl2ZXJnZWQgaW4gd2hhdCBraW5kIG9mIGZlYXR1cmVzIHdlcmUgcmVwb3J0ZWQuXG5cdCAqIFRoZSBsYXRlc3QgdmVyc2lvbiBvZiB0aGUgc3BlYyBzZXR0bGVkIHRvIGZvcmNlIHRoaXMgbWV0aG9kIHRvIGFsd2F5cyByZXR1cm4gdHJ1ZSwgd2hlcmUgdGhlIGZ1bmN0aW9uYWxpdHkgd2FzIGFjY3VyYXRlIGFuZCBpbiB1c2UuXG5cdCAqXG5cdCAqIEBkZXByZWNhdGVkIEl0IGlzIGRlcHJlY2F0ZWQgYW5kIG1vZGVybiBicm93c2VycyByZXR1cm4gdHJ1ZSBpbiBhbGwgY2FzZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbdmVyc2lvbl1cblx0ICogQHJldHVybnMge2Jvb2xlYW59IGFsd2F5cyB0cnVlXG5cdCAqXG5cdCAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTUltcGxlbWVudGF0aW9uL2hhc0ZlYXR1cmUgTUROXG5cdCAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL1JFQy1ET00tTGV2ZWwtMS9sZXZlbC1vbmUtY29yZS5odG1sI0lELTVDRUQ5NEQ3IERPTSBMZXZlbCAxIENvcmVcblx0ICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlIERPTSBMaXZpbmcgU3RhbmRhcmRcblx0ICovXG5cdGhhc0ZlYXR1cmU6IGZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBYTUwgRG9jdW1lbnQgb2JqZWN0IG9mIHRoZSBzcGVjaWZpZWQgdHlwZSB3aXRoIGl0cyBkb2N1bWVudCBlbGVtZW50LlxuXHQgKlxuXHQgKiBfX0l0IGJlaGF2ZXMgc2xpZ2h0bHkgZGlmZmVyZW50IGZyb20gdGhlIGRlc2NyaXB0aW9uIGluIHRoZSBsaXZpbmcgc3RhbmRhcmRfXzpcblx0ICogLSBUaGVyZSBpcyBubyBpbnRlcmZhY2UvY2xhc3MgYFhNTERvY3VtZW50YCwgaXQgcmV0dXJucyBhIGBEb2N1bWVudGAgaW5zdGFuY2UuXG5cdCAqIC0gYGNvbnRlbnRUeXBlYCwgYGVuY29kaW5nYCwgYG1vZGVgLCBgb3JpZ2luYCwgYHVybGAgZmllbGRzIGFyZSBjdXJyZW50bHkgbm90IGRlY2xhcmVkLlxuXHQgKiAtIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IHZhbGlkYXRpbmcgbmFtZXMgb3IgcXVhbGlmaWVkIG5hbWVzXG5cdCAqICAgKHdoZW4gcGFyc2luZyBYTUwgc3RyaW5ncywgdGhlIFNBWCBwYXJzZXIgdGFrZXMgY2FyZSBvZiB0aGF0KVxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBuYW1lc3BhY2VVUklcblx0ICogQHBhcmFtIHtzdHJpbmd9IHF1YWxpZmllZE5hbWVcblx0ICogQHBhcmFtIHtEb2N1bWVudFR5cGU9bnVsbH0gZG9jdHlwZVxuXHQgKiBAcmV0dXJucyB7RG9jdW1lbnR9XG5cdCAqXG5cdCAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTUltcGxlbWVudGF0aW9uL2NyZWF0ZURvY3VtZW50IE1ETlxuXHQgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1Db3JlL2NvcmUuaHRtbCNMZXZlbC0yLUNvcmUtRE9NLWNyZWF0ZURvY3VtZW50IERPTSBMZXZlbCAyIENvcmUgKGluaXRpYWwpXG5cdCAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24tY3JlYXRlZG9jdW1lbnQgIERPTSBMZXZlbCAyIENvcmVcblx0ICpcblx0ICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI3ZhbGlkYXRlLWFuZC1leHRyYWN0IERPTTogVmFsaWRhdGUgYW5kIGV4dHJhY3Rcblx0ICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIveG1sLyNOVC1OYW1lU3RhcnRDaGFyIFhNTCBTcGVjOiBOYW1lc1xuXHQgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwtbmFtZXMvI25zLXF1YWxuYW1lcyBYTUwgTmFtZXNwYWNlczogUXVhbGlmaWVkIG5hbWVzXG5cdCAqL1xuXHRjcmVhdGVEb2N1bWVudDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCAgcXVhbGlmaWVkTmFtZSwgZG9jdHlwZSl7XG5cdFx0dmFyIGRvYyA9IG5ldyBEb2N1bWVudCgpO1xuXHRcdGRvYy5pbXBsZW1lbnRhdGlvbiA9IHRoaXM7XG5cdFx0ZG9jLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0XHRkb2MuZG9jdHlwZSA9IGRvY3R5cGUgfHwgbnVsbDtcblx0XHRpZiAoZG9jdHlwZSl7XG5cdFx0XHRkb2MuYXBwZW5kQ2hpbGQoZG9jdHlwZSk7XG5cdFx0fVxuXHRcdGlmIChxdWFsaWZpZWROYW1lKXtcblx0XHRcdHZhciByb290ID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpO1xuXHRcdFx0ZG9jLmFwcGVuZENoaWxkKHJvb3QpO1xuXHRcdH1cblx0XHRyZXR1cm4gZG9jO1xuXHR9LFxuXHQvKipcblx0ICogUmV0dXJucyBhIGRvY3R5cGUsIHdpdGggdGhlIGdpdmVuIGBxdWFsaWZpZWROYW1lYCwgYHB1YmxpY0lkYCwgYW5kIGBzeXN0ZW1JZGAuXG5cdCAqXG5cdCAqIF9fVGhpcyBiZWhhdmlvciBpcyBzbGlnaHRseSBkaWZmZXJlbnQgZnJvbSB0aGUgaW4gdGhlIHNwZWNzX186XG5cdCAqIC0gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgdmFsaWRhdGluZyBuYW1lcyBvciBxdWFsaWZpZWQgbmFtZXNcblx0ICogICAod2hlbiBwYXJzaW5nIFhNTCBzdHJpbmdzLCB0aGUgU0FYIHBhcnNlciB0YWtlcyBjYXJlIG9mIHRoYXQpXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBxdWFsaWZpZWROYW1lXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbcHVibGljSWRdXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbc3lzdGVtSWRdXG5cdCAqIEByZXR1cm5zIHtEb2N1bWVudFR5cGV9IHdoaWNoIGNhbiBlaXRoZXIgYmUgdXNlZCB3aXRoIGBET01JbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudGAgdXBvbiBkb2N1bWVudCBjcmVhdGlvblxuXHQgKiBcdFx0XHRcdCAgb3IgY2FuIGJlIHB1dCBpbnRvIHRoZSBkb2N1bWVudCB2aWEgbWV0aG9kcyBsaWtlIGBOb2RlLmluc2VydEJlZm9yZSgpYCBvciBgTm9kZS5yZXBsYWNlQ2hpbGQoKWBcblx0ICpcblx0ICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRE9NSW1wbGVtZW50YXRpb24vY3JlYXRlRG9jdW1lbnRUeXBlIE1ETlxuXHQgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1Db3JlL2NvcmUuaHRtbCNMZXZlbC0yLUNvcmUtRE9NLWNyZWF0ZURvY1R5cGUgRE9NIExldmVsIDIgQ29yZVxuXHQgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWNyZWF0ZWRvY3VtZW50dHlwZSBET00gTGl2aW5nIFN0YW5kYXJkXG5cdCAqXG5cdCAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyN2YWxpZGF0ZS1hbmQtZXh0cmFjdCBET006IFZhbGlkYXRlIGFuZCBleHRyYWN0XG5cdCAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC8jTlQtTmFtZVN0YXJ0Q2hhciBYTUwgU3BlYzogTmFtZXNcblx0ICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIveG1sLW5hbWVzLyNucy1xdWFsbmFtZXMgWE1MIE5hbWVzcGFjZXM6IFF1YWxpZmllZCBuYW1lc1xuXHQgKi9cblx0Y3JlYXRlRG9jdW1lbnRUeXBlOiBmdW5jdGlvbihxdWFsaWZpZWROYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpe1xuXHRcdHZhciBub2RlID0gbmV3IERvY3VtZW50VHlwZSgpO1xuXHRcdG5vZGUubmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5ub2RlTmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5wdWJsaWNJZCA9IHB1YmxpY0lkIHx8ICcnO1xuXHRcdG5vZGUuc3lzdGVtSWQgPSBzeXN0ZW1JZCB8fCAnJztcblxuXHRcdHJldHVybiBub2RlO1xuXHR9XG59O1xuXG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAwL1JFQy1ET00tTGV2ZWwtMi1Db3JlLTIwMDAxMTEzL2NvcmUuaHRtbCNJRC0xOTUwNjQxMjQ3XG4gKi9cblxuZnVuY3Rpb24gTm9kZSgpIHtcbn07XG5cbk5vZGUucHJvdG90eXBlID0ge1xuXHRmaXJzdENoaWxkIDogbnVsbCxcblx0bGFzdENoaWxkIDogbnVsbCxcblx0cHJldmlvdXNTaWJsaW5nIDogbnVsbCxcblx0bmV4dFNpYmxpbmcgOiBudWxsLFxuXHRhdHRyaWJ1dGVzIDogbnVsbCxcblx0cGFyZW50Tm9kZSA6IG51bGwsXG5cdGNoaWxkTm9kZXMgOiBudWxsLFxuXHRvd25lckRvY3VtZW50IDogbnVsbCxcblx0bm9kZVZhbHVlIDogbnVsbCxcblx0bmFtZXNwYWNlVVJJIDogbnVsbCxcblx0cHJlZml4IDogbnVsbCxcblx0bG9jYWxOYW1lIDogbnVsbCxcblx0Ly8gTW9kaWZpZWQgaW4gRE9NIExldmVsIDI6XG5cdGluc2VydEJlZm9yZTpmdW5jdGlvbihuZXdDaGlsZCwgcmVmQ2hpbGQpey8vcmFpc2VzXG5cdFx0cmV0dXJuIF9pbnNlcnRCZWZvcmUodGhpcyxuZXdDaGlsZCxyZWZDaGlsZCk7XG5cdH0sXG5cdHJlcGxhY2VDaGlsZDpmdW5jdGlvbihuZXdDaGlsZCwgb2xkQ2hpbGQpey8vcmFpc2VzXG5cdFx0X2luc2VydEJlZm9yZSh0aGlzLCBuZXdDaGlsZCxvbGRDaGlsZCwgYXNzZXJ0UHJlUmVwbGFjZW1lbnRWYWxpZGl0eUluRG9jdW1lbnQpO1xuXHRcdGlmKG9sZENoaWxkKXtcblx0XHRcdHRoaXMucmVtb3ZlQ2hpbGQob2xkQ2hpbGQpO1xuXHRcdH1cblx0fSxcblx0cmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24ob2xkQ2hpbGQpe1xuXHRcdHJldHVybiBfcmVtb3ZlQ2hpbGQodGhpcyxvbGRDaGlsZCk7XG5cdH0sXG5cdGFwcGVuZENoaWxkOmZ1bmN0aW9uKG5ld0NoaWxkKXtcblx0XHRyZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUobmV3Q2hpbGQsbnVsbCk7XG5cdH0sXG5cdGhhc0NoaWxkTm9kZXM6ZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gdGhpcy5maXJzdENoaWxkICE9IG51bGw7XG5cdH0sXG5cdGNsb25lTm9kZTpmdW5jdGlvbihkZWVwKXtcblx0XHRyZXR1cm4gY2xvbmVOb2RlKHRoaXMub3duZXJEb2N1bWVudHx8dGhpcyx0aGlzLGRlZXApO1xuXHR9LFxuXHQvLyBNb2RpZmllZCBpbiBET00gTGV2ZWwgMjpcblx0bm9ybWFsaXplOmZ1bmN0aW9uKCl7XG5cdFx0dmFyIGNoaWxkID0gdGhpcy5maXJzdENoaWxkO1xuXHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdHZhciBuZXh0ID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHRpZihuZXh0ICYmIG5leHQubm9kZVR5cGUgPT0gVEVYVF9OT0RFICYmIGNoaWxkLm5vZGVUeXBlID09IFRFWFRfTk9ERSl7XG5cdFx0XHRcdHRoaXMucmVtb3ZlQ2hpbGQobmV4dCk7XG5cdFx0XHRcdGNoaWxkLmFwcGVuZERhdGEobmV4dC5kYXRhKTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRjaGlsZC5ub3JtYWxpemUoKTtcblx0XHRcdFx0Y2hpbGQgPSBuZXh0O1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcbiAgXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRpc1N1cHBvcnRlZDpmdW5jdGlvbihmZWF0dXJlLCB2ZXJzaW9uKXtcblx0XHRyZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoZmVhdHVyZSx2ZXJzaW9uKTtcblx0fSxcbiAgICAvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuICAgIGhhc0F0dHJpYnV0ZXM6ZnVuY3Rpb24oKXtcbiAgICBcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoPjA7XG4gICAgfSxcblx0LyoqXG5cdCAqIExvb2sgdXAgdGhlIHByZWZpeCBhc3NvY2lhdGVkIHRvIHRoZSBnaXZlbiBuYW1lc3BhY2UgVVJJLCBzdGFydGluZyBmcm9tIHRoaXMgbm9kZS5cblx0ICogKipUaGUgZGVmYXVsdCBuYW1lc3BhY2UgZGVjbGFyYXRpb25zIGFyZSBpZ25vcmVkIGJ5IHRoaXMgbWV0aG9kLioqXG5cdCAqIFNlZSBOYW1lc3BhY2UgUHJlZml4IExvb2t1cCBmb3IgZGV0YWlscyBvbiB0aGUgYWxnb3JpdGhtIHVzZWQgYnkgdGhpcyBtZXRob2QuXG5cdCAqXG5cdCAqIF9Ob3RlOiBUaGUgaW1wbGVtZW50YXRpb24gc2VlbXMgdG8gYmUgaW5jb21wbGV0ZSB3aGVuIGNvbXBhcmVkIHRvIHRoZSBhbGdvcml0aG0gZGVzY3JpYmVkIGluIHRoZSBzcGVjcy5fXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gbmFtZXNwYWNlVVJJXG5cdCAqIEByZXR1cm5zIHtzdHJpbmcgfCBudWxsfVxuXHQgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1Db3JlL2NvcmUuaHRtbCNOb2RlMy1sb29rdXBOYW1lc3BhY2VQcmVmaXhcblx0ICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9uYW1lc3BhY2VzLWFsZ29yaXRobXMuaHRtbCNsb29rdXBOYW1lc3BhY2VQcmVmaXhBbGdvXG5cdCAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1sb29rdXBwcmVmaXhcblx0ICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20veG1sZG9tL3htbGRvbS9pc3N1ZXMvMzIyXG5cdCAqL1xuICAgIGxvb2t1cFByZWZpeDpmdW5jdGlvbihuYW1lc3BhY2VVUkkpe1xuICAgIFx0dmFyIGVsID0gdGhpcztcbiAgICBcdHdoaWxlKGVsKXtcbiAgICBcdFx0dmFyIG1hcCA9IGVsLl9uc01hcDtcbiAgICBcdFx0Ly9jb25zb2xlLmRpcihtYXApXG4gICAgXHRcdGlmKG1hcCl7XG4gICAgXHRcdFx0Zm9yKHZhciBuIGluIG1hcCl7XG5cdFx0XHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcCwgbikgJiYgbWFwW25dID09PSBuYW1lc3BhY2VVUkkpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG47XG5cdFx0XHRcdFx0XHR9XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9XG4gICAgXHRcdGVsID0gZWwubm9kZVR5cGUgPT0gQVRUUklCVVRFX05PREU/ZWwub3duZXJEb2N1bWVudCA6IGVsLnBhcmVudE5vZGU7XG4gICAgXHR9XG4gICAgXHRyZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDM6XG4gICAgbG9va3VwTmFtZXNwYWNlVVJJOmZ1bmN0aW9uKHByZWZpeCl7XG4gICAgXHR2YXIgZWwgPSB0aGlzO1xuICAgIFx0d2hpbGUoZWwpe1xuICAgIFx0XHR2YXIgbWFwID0gZWwuX25zTWFwO1xuICAgIFx0XHQvL2NvbnNvbGUuZGlyKG1hcClcbiAgICBcdFx0aWYobWFwKXtcbiAgICBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwLCBwcmVmaXgpKXtcbiAgICBcdFx0XHRcdHJldHVybiBtYXBbcHJlZml4XSA7XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9XG4gICAgXHRcdGVsID0gZWwubm9kZVR5cGUgPT0gQVRUUklCVVRFX05PREU/ZWwub3duZXJEb2N1bWVudCA6IGVsLnBhcmVudE5vZGU7XG4gICAgXHR9XG4gICAgXHRyZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDM6XG4gICAgaXNEZWZhdWx0TmFtZXNwYWNlOmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSl7XG4gICAgXHR2YXIgcHJlZml4ID0gdGhpcy5sb29rdXBQcmVmaXgobmFtZXNwYWNlVVJJKTtcbiAgICBcdHJldHVybiBwcmVmaXggPT0gbnVsbDtcbiAgICB9XG59O1xuXG5cbmZ1bmN0aW9uIF94bWxFbmNvZGVyKGMpe1xuXHRyZXR1cm4gYyA9PSAnPCcgJiYgJyZsdDsnIHx8XG4gICAgICAgICBjID09ICc+JyAmJiAnJmd0OycgfHxcbiAgICAgICAgIGMgPT0gJyYnICYmICcmYW1wOycgfHxcbiAgICAgICAgIGMgPT0gJ1wiJyAmJiAnJnF1b3Q7JyB8fFxuICAgICAgICAgJyYjJytjLmNoYXJDb2RlQXQoKSsnOydcbn1cblxuXG5jb3B5KE5vZGVUeXBlLE5vZGUpO1xuY29weShOb2RlVHlwZSxOb2RlLnByb3RvdHlwZSk7XG5cbi8qKlxuICogQHBhcmFtIGNhbGxiYWNrIHJldHVybiB0cnVlIGZvciBjb250aW51ZSxmYWxzZSBmb3IgYnJlYWtcbiAqIEByZXR1cm4gYm9vbGVhbiB0cnVlOiBicmVhayB2aXNpdDtcbiAqL1xuZnVuY3Rpb24gX3Zpc2l0Tm9kZShub2RlLGNhbGxiYWNrKXtcblx0aWYoY2FsbGJhY2sobm9kZSkpe1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmKG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQpe1xuXHRcdGRve1xuXHRcdFx0aWYoX3Zpc2l0Tm9kZShub2RlLGNhbGxiYWNrKSl7cmV0dXJuIHRydWV9XG4gICAgICAgIH13aGlsZShub2RlPW5vZGUubmV4dFNpYmxpbmcpXG4gICAgfVxufVxuXG5cblxuZnVuY3Rpb24gRG9jdW1lbnQoKXtcblx0dGhpcy5vd25lckRvY3VtZW50ID0gdGhpcztcbn1cblxuZnVuY3Rpb24gX29uQWRkQXR0cmlidXRlKGRvYyxlbCxuZXdBdHRyKXtcblx0ZG9jICYmIGRvYy5faW5jKys7XG5cdHZhciBucyA9IG5ld0F0dHIubmFtZXNwYWNlVVJJIDtcblx0aWYobnMgPT09IE5BTUVTUEFDRS5YTUxOUyl7XG5cdFx0Ly91cGRhdGUgbmFtZXNwYWNlXG5cdFx0ZWwuX25zTWFwW25ld0F0dHIucHJlZml4P25ld0F0dHIubG9jYWxOYW1lOicnXSA9IG5ld0F0dHIudmFsdWVcblx0fVxufVxuXG5mdW5jdGlvbiBfb25SZW1vdmVBdHRyaWJ1dGUoZG9jLGVsLG5ld0F0dHIscmVtb3ZlKXtcblx0ZG9jICYmIGRvYy5faW5jKys7XG5cdHZhciBucyA9IG5ld0F0dHIubmFtZXNwYWNlVVJJIDtcblx0aWYobnMgPT09IE5BTUVTUEFDRS5YTUxOUyl7XG5cdFx0Ly91cGRhdGUgbmFtZXNwYWNlXG5cdFx0ZGVsZXRlIGVsLl9uc01hcFtuZXdBdHRyLnByZWZpeD9uZXdBdHRyLmxvY2FsTmFtZTonJ11cblx0fVxufVxuXG4vKipcbiAqIFVwZGF0ZXMgYGVsLmNoaWxkTm9kZXNgLCB1cGRhdGluZyB0aGUgaW5kZXhlZCBpdGVtcyBhbmQgaXQncyBgbGVuZ3RoYC5cbiAqIFBhc3NpbmcgYG5ld0NoaWxkYCBtZWFucyBpdCB3aWxsIGJlIGFwcGVuZGVkLlxuICogT3RoZXJ3aXNlIGl0J3MgYXNzdW1lZCB0aGF0IGFuIGl0ZW0gaGFzIGJlZW4gcmVtb3ZlZCxcbiAqIGFuZCBgZWwuZmlyc3ROb2RlYCBhbmQgaXQncyBgLm5leHRTaWJsaW5nYCBhcmUgdXNlZFxuICogdG8gd2FsayB0aGUgY3VycmVudCBsaXN0IG9mIGNoaWxkIG5vZGVzLlxuICpcbiAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvY1xuICogQHBhcmFtIHtOb2RlfSBlbFxuICogQHBhcmFtIHtOb2RlfSBbbmV3Q2hpbGRdXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfb25VcGRhdGVDaGlsZCAoZG9jLCBlbCwgbmV3Q2hpbGQpIHtcblx0aWYoZG9jICYmIGRvYy5faW5jKXtcblx0XHRkb2MuX2luYysrO1xuXHRcdC8vdXBkYXRlIGNoaWxkTm9kZXNcblx0XHR2YXIgY3MgPSBlbC5jaGlsZE5vZGVzO1xuXHRcdGlmIChuZXdDaGlsZCkge1xuXHRcdFx0Y3NbY3MubGVuZ3RoKytdID0gbmV3Q2hpbGQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBjaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHR3aGlsZSAoY2hpbGQpIHtcblx0XHRcdFx0Y3NbaSsrXSA9IGNoaWxkO1xuXHRcdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0fVxuXHRcdFx0Y3MubGVuZ3RoID0gaTtcblx0XHRcdGRlbGV0ZSBjc1tjcy5sZW5ndGhdO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGNvbm5lY3Rpb25zIGJldHdlZW4gYHBhcmVudE5vZGVgIGFuZCBgY2hpbGRgXG4gKiBhbmQgYW55IGV4aXN0aW5nIGBjaGlsZC5wcmV2aW91c1NpYmxpbmdgIG9yIGBjaGlsZC5uZXh0U2libGluZ2AuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20veG1sZG9tL3htbGRvbS9pc3N1ZXMvMTM1XG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS94bWxkb20veG1sZG9tL2lzc3Vlcy8xNDVcbiAqXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudE5vZGVcbiAqIEBwYXJhbSB7Tm9kZX0gY2hpbGRcbiAqIEByZXR1cm5zIHtOb2RlfSB0aGUgY2hpbGQgdGhhdCB3YXMgcmVtb3ZlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9yZW1vdmVDaGlsZCAocGFyZW50Tm9kZSwgY2hpbGQpIHtcblx0dmFyIHByZXZpb3VzID0gY2hpbGQucHJldmlvdXNTaWJsaW5nO1xuXHR2YXIgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRpZiAocHJldmlvdXMpIHtcblx0XHRwcmV2aW91cy5uZXh0U2libGluZyA9IG5leHQ7XG5cdH0gZWxzZSB7XG5cdFx0cGFyZW50Tm9kZS5maXJzdENoaWxkID0gbmV4dDtcblx0fVxuXHRpZiAobmV4dCkge1xuXHRcdG5leHQucHJldmlvdXNTaWJsaW5nID0gcHJldmlvdXM7XG5cdH0gZWxzZSB7XG5cdFx0cGFyZW50Tm9kZS5sYXN0Q2hpbGQgPSBwcmV2aW91cztcblx0fVxuXHRjaGlsZC5wYXJlbnROb2RlID0gbnVsbDtcblx0Y2hpbGQucHJldmlvdXNTaWJsaW5nID0gbnVsbDtcblx0Y2hpbGQubmV4dFNpYmxpbmcgPSBudWxsO1xuXHRfb25VcGRhdGVDaGlsZChwYXJlbnROb2RlLm93bmVyRG9jdW1lbnQsIHBhcmVudE5vZGUpO1xuXHRyZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgYG5vZGVgIGNhbiBiZSBhIHBhcmVudCBmb3IgaW5zZXJ0aW9uLlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaGFzVmFsaWRQYXJlbnROb2RlVHlwZShub2RlKSB7XG5cdHJldHVybiAoXG5cdFx0bm9kZSAmJlxuXHRcdChub2RlLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKVxuXHQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGBub2RlYCBjYW4gYmUgaW5zZXJ0ZWQgYWNjb3JkaW5nIHRvIGl0J3MgYG5vZGVUeXBlYC5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc0luc2VydGFibGVOb2RlVHlwZShub2RlKSB7XG5cdHJldHVybiAoXG5cdFx0bm9kZSAmJlxuXHRcdChpc0VsZW1lbnROb2RlKG5vZGUpIHx8XG5cdFx0XHRpc1RleHROb2RlKG5vZGUpIHx8XG5cdFx0XHRpc0RvY1R5cGVOb2RlKG5vZGUpIHx8XG5cdFx0XHRub2RlLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgfHxcblx0XHRcdG5vZGUubm9kZVR5cGUgPT09IE5vZGUuQ09NTUVOVF9OT0RFIHx8XG5cdFx0XHRub2RlLm5vZGVUeXBlID09PSBOb2RlLlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSlcblx0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYG5vZGVgIGlzIGEgRE9DVFlQRSBub2RlXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0RvY1R5cGVOb2RlKG5vZGUpIHtcblx0cmV0dXJuIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9UWVBFX05PREU7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBub2RlIGlzIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRWxlbWVudE5vZGUobm9kZSkge1xuXHRyZXR1cm4gbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGBub2RlYCBpcyBhIHRleHQgbm9kZVxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShub2RlKSB7XG5cdHJldHVybiBub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGVuIGVsZW1lbnQgbm9kZSBjYW4gYmUgaW5zZXJ0ZWQgYmVmb3JlIGBjaGlsZGAsIG9yIGF0IHRoZSBlbmQgaWYgY2hpbGQgaXMgZmFsc3ksXG4gKiBhY2NvcmRpbmcgdG8gdGhlIHByZXNlbmNlIGFuZCBwb3NpdGlvbiBvZiBhIGRvY3R5cGUgbm9kZSBvbiB0aGUgc2FtZSBsZXZlbC5cbiAqXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBkb2MgVGhlIGRvY3VtZW50IG5vZGVcbiAqIEBwYXJhbSB7Tm9kZX0gY2hpbGQgdGhlIG5vZGUgdGhhdCB3b3VsZCBiZWNvbWUgdGhlIG5leHRTaWJsaW5nIGlmIHRoZSBlbGVtZW50IHdvdWxkIGJlIGluc2VydGVkXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGFuIGVsZW1lbnQgY2FuIGJlIGluc2VydGVkIGJlZm9yZSBjaGlsZFxuICogQHByaXZhdGVcbiAqIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ub2RlLWVuc3VyZS1wcmUtaW5zZXJ0aW9uLXZhbGlkaXR5XG4gKi9cbmZ1bmN0aW9uIGlzRWxlbWVudEluc2VydGlvblBvc3NpYmxlKGRvYywgY2hpbGQpIHtcblx0dmFyIHBhcmVudENoaWxkTm9kZXMgPSBkb2MuY2hpbGROb2RlcyB8fCBbXTtcblx0aWYgKGZpbmQocGFyZW50Q2hpbGROb2RlcywgaXNFbGVtZW50Tm9kZSkgfHwgaXNEb2NUeXBlTm9kZShjaGlsZCkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dmFyIGRvY1R5cGVOb2RlID0gZmluZChwYXJlbnRDaGlsZE5vZGVzLCBpc0RvY1R5cGVOb2RlKTtcblx0cmV0dXJuICEoY2hpbGQgJiYgZG9jVHlwZU5vZGUgJiYgcGFyZW50Q2hpbGROb2Rlcy5pbmRleE9mKGRvY1R5cGVOb2RlKSA+IHBhcmVudENoaWxkTm9kZXMuaW5kZXhPZihjaGlsZCkpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGVuIGVsZW1lbnQgbm9kZSBjYW4gYmUgaW5zZXJ0ZWQgYmVmb3JlIGBjaGlsZGAsIG9yIGF0IHRoZSBlbmQgaWYgY2hpbGQgaXMgZmFsc3ksXG4gKiBhY2NvcmRpbmcgdG8gdGhlIHByZXNlbmNlIGFuZCBwb3NpdGlvbiBvZiBhIGRvY3R5cGUgbm9kZSBvbiB0aGUgc2FtZSBsZXZlbC5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IGRvYyBUaGUgZG9jdW1lbnQgbm9kZVxuICogQHBhcmFtIHtOb2RlfSBjaGlsZCB0aGUgbm9kZSB0aGF0IHdvdWxkIGJlY29tZSB0aGUgbmV4dFNpYmxpbmcgaWYgdGhlIGVsZW1lbnQgd291bGQgYmUgaW5zZXJ0ZWRcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgYW4gZWxlbWVudCBjYW4gYmUgaW5zZXJ0ZWQgYmVmb3JlIGNoaWxkXG4gKiBAcHJpdmF0ZVxuICogaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW5vZGUtZW5zdXJlLXByZS1pbnNlcnRpb24tdmFsaWRpdHlcbiAqL1xuZnVuY3Rpb24gaXNFbGVtZW50UmVwbGFjZW1lbnRQb3NzaWJsZShkb2MsIGNoaWxkKSB7XG5cdHZhciBwYXJlbnRDaGlsZE5vZGVzID0gZG9jLmNoaWxkTm9kZXMgfHwgW107XG5cblx0ZnVuY3Rpb24gaGFzRWxlbWVudENoaWxkVGhhdElzTm90Q2hpbGQobm9kZSkge1xuXHRcdHJldHVybiBpc0VsZW1lbnROb2RlKG5vZGUpICYmIG5vZGUgIT09IGNoaWxkO1xuXHR9XG5cblx0aWYgKGZpbmQocGFyZW50Q2hpbGROb2RlcywgaGFzRWxlbWVudENoaWxkVGhhdElzTm90Q2hpbGQpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHZhciBkb2NUeXBlTm9kZSA9IGZpbmQocGFyZW50Q2hpbGROb2RlcywgaXNEb2NUeXBlTm9kZSk7XG5cdHJldHVybiAhKGNoaWxkICYmIGRvY1R5cGVOb2RlICYmIHBhcmVudENoaWxkTm9kZXMuaW5kZXhPZihkb2NUeXBlTm9kZSkgPiBwYXJlbnRDaGlsZE5vZGVzLmluZGV4T2YoY2hpbGQpKTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogU3RlcHMgMS01IG9mIHRoZSBjaGVja3MgYmVmb3JlIGluc2VydGluZyBhbmQgYmVmb3JlIHJlcGxhY2luZyBhIGNoaWxkIGFyZSB0aGUgc2FtZS5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudCB0aGUgcGFyZW50IG5vZGUgdG8gaW5zZXJ0IGBub2RlYCBpbnRvXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgdGhlIG5vZGUgdG8gaW5zZXJ0XG4gKiBAcGFyYW0ge05vZGU9fSBjaGlsZCB0aGUgbm9kZSB0aGF0IHNob3VsZCBiZWNvbWUgdGhlIGBuZXh0U2libGluZ2Agb2YgYG5vZGVgXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqIEB0aHJvd3MgRE9NRXhjZXB0aW9uIGZvciBzZXZlcmFsIG5vZGUgY29tYmluYXRpb25zIHRoYXQgd291bGQgY3JlYXRlIGEgRE9NIHRoYXQgaXMgbm90IHdlbGwtZm9ybWVkLlxuICogQHRocm93cyBET01FeGNlcHRpb24gaWYgYGNoaWxkYCBpcyBwcm92aWRlZCBidXQgaXMgbm90IGEgY2hpbGQgb2YgYHBhcmVudGAuXG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ub2RlLWVuc3VyZS1wcmUtaW5zZXJ0aW9uLXZhbGlkaXR5XG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ub2RlLXJlcGxhY2VcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJlSW5zZXJ0aW9uVmFsaWRpdHkxdG81KHBhcmVudCwgbm9kZSwgY2hpbGQpIHtcblx0Ly8gMS4gSWYgYHBhcmVudGAgaXMgbm90IGEgRG9jdW1lbnQsIERvY3VtZW50RnJhZ21lbnQsIG9yIEVsZW1lbnQgbm9kZSwgdGhlbiB0aHJvdyBhIFwiSGllcmFyY2h5UmVxdWVzdEVycm9yXCIgRE9NRXhjZXB0aW9uLlxuXHRpZiAoIWhhc1ZhbGlkUGFyZW50Tm9kZVR5cGUocGFyZW50KSkge1xuXHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSElFUkFSQ0hZX1JFUVVFU1RfRVJSLCAnVW5leHBlY3RlZCBwYXJlbnQgbm9kZSB0eXBlICcgKyBwYXJlbnQubm9kZVR5cGUpO1xuXHR9XG5cdC8vIDIuIElmIGBub2RlYCBpcyBhIGhvc3QtaW5jbHVkaW5nIGluY2x1c2l2ZSBhbmNlc3RvciBvZiBgcGFyZW50YCwgdGhlbiB0aHJvdyBhIFwiSGllcmFyY2h5UmVxdWVzdEVycm9yXCIgRE9NRXhjZXB0aW9uLlxuXHQvLyBub3QgaW1wbGVtZW50ZWQhXG5cdC8vIDMuIElmIGBjaGlsZGAgaXMgbm9uLW51bGwgYW5kIGl0cyBwYXJlbnQgaXMgbm90IGBwYXJlbnRgLCB0aGVuIHRocm93IGEgXCJOb3RGb3VuZEVycm9yXCIgRE9NRXhjZXB0aW9uLlxuXHRpZiAoY2hpbGQgJiYgY2hpbGQucGFyZW50Tm9kZSAhPT0gcGFyZW50KSB7XG5cdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihOT1RfRk9VTkRfRVJSLCAnY2hpbGQgbm90IGluIHBhcmVudCcpO1xuXHR9XG5cdGlmIChcblx0XHQvLyA0LiBJZiBgbm9kZWAgaXMgbm90IGEgRG9jdW1lbnRGcmFnbWVudCwgRG9jdW1lbnRUeXBlLCBFbGVtZW50LCBvciBDaGFyYWN0ZXJEYXRhIG5vZGUsIHRoZW4gdGhyb3cgYSBcIkhpZXJhcmNoeVJlcXVlc3RFcnJvclwiIERPTUV4Y2VwdGlvbi5cblx0XHQhaGFzSW5zZXJ0YWJsZU5vZGVUeXBlKG5vZGUpIHx8XG5cdFx0Ly8gNS4gSWYgZWl0aGVyIGBub2RlYCBpcyBhIFRleHQgbm9kZSBhbmQgYHBhcmVudGAgaXMgYSBkb2N1bWVudCxcblx0XHQvLyB0aGUgc2F4IHBhcnNlciBjdXJyZW50bHkgYWRkcyB0b3AgbGV2ZWwgdGV4dCBub2RlcywgdGhpcyB3aWxsIGJlIGZpeGVkIGluIDAuOS4wXG5cdFx0Ly8gfHwgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFICYmIHBhcmVudC5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9OT0RFKVxuXHRcdC8vIG9yIGBub2RlYCBpcyBhIGRvY3R5cGUgYW5kIGBwYXJlbnRgIGlzIG5vdCBhIGRvY3VtZW50LCB0aGVuIHRocm93IGEgXCJIaWVyYXJjaHlSZXF1ZXN0RXJyb3JcIiBET01FeGNlcHRpb24uXG5cdFx0KGlzRG9jVHlwZU5vZGUobm9kZSkgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSBOb2RlLkRPQ1VNRU5UX05PREUpXG5cdCkge1xuXHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oXG5cdFx0XHRISUVSQVJDSFlfUkVRVUVTVF9FUlIsXG5cdFx0XHQnVW5leHBlY3RlZCBub2RlIHR5cGUgJyArIG5vZGUubm9kZVR5cGUgKyAnIGZvciBwYXJlbnQgbm9kZSB0eXBlICcgKyBwYXJlbnQubm9kZVR5cGVcblx0XHQpO1xuXHR9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIFN0ZXAgNiBvZiB0aGUgY2hlY2tzIGJlZm9yZSBpbnNlcnRpbmcgYW5kIGJlZm9yZSByZXBsYWNpbmcgYSBjaGlsZCBhcmUgZGlmZmVyZW50LlxuICpcbiAqIEBwYXJhbSB7RG9jdW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IG5vZGUgdG8gaW5zZXJ0IGBub2RlYCBpbnRvXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgdGhlIG5vZGUgdG8gaW5zZXJ0XG4gKiBAcGFyYW0ge05vZGUgfCB1bmRlZmluZWR9IGNoaWxkIHRoZSBub2RlIHRoYXQgc2hvdWxkIGJlY29tZSB0aGUgYG5leHRTaWJsaW5nYCBvZiBgbm9kZWBcbiAqIEByZXR1cm5zIHtOb2RlfVxuICogQHRocm93cyBET01FeGNlcHRpb24gZm9yIHNldmVyYWwgbm9kZSBjb21iaW5hdGlvbnMgdGhhdCB3b3VsZCBjcmVhdGUgYSBET00gdGhhdCBpcyBub3Qgd2VsbC1mb3JtZWQuXG4gKiBAdGhyb3dzIERPTUV4Y2VwdGlvbiBpZiBgY2hpbGRgIGlzIHByb3ZpZGVkIGJ1dCBpcyBub3QgYSBjaGlsZCBvZiBgcGFyZW50YC5cbiAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW5vZGUtZW5zdXJlLXByZS1pbnNlcnRpb24tdmFsaWRpdHlcbiAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW5vZGUtcmVwbGFjZVxuICovXG5mdW5jdGlvbiBhc3NlcnRQcmVJbnNlcnRpb25WYWxpZGl0eUluRG9jdW1lbnQocGFyZW50LCBub2RlLCBjaGlsZCkge1xuXHR2YXIgcGFyZW50Q2hpbGROb2RlcyA9IHBhcmVudC5jaGlsZE5vZGVzIHx8IFtdO1xuXHR2YXIgbm9kZUNoaWxkTm9kZXMgPSBub2RlLmNoaWxkTm9kZXMgfHwgW107XG5cblx0Ly8gRG9jdW1lbnRGcmFnbWVudFxuXHRpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG5cdFx0dmFyIG5vZGVDaGlsZEVsZW1lbnRzID0gbm9kZUNoaWxkTm9kZXMuZmlsdGVyKGlzRWxlbWVudE5vZGUpO1xuXHRcdC8vIElmIG5vZGUgaGFzIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBjaGlsZCBvciBoYXMgYSBUZXh0IG5vZGUgY2hpbGQuXG5cdFx0aWYgKG5vZGVDaGlsZEVsZW1lbnRzLmxlbmd0aCA+IDEgfHwgZmluZChub2RlQ2hpbGROb2RlcywgaXNUZXh0Tm9kZSkpIHtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSElFUkFSQ0hZX1JFUVVFU1RfRVJSLCAnTW9yZSB0aGFuIG9uZSBlbGVtZW50IG9yIHRleHQgaW4gZnJhZ21lbnQnKTtcblx0XHR9XG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBgbm9kZWAgaGFzIG9uZSBlbGVtZW50IGNoaWxkIGFuZCBlaXRoZXIgYHBhcmVudGAgaGFzIGFuIGVsZW1lbnQgY2hpbGQsXG5cdFx0Ly8gYGNoaWxkYCBpcyBhIGRvY3R5cGUsIG9yIGBjaGlsZGAgaXMgbm9uLW51bGwgYW5kIGEgZG9jdHlwZSBpcyBmb2xsb3dpbmcgYGNoaWxkYC5cblx0XHRpZiAobm9kZUNoaWxkRWxlbWVudHMubGVuZ3RoID09PSAxICYmICFpc0VsZW1lbnRJbnNlcnRpb25Qb3NzaWJsZShwYXJlbnQsIGNoaWxkKSkge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihISUVSQVJDSFlfUkVRVUVTVF9FUlIsICdFbGVtZW50IGluIGZyYWdtZW50IGNhbiBub3QgYmUgaW5zZXJ0ZWQgYmVmb3JlIGRvY3R5cGUnKTtcblx0XHR9XG5cdH1cblx0Ly8gRWxlbWVudFxuXHRpZiAoaXNFbGVtZW50Tm9kZShub2RlKSkge1xuXHRcdC8vIGBwYXJlbnRgIGhhcyBhbiBlbGVtZW50IGNoaWxkLCBgY2hpbGRgIGlzIGEgZG9jdHlwZSxcblx0XHQvLyBvciBgY2hpbGRgIGlzIG5vbi1udWxsIGFuZCBhIGRvY3R5cGUgaXMgZm9sbG93aW5nIGBjaGlsZGAuXG5cdFx0aWYgKCFpc0VsZW1lbnRJbnNlcnRpb25Qb3NzaWJsZShwYXJlbnQsIGNoaWxkKSkge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihISUVSQVJDSFlfUkVRVUVTVF9FUlIsICdPbmx5IG9uZSBlbGVtZW50IGNhbiBiZSBhZGRlZCBhbmQgb25seSBhZnRlciBkb2N0eXBlJyk7XG5cdFx0fVxuXHR9XG5cdC8vIERvY3VtZW50VHlwZVxuXHRpZiAoaXNEb2NUeXBlTm9kZShub2RlKSkge1xuXHRcdC8vIGBwYXJlbnRgIGhhcyBhIGRvY3R5cGUgY2hpbGQsXG5cdFx0aWYgKGZpbmQocGFyZW50Q2hpbGROb2RlcywgaXNEb2NUeXBlTm9kZSkpIHtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSElFUkFSQ0hZX1JFUVVFU1RfRVJSLCAnT25seSBvbmUgZG9jdHlwZSBpcyBhbGxvd2VkJyk7XG5cdFx0fVxuXHRcdHZhciBwYXJlbnRFbGVtZW50Q2hpbGQgPSBmaW5kKHBhcmVudENoaWxkTm9kZXMsIGlzRWxlbWVudE5vZGUpO1xuXHRcdC8vIGBjaGlsZGAgaXMgbm9uLW51bGwgYW5kIGFuIGVsZW1lbnQgaXMgcHJlY2VkaW5nIGBjaGlsZGAsXG5cdFx0aWYgKGNoaWxkICYmIHBhcmVudENoaWxkTm9kZXMuaW5kZXhPZihwYXJlbnRFbGVtZW50Q2hpbGQpIDwgcGFyZW50Q2hpbGROb2Rlcy5pbmRleE9mKGNoaWxkKSkge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihISUVSQVJDSFlfUkVRVUVTVF9FUlIsICdEb2N0eXBlIGNhbiBvbmx5IGJlIGluc2VydGVkIGJlZm9yZSBhbiBlbGVtZW50Jyk7XG5cdFx0fVxuXHRcdC8vIG9yIGBjaGlsZGAgaXMgbnVsbCBhbmQgYHBhcmVudGAgaGFzIGFuIGVsZW1lbnQgY2hpbGQuXG5cdFx0aWYgKCFjaGlsZCAmJiBwYXJlbnRFbGVtZW50Q2hpbGQpIHtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSElFUkFSQ0hZX1JFUVVFU1RfRVJSLCAnRG9jdHlwZSBjYW4gbm90IGJlIGFwcGVuZGVkIHNpbmNlIGVsZW1lbnQgaXMgcHJlc2VudCcpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBTdGVwIDYgb2YgdGhlIGNoZWNrcyBiZWZvcmUgaW5zZXJ0aW5nIGFuZCBiZWZvcmUgcmVwbGFjaW5nIGEgY2hpbGQgYXJlIGRpZmZlcmVudC5cbiAqXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBub2RlIHRvIGluc2VydCBgbm9kZWAgaW50b1xuICogQHBhcmFtIHtOb2RlfSBub2RlIHRoZSBub2RlIHRvIGluc2VydFxuICogQHBhcmFtIHtOb2RlIHwgdW5kZWZpbmVkfSBjaGlsZCB0aGUgbm9kZSB0aGF0IHNob3VsZCBiZWNvbWUgdGhlIGBuZXh0U2libGluZ2Agb2YgYG5vZGVgXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqIEB0aHJvd3MgRE9NRXhjZXB0aW9uIGZvciBzZXZlcmFsIG5vZGUgY29tYmluYXRpb25zIHRoYXQgd291bGQgY3JlYXRlIGEgRE9NIHRoYXQgaXMgbm90IHdlbGwtZm9ybWVkLlxuICogQHRocm93cyBET01FeGNlcHRpb24gaWYgYGNoaWxkYCBpcyBwcm92aWRlZCBidXQgaXMgbm90IGEgY2hpbGQgb2YgYHBhcmVudGAuXG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ub2RlLWVuc3VyZS1wcmUtaW5zZXJ0aW9uLXZhbGlkaXR5XG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ub2RlLXJlcGxhY2VcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJlUmVwbGFjZW1lbnRWYWxpZGl0eUluRG9jdW1lbnQocGFyZW50LCBub2RlLCBjaGlsZCkge1xuXHR2YXIgcGFyZW50Q2hpbGROb2RlcyA9IHBhcmVudC5jaGlsZE5vZGVzIHx8IFtdO1xuXHR2YXIgbm9kZUNoaWxkTm9kZXMgPSBub2RlLmNoaWxkTm9kZXMgfHwgW107XG5cblx0Ly8gRG9jdW1lbnRGcmFnbWVudFxuXHRpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG5cdFx0dmFyIG5vZGVDaGlsZEVsZW1lbnRzID0gbm9kZUNoaWxkTm9kZXMuZmlsdGVyKGlzRWxlbWVudE5vZGUpO1xuXHRcdC8vIElmIGBub2RlYCBoYXMgbW9yZSB0aGFuIG9uZSBlbGVtZW50IGNoaWxkIG9yIGhhcyBhIFRleHQgbm9kZSBjaGlsZC5cblx0XHRpZiAobm9kZUNoaWxkRWxlbWVudHMubGVuZ3RoID4gMSB8fCBmaW5kKG5vZGVDaGlsZE5vZGVzLCBpc1RleHROb2RlKSkge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihISUVSQVJDSFlfUkVRVUVTVF9FUlIsICdNb3JlIHRoYW4gb25lIGVsZW1lbnQgb3IgdGV4dCBpbiBmcmFnbWVudCcpO1xuXHRcdH1cblx0XHQvLyBPdGhlcndpc2UsIGlmIGBub2RlYCBoYXMgb25lIGVsZW1lbnQgY2hpbGQgYW5kIGVpdGhlciBgcGFyZW50YCBoYXMgYW4gZWxlbWVudCBjaGlsZCB0aGF0IGlzIG5vdCBgY2hpbGRgIG9yIGEgZG9jdHlwZSBpcyBmb2xsb3dpbmcgYGNoaWxkYC5cblx0XHRpZiAobm9kZUNoaWxkRWxlbWVudHMubGVuZ3RoID09PSAxICYmICFpc0VsZW1lbnRSZXBsYWNlbWVudFBvc3NpYmxlKHBhcmVudCwgY2hpbGQpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEhJRVJBUkNIWV9SRVFVRVNUX0VSUiwgJ0VsZW1lbnQgaW4gZnJhZ21lbnQgY2FuIG5vdCBiZSBpbnNlcnRlZCBiZWZvcmUgZG9jdHlwZScpO1xuXHRcdH1cblx0fVxuXHQvLyBFbGVtZW50XG5cdGlmIChpc0VsZW1lbnROb2RlKG5vZGUpKSB7XG5cdFx0Ly8gYHBhcmVudGAgaGFzIGFuIGVsZW1lbnQgY2hpbGQgdGhhdCBpcyBub3QgYGNoaWxkYCBvciBhIGRvY3R5cGUgaXMgZm9sbG93aW5nIGBjaGlsZGAuXG5cdFx0aWYgKCFpc0VsZW1lbnRSZXBsYWNlbWVudFBvc3NpYmxlKHBhcmVudCwgY2hpbGQpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEhJRVJBUkNIWV9SRVFVRVNUX0VSUiwgJ09ubHkgb25lIGVsZW1lbnQgY2FuIGJlIGFkZGVkIGFuZCBvbmx5IGFmdGVyIGRvY3R5cGUnKTtcblx0XHR9XG5cdH1cblx0Ly8gRG9jdW1lbnRUeXBlXG5cdGlmIChpc0RvY1R5cGVOb2RlKG5vZGUpKSB7XG5cdFx0ZnVuY3Rpb24gaGFzRG9jdHlwZUNoaWxkVGhhdElzTm90Q2hpbGQobm9kZSkge1xuXHRcdFx0cmV0dXJuIGlzRG9jVHlwZU5vZGUobm9kZSkgJiYgbm9kZSAhPT0gY2hpbGQ7XG5cdFx0fVxuXG5cdFx0Ly8gYHBhcmVudGAgaGFzIGEgZG9jdHlwZSBjaGlsZCB0aGF0IGlzIG5vdCBgY2hpbGRgLFxuXHRcdGlmIChmaW5kKHBhcmVudENoaWxkTm9kZXMsIGhhc0RvY3R5cGVDaGlsZFRoYXRJc05vdENoaWxkKSkge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4Y2VwdGlvbihISUVSQVJDSFlfUkVRVUVTVF9FUlIsICdPbmx5IG9uZSBkb2N0eXBlIGlzIGFsbG93ZWQnKTtcblx0XHR9XG5cdFx0dmFyIHBhcmVudEVsZW1lbnRDaGlsZCA9IGZpbmQocGFyZW50Q2hpbGROb2RlcywgaXNFbGVtZW50Tm9kZSk7XG5cdFx0Ly8gb3IgYW4gZWxlbWVudCBpcyBwcmVjZWRpbmcgYGNoaWxkYC5cblx0XHRpZiAoY2hpbGQgJiYgcGFyZW50Q2hpbGROb2Rlcy5pbmRleE9mKHBhcmVudEVsZW1lbnRDaGlsZCkgPCBwYXJlbnRDaGlsZE5vZGVzLmluZGV4T2YoY2hpbGQpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEhJRVJBUkNIWV9SRVFVRVNUX0VSUiwgJ0RvY3R5cGUgY2FuIG9ubHkgYmUgaW5zZXJ0ZWQgYmVmb3JlIGFuIGVsZW1lbnQnKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtOb2RlfSBwYXJlbnQgdGhlIHBhcmVudCBub2RlIHRvIGluc2VydCBgbm9kZWAgaW50b1xuICogQHBhcmFtIHtOb2RlfSBub2RlIHRoZSBub2RlIHRvIGluc2VydFxuICogQHBhcmFtIHtOb2RlPX0gY2hpbGQgdGhlIG5vZGUgdGhhdCBzaG91bGQgYmVjb21lIHRoZSBgbmV4dFNpYmxpbmdgIG9mIGBub2RlYFxuICogQHJldHVybnMge05vZGV9XG4gKiBAdGhyb3dzIERPTUV4Y2VwdGlvbiBmb3Igc2V2ZXJhbCBub2RlIGNvbWJpbmF0aW9ucyB0aGF0IHdvdWxkIGNyZWF0ZSBhIERPTSB0aGF0IGlzIG5vdCB3ZWxsLWZvcm1lZC5cbiAqIEB0aHJvd3MgRE9NRXhjZXB0aW9uIGlmIGBjaGlsZGAgaXMgcHJvdmlkZWQgYnV0IGlzIG5vdCBhIGNoaWxkIG9mIGBwYXJlbnRgLlxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbm9kZS1lbnN1cmUtcHJlLWluc2VydGlvbi12YWxpZGl0eVxuICovXG5mdW5jdGlvbiBfaW5zZXJ0QmVmb3JlKHBhcmVudCwgbm9kZSwgY2hpbGQsIF9pbkRvY3VtZW50QXNzZXJ0aW9uKSB7XG5cdC8vIFRvIGVuc3VyZSBwcmUtaW5zZXJ0aW9uIHZhbGlkaXR5IG9mIGEgbm9kZSBpbnRvIGEgcGFyZW50IGJlZm9yZSBhIGNoaWxkLCBydW4gdGhlc2Ugc3RlcHM6XG5cdGFzc2VydFByZUluc2VydGlvblZhbGlkaXR5MXRvNShwYXJlbnQsIG5vZGUsIGNoaWxkKTtcblxuXHQvLyBJZiBwYXJlbnQgaXMgYSBkb2N1bWVudCwgYW5kIGFueSBvZiB0aGUgc3RhdGVtZW50cyBiZWxvdywgc3dpdGNoZWQgb24gdGhlIGludGVyZmFjZSBub2RlIGltcGxlbWVudHMsXG5cdC8vIGFyZSB0cnVlLCB0aGVuIHRocm93IGEgXCJIaWVyYXJjaHlSZXF1ZXN0RXJyb3JcIiBET01FeGNlcHRpb24uXG5cdGlmIChwYXJlbnQubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfTk9ERSkge1xuXHRcdChfaW5Eb2N1bWVudEFzc2VydGlvbiB8fCBhc3NlcnRQcmVJbnNlcnRpb25WYWxpZGl0eUluRG9jdW1lbnQpKHBhcmVudCwgbm9kZSwgY2hpbGQpO1xuXHR9XG5cblx0dmFyIGNwID0gbm9kZS5wYXJlbnROb2RlO1xuXHRpZihjcCl7XG5cdFx0Y3AucmVtb3ZlQ2hpbGQobm9kZSk7Ly9yZW1vdmUgYW5kIHVwZGF0ZVxuXHR9XG5cdGlmKG5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUpe1xuXHRcdHZhciBuZXdGaXJzdCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHRpZiAobmV3Rmlyc3QgPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0fVxuXHRcdHZhciBuZXdMYXN0ID0gbm9kZS5sYXN0Q2hpbGQ7XG5cdH1lbHNle1xuXHRcdG5ld0ZpcnN0ID0gbmV3TGFzdCA9IG5vZGU7XG5cdH1cblx0dmFyIHByZSA9IGNoaWxkID8gY2hpbGQucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZDtcblxuXHRuZXdGaXJzdC5wcmV2aW91c1NpYmxpbmcgPSBwcmU7XG5cdG5ld0xhc3QubmV4dFNpYmxpbmcgPSBjaGlsZDtcblxuXG5cdGlmKHByZSl7XG5cdFx0cHJlLm5leHRTaWJsaW5nID0gbmV3Rmlyc3Q7XG5cdH1lbHNle1xuXHRcdHBhcmVudC5maXJzdENoaWxkID0gbmV3Rmlyc3Q7XG5cdH1cblx0aWYoY2hpbGQgPT0gbnVsbCl7XG5cdFx0cGFyZW50Lmxhc3RDaGlsZCA9IG5ld0xhc3Q7XG5cdH1lbHNle1xuXHRcdGNoaWxkLnByZXZpb3VzU2libGluZyA9IG5ld0xhc3Q7XG5cdH1cblx0ZG97XG5cdFx0bmV3Rmlyc3QucGFyZW50Tm9kZSA9IHBhcmVudDtcblx0fXdoaWxlKG5ld0ZpcnN0ICE9PSBuZXdMYXN0ICYmIChuZXdGaXJzdD0gbmV3Rmlyc3QubmV4dFNpYmxpbmcpKVxuXHRfb25VcGRhdGVDaGlsZChwYXJlbnQub3duZXJEb2N1bWVudHx8cGFyZW50LCBwYXJlbnQpO1xuXHQvL2NvbnNvbGUubG9nKHBhcmVudC5sYXN0Q2hpbGQubmV4dFNpYmxpbmcgPT0gbnVsbClcblx0aWYgKG5vZGUubm9kZVR5cGUgPT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuXHRcdG5vZGUuZmlyc3RDaGlsZCA9IG5vZGUubGFzdENoaWxkID0gbnVsbDtcblx0fVxuXHRyZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBBcHBlbmRzIGBuZXdDaGlsZGAgdG8gYHBhcmVudE5vZGVgLlxuICogSWYgYG5ld0NoaWxkYCBpcyBhbHJlYWR5IGNvbm5lY3RlZCB0byBhIGBwYXJlbnROb2RlYCBpdCBpcyBmaXJzdCByZW1vdmVkIGZyb20gaXQuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20veG1sZG9tL3htbGRvbS9pc3N1ZXMvMTM1XG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS94bWxkb20veG1sZG9tL2lzc3Vlcy8xNDVcbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50Tm9kZVxuICogQHBhcmFtIHtOb2RlfSBuZXdDaGlsZFxuICogQHJldHVybnMge05vZGV9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfYXBwZW5kU2luZ2xlQ2hpbGQgKHBhcmVudE5vZGUsIG5ld0NoaWxkKSB7XG5cdGlmIChuZXdDaGlsZC5wYXJlbnROb2RlKSB7XG5cdFx0bmV3Q2hpbGQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuZXdDaGlsZCk7XG5cdH1cblx0bmV3Q2hpbGQucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG5cdG5ld0NoaWxkLnByZXZpb3VzU2libGluZyA9IHBhcmVudE5vZGUubGFzdENoaWxkO1xuXHRuZXdDaGlsZC5uZXh0U2libGluZyA9IG51bGw7XG5cdGlmIChuZXdDaGlsZC5wcmV2aW91c1NpYmxpbmcpIHtcblx0XHRuZXdDaGlsZC5wcmV2aW91c1NpYmxpbmcubmV4dFNpYmxpbmcgPSBuZXdDaGlsZDtcblx0fSBlbHNlIHtcblx0XHRwYXJlbnROb2RlLmZpcnN0Q2hpbGQgPSBuZXdDaGlsZDtcblx0fVxuXHRwYXJlbnROb2RlLmxhc3RDaGlsZCA9IG5ld0NoaWxkO1xuXHRfb25VcGRhdGVDaGlsZChwYXJlbnROb2RlLm93bmVyRG9jdW1lbnQsIHBhcmVudE5vZGUsIG5ld0NoaWxkKTtcblx0cmV0dXJuIG5ld0NoaWxkO1xufVxuXG5Eb2N1bWVudC5wcm90b3R5cGUgPSB7XG5cdC8vaW1wbGVtZW50YXRpb24gOiBudWxsLFxuXHRub2RlTmFtZSA6ICAnI2RvY3VtZW50Jyxcblx0bm9kZVR5cGUgOiAgRE9DVU1FTlRfTk9ERSxcblx0LyoqXG5cdCAqIFRoZSBEb2N1bWVudFR5cGUgbm9kZSBvZiB0aGUgZG9jdW1lbnQuXG5cdCAqXG5cdCAqIEByZWFkb25seVxuXHQgKiBAdHlwZSBEb2N1bWVudFR5cGVcblx0ICovXG5cdGRvY3R5cGUgOiAgbnVsbCxcblx0ZG9jdW1lbnRFbGVtZW50IDogIG51bGwsXG5cdF9pbmMgOiAxLFxuXG5cdGluc2VydEJlZm9yZSA6ICBmdW5jdGlvbihuZXdDaGlsZCwgcmVmQ2hpbGQpey8vcmFpc2VzXG5cdFx0aWYobmV3Q2hpbGQubm9kZVR5cGUgPT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSl7XG5cdFx0XHR2YXIgY2hpbGQgPSBuZXdDaGlsZC5maXJzdENoaWxkO1xuXHRcdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0XHR2YXIgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR0aGlzLmluc2VydEJlZm9yZShjaGlsZCxyZWZDaGlsZCk7XG5cdFx0XHRcdGNoaWxkID0gbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuZXdDaGlsZDtcblx0XHR9XG5cdFx0X2luc2VydEJlZm9yZSh0aGlzLCBuZXdDaGlsZCwgcmVmQ2hpbGQpO1xuXHRcdG5ld0NoaWxkLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdGlmICh0aGlzLmRvY3VtZW50RWxlbWVudCA9PT0gbnVsbCAmJiBuZXdDaGlsZC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG5cdFx0XHR0aGlzLmRvY3VtZW50RWxlbWVudCA9IG5ld0NoaWxkO1xuXHRcdH1cblxuXHRcdHJldHVybiBuZXdDaGlsZDtcblx0fSxcblx0cmVtb3ZlQ2hpbGQgOiAgZnVuY3Rpb24ob2xkQ2hpbGQpe1xuXHRcdGlmKHRoaXMuZG9jdW1lbnRFbGVtZW50ID09IG9sZENoaWxkKXtcblx0XHRcdHRoaXMuZG9jdW1lbnRFbGVtZW50ID0gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIF9yZW1vdmVDaGlsZCh0aGlzLG9sZENoaWxkKTtcblx0fSxcblx0cmVwbGFjZUNoaWxkOiBmdW5jdGlvbiAobmV3Q2hpbGQsIG9sZENoaWxkKSB7XG5cdFx0Ly9yYWlzZXNcblx0XHRfaW5zZXJ0QmVmb3JlKHRoaXMsIG5ld0NoaWxkLCBvbGRDaGlsZCwgYXNzZXJ0UHJlUmVwbGFjZW1lbnRWYWxpZGl0eUluRG9jdW1lbnQpO1xuXHRcdG5ld0NoaWxkLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdGlmIChvbGRDaGlsZCkge1xuXHRcdFx0dGhpcy5yZW1vdmVDaGlsZChvbGRDaGlsZCk7XG5cdFx0fVxuXHRcdGlmIChpc0VsZW1lbnROb2RlKG5ld0NoaWxkKSkge1xuXHRcdFx0dGhpcy5kb2N1bWVudEVsZW1lbnQgPSBuZXdDaGlsZDtcblx0XHR9XG5cdH0sXG5cdC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG5cdGltcG9ydE5vZGUgOiBmdW5jdGlvbihpbXBvcnRlZE5vZGUsZGVlcCl7XG5cdFx0cmV0dXJuIGltcG9ydE5vZGUodGhpcyxpbXBvcnRlZE5vZGUsZGVlcCk7XG5cdH0sXG5cdC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG5cdGdldEVsZW1lbnRCeUlkIDpcdGZ1bmN0aW9uKGlkKXtcblx0XHR2YXIgcnR2ID0gbnVsbDtcblx0XHRfdmlzaXROb2RlKHRoaXMuZG9jdW1lbnRFbGVtZW50LGZ1bmN0aW9uKG5vZGUpe1xuXHRcdFx0aWYobm9kZS5ub2RlVHlwZSA9PSBFTEVNRU5UX05PREUpe1xuXHRcdFx0XHRpZihub2RlLmdldEF0dHJpYnV0ZSgnaWQnKSA9PSBpZCl7XG5cdFx0XHRcdFx0cnR2ID0gbm9kZTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0cmV0dXJuIHJ0djtcblx0fSxcblxuXHQvKipcblx0ICogVGhlIGBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lYCBtZXRob2Qgb2YgYERvY3VtZW50YCBpbnRlcmZhY2UgcmV0dXJucyBhbiBhcnJheS1saWtlIG9iamVjdFxuXHQgKiBvZiBhbGwgY2hpbGQgZWxlbWVudHMgd2hpY2ggaGF2ZSAqKmFsbCoqIG9mIHRoZSBnaXZlbiBjbGFzcyBuYW1lKHMpLlxuXHQgKlxuXHQgKiBSZXR1cm5zIGFuIGVtcHR5IGxpc3QgaWYgYGNsYXNzZU5hbWVzYCBpcyBhbiBlbXB0eSBzdHJpbmcgb3Igb25seSBjb250YWlucyBIVE1MIHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMuXG5cdCAqXG5cdCAqXG5cdCAqIFdhcm5pbmc6IFRoaXMgaXMgYSBsaXZlIExpdmVOb2RlTGlzdC5cblx0ICogQ2hhbmdlcyBpbiB0aGUgRE9NIHdpbGwgcmVmbGVjdCBpbiB0aGUgYXJyYXkgYXMgdGhlIGNoYW5nZXMgb2NjdXIuXG5cdCAqIElmIGFuIGVsZW1lbnQgc2VsZWN0ZWQgYnkgdGhpcyBhcnJheSBubyBsb25nZXIgcXVhbGlmaWVzIGZvciB0aGUgc2VsZWN0b3IsXG5cdCAqIGl0IHdpbGwgYXV0b21hdGljYWxseSBiZSByZW1vdmVkLiBCZSBhd2FyZSBvZiB0aGlzIGZvciBpdGVyYXRpb24gcHVycG9zZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVzIGlzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY2xhc3MgbmFtZShzKSB0byBtYXRjaDsgbXVsdGlwbGUgY2xhc3MgbmFtZXMgYXJlIHNlcGFyYXRlZCBieSAoQVNDSUktKXdoaXRlc3BhY2Vcblx0ICpcblx0ICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvZ2V0RWxlbWVudHNCeUNsYXNzTmFtZVxuXHQgKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1nZXRlbGVtZW50c2J5Y2xhc3NuYW1lXG5cdCAqL1xuXHRnZXRFbGVtZW50c0J5Q2xhc3NOYW1lOiBmdW5jdGlvbihjbGFzc05hbWVzKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXNTZXQgPSB0b09yZGVyZWRTZXQoY2xhc3NOYW1lcylcblx0XHRyZXR1cm4gbmV3IExpdmVOb2RlTGlzdCh0aGlzLCBmdW5jdGlvbihiYXNlKSB7XG5cdFx0XHR2YXIgbHMgPSBbXTtcblx0XHRcdGlmIChjbGFzc05hbWVzU2V0Lmxlbmd0aCA+IDApIHtcblx0XHRcdFx0X3Zpc2l0Tm9kZShiYXNlLmRvY3VtZW50RWxlbWVudCwgZnVuY3Rpb24obm9kZSkge1xuXHRcdFx0XHRcdGlmKG5vZGUgIT09IGJhc2UgJiYgbm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG5cdFx0XHRcdFx0XHR2YXIgbm9kZUNsYXNzTmFtZXMgPSBub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKVxuXHRcdFx0XHRcdFx0Ly8gY2FuIGJlIG51bGwgaWYgdGhlIGF0dHJpYnV0ZSBkb2VzIG5vdCBleGlzdFxuXHRcdFx0XHRcdFx0aWYgKG5vZGVDbGFzc05hbWVzKSB7XG5cdFx0XHRcdFx0XHRcdC8vIGJlZm9yZSBzcGxpdHRpbmcgYW5kIGl0ZXJhdGluZyBqdXN0IGNvbXBhcmUgdGhlbSBmb3IgdGhlIG1vc3QgY29tbW9uIGNhc2Vcblx0XHRcdFx0XHRcdFx0dmFyIG1hdGNoZXMgPSBjbGFzc05hbWVzID09PSBub2RlQ2xhc3NOYW1lcztcblx0XHRcdFx0XHRcdFx0aWYgKCFtYXRjaGVzKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIG5vZGVDbGFzc05hbWVzU2V0ID0gdG9PcmRlcmVkU2V0KG5vZGVDbGFzc05hbWVzKVxuXHRcdFx0XHRcdFx0XHRcdG1hdGNoZXMgPSBjbGFzc05hbWVzU2V0LmV2ZXJ5KGFycmF5SW5jbHVkZXMobm9kZUNsYXNzTmFtZXNTZXQpKVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmKG1hdGNoZXMpIHtcblx0XHRcdFx0XHRcdFx0XHRscy5wdXNoKG5vZGUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBscztcblx0XHR9KTtcblx0fSxcblxuXHQvL2RvY3VtZW50IGZhY3RvcnkgbWV0aG9kOlxuXHRjcmVhdGVFbGVtZW50IDpcdGZ1bmN0aW9uKHRhZ05hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEVsZW1lbnQoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWUgPSB0YWdOYW1lO1xuXHRcdG5vZGUudGFnTmFtZSA9IHRhZ05hbWU7XG5cdFx0bm9kZS5sb2NhbE5hbWUgPSB0YWdOYW1lO1xuXHRcdG5vZGUuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHRcdHZhciBhdHRyc1x0PSBub2RlLmF0dHJpYnV0ZXMgPSBuZXcgTmFtZWROb2RlTWFwKCk7XG5cdFx0YXR0cnMuX293bmVyRWxlbWVudCA9IG5vZGU7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZURvY3VtZW50RnJhZ21lbnQgOlx0ZnVuY3Rpb24oKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBEb2N1bWVudEZyYWdtZW50KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlVGV4dE5vZGUgOlx0ZnVuY3Rpb24oZGF0YSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgVGV4dCgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS5hcHBlbmREYXRhKGRhdGEpXG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZUNvbW1lbnQgOlx0ZnVuY3Rpb24oZGF0YSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgQ29tbWVudCgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS5hcHBlbmREYXRhKGRhdGEpXG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZUNEQVRBU2VjdGlvbiA6XHRmdW5jdGlvbihkYXRhKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBDREFUQVNlY3Rpb24oKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUuYXBwZW5kRGF0YShkYXRhKVxuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gOlx0ZnVuY3Rpb24odGFyZ2V0LGRhdGEpe1xuXHRcdHZhciBub2RlID0gbmV3IFByb2Nlc3NpbmdJbnN0cnVjdGlvbigpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS50YWdOYW1lID0gbm9kZS5ub2RlTmFtZSA9IG5vZGUudGFyZ2V0ID0gdGFyZ2V0O1xuXHRcdG5vZGUubm9kZVZhbHVlID0gbm9kZS5kYXRhID0gZGF0YTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlQXR0cmlidXRlIDpcdGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEF0dHIoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnRcdD0gdGhpcztcblx0XHRub2RlLm5hbWUgPSBuYW1lO1xuXHRcdG5vZGUubm9kZU5hbWVcdD0gbmFtZTtcblx0XHRub2RlLmxvY2FsTmFtZSA9IG5hbWU7XG5cdFx0bm9kZS5zcGVjaWZpZWQgPSB0cnVlO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVFbnRpdHlSZWZlcmVuY2UgOlx0ZnVuY3Rpb24obmFtZSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgRW50aXR5UmVmZXJlbmNlKCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50XHQ9IHRoaXM7XG5cdFx0bm9kZS5ub2RlTmFtZVx0PSBuYW1lO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRjcmVhdGVFbGVtZW50TlMgOlx0ZnVuY3Rpb24obmFtZXNwYWNlVVJJLHF1YWxpZmllZE5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEVsZW1lbnQoKTtcblx0XHR2YXIgcGwgPSBxdWFsaWZpZWROYW1lLnNwbGl0KCc6Jyk7XG5cdFx0dmFyIGF0dHJzXHQ9IG5vZGUuYXR0cmlidXRlcyA9IG5ldyBOYW1lZE5vZGVNYXAoKTtcblx0XHRub2RlLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUudGFnTmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5uYW1lc3BhY2VVUkkgPSBuYW1lc3BhY2VVUkk7XG5cdFx0aWYocGwubGVuZ3RoID09IDIpe1xuXHRcdFx0bm9kZS5wcmVmaXggPSBwbFswXTtcblx0XHRcdG5vZGUubG9jYWxOYW1lID0gcGxbMV07XG5cdFx0fWVsc2V7XG5cdFx0XHQvL2VsLnByZWZpeCA9IG51bGw7XG5cdFx0XHRub2RlLmxvY2FsTmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0fVxuXHRcdGF0dHJzLl9vd25lckVsZW1lbnQgPSBub2RlO1xuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRjcmVhdGVBdHRyaWJ1dGVOUyA6XHRmdW5jdGlvbihuYW1lc3BhY2VVUkkscXVhbGlmaWVkTmFtZSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgQXR0cigpO1xuXHRcdHZhciBwbCA9IHF1YWxpZmllZE5hbWUuc3BsaXQoJzonKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubmFtZSA9IHF1YWxpZmllZE5hbWU7XG5cdFx0bm9kZS5uYW1lc3BhY2VVUkkgPSBuYW1lc3BhY2VVUkk7XG5cdFx0bm9kZS5zcGVjaWZpZWQgPSB0cnVlO1xuXHRcdGlmKHBsLmxlbmd0aCA9PSAyKXtcblx0XHRcdG5vZGUucHJlZml4ID0gcGxbMF07XG5cdFx0XHRub2RlLmxvY2FsTmFtZSA9IHBsWzFdO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly9lbC5wcmVmaXggPSBudWxsO1xuXHRcdFx0bm9kZS5sb2NhbE5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdH1cblx0XHRyZXR1cm4gbm9kZTtcblx0fVxufTtcbl9leHRlbmRzKERvY3VtZW50LE5vZGUpO1xuXG5cbmZ1bmN0aW9uIEVsZW1lbnQoKSB7XG5cdHRoaXMuX25zTWFwID0ge307XG59O1xuRWxlbWVudC5wcm90b3R5cGUgPSB7XG5cdG5vZGVUeXBlIDogRUxFTUVOVF9OT0RFLFxuXHRoYXNBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lKXtcblx0XHRyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpIT1udWxsO1xuXHR9LFxuXHRnZXRBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKTtcblx0XHRyZXR1cm4gYXR0ciAmJiBhdHRyLnZhbHVlIHx8ICcnO1xuXHR9LFxuXHRnZXRBdHRyaWJ1dGVOb2RlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0obmFtZSk7XG5cdH0sXG5cdHNldEF0dHJpYnV0ZSA6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUobmFtZSk7XG5cdFx0YXR0ci52YWx1ZSA9IGF0dHIubm9kZVZhbHVlID0gXCJcIiArIHZhbHVlO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlTm9kZShhdHRyKVxuXHR9LFxuXHRyZW1vdmVBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKVxuXHRcdGF0dHIgJiYgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHIpO1xuXHR9LFxuXG5cdC8vZm91ciByZWFsIG9wZWFydGlvbiBtZXRob2Rcblx0YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQpe1xuXHRcdGlmKG5ld0NoaWxkLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKXtcblx0XHRcdHJldHVybiB0aGlzLmluc2VydEJlZm9yZShuZXdDaGlsZCxudWxsKTtcblx0XHR9ZWxzZXtcblx0XHRcdHJldHVybiBfYXBwZW5kU2luZ2xlQ2hpbGQodGhpcyxuZXdDaGlsZCk7XG5cdFx0fVxuXHR9LFxuXHRzZXRBdHRyaWJ1dGVOb2RlIDogZnVuY3Rpb24obmV3QXR0cil7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5zZXROYW1lZEl0ZW0obmV3QXR0cik7XG5cdH0sXG5cdHNldEF0dHJpYnV0ZU5vZGVOUyA6IGZ1bmN0aW9uKG5ld0F0dHIpe1xuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuc2V0TmFtZWRJdGVtTlMobmV3QXR0cik7XG5cdH0sXG5cdHJlbW92ZUF0dHJpYnV0ZU5vZGUgOiBmdW5jdGlvbihvbGRBdHRyKXtcblx0XHQvL2NvbnNvbGUubG9nKHRoaXMgPT0gb2xkQXR0ci5vd25lckVsZW1lbnQpXG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5yZW1vdmVOYW1lZEl0ZW0ob2xkQXR0ci5ub2RlTmFtZSk7XG5cdH0sXG5cdC8vZ2V0IHJlYWwgYXR0cmlidXRlIG5hbWUsYW5kIHJlbW92ZSBpdCBieSByZW1vdmVBdHRyaWJ1dGVOb2RlXG5cdHJlbW92ZUF0dHJpYnV0ZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHZhciBvbGQgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSk7XG5cdFx0b2xkICYmIHRoaXMucmVtb3ZlQXR0cmlidXRlTm9kZShvbGQpO1xuXHR9LFxuXG5cdGhhc0F0dHJpYnV0ZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkhPW51bGw7XG5cdH0sXG5cdGdldEF0dHJpYnV0ZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHZhciBhdHRyID0gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpO1xuXHRcdHJldHVybiBhdHRyICYmIGF0dHIudmFsdWUgfHwgJyc7XG5cdH0sXG5cdHNldEF0dHJpYnV0ZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lLCB2YWx1ZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlTlMobmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lKTtcblx0XHRhdHRyLnZhbHVlID0gYXR0ci5ub2RlVmFsdWUgPSBcIlwiICsgdmFsdWU7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGVOb2RlKGF0dHIpXG5cdH0sXG5cdGdldEF0dHJpYnV0ZU5vZGVOUyA6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKXtcblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKTtcblx0fSxcblxuXHRnZXRFbGVtZW50c0J5VGFnTmFtZSA6IGZ1bmN0aW9uKHRhZ05hbWUpe1xuXHRcdHJldHVybiBuZXcgTGl2ZU5vZGVMaXN0KHRoaXMsZnVuY3Rpb24oYmFzZSl7XG5cdFx0XHR2YXIgbHMgPSBbXTtcblx0XHRcdF92aXNpdE5vZGUoYmFzZSxmdW5jdGlvbihub2RlKXtcblx0XHRcdFx0aWYobm9kZSAhPT0gYmFzZSAmJiBub2RlLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSAmJiAodGFnTmFtZSA9PT0gJyonIHx8IG5vZGUudGFnTmFtZSA9PSB0YWdOYW1lKSl7XG5cdFx0XHRcdFx0bHMucHVzaChub2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbHM7XG5cdFx0fSk7XG5cdH0sXG5cdGdldEVsZW1lbnRzQnlUYWdOYW1lTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0cmV0dXJuIG5ldyBMaXZlTm9kZUxpc3QodGhpcyxmdW5jdGlvbihiYXNlKXtcblx0XHRcdHZhciBscyA9IFtdO1xuXHRcdFx0X3Zpc2l0Tm9kZShiYXNlLGZ1bmN0aW9uKG5vZGUpe1xuXHRcdFx0XHRpZihub2RlICE9PSBiYXNlICYmIG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJiAobmFtZXNwYWNlVVJJID09PSAnKicgfHwgbm9kZS5uYW1lc3BhY2VVUkkgPT09IG5hbWVzcGFjZVVSSSkgJiYgKGxvY2FsTmFtZSA9PT0gJyonIHx8IG5vZGUubG9jYWxOYW1lID09IGxvY2FsTmFtZSkpe1xuXHRcdFx0XHRcdGxzLnB1c2gobm9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGxzO1xuXG5cdFx0fSk7XG5cdH1cbn07XG5Eb2N1bWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBFbGVtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZTtcbkRvY3VtZW50LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TID0gRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUztcblxuXG5fZXh0ZW5kcyhFbGVtZW50LE5vZGUpO1xuZnVuY3Rpb24gQXR0cigpIHtcbn07XG5BdHRyLnByb3RvdHlwZS5ub2RlVHlwZSA9IEFUVFJJQlVURV9OT0RFO1xuX2V4dGVuZHMoQXR0cixOb2RlKTtcblxuXG5mdW5jdGlvbiBDaGFyYWN0ZXJEYXRhKCkge1xufTtcbkNoYXJhY3RlckRhdGEucHJvdG90eXBlID0ge1xuXHRkYXRhIDogJycsXG5cdHN1YnN0cmluZ0RhdGEgOiBmdW5jdGlvbihvZmZzZXQsIGNvdW50KSB7XG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5zdWJzdHJpbmcob2Zmc2V0LCBvZmZzZXQrY291bnQpO1xuXHR9LFxuXHRhcHBlbmREYXRhOiBmdW5jdGlvbih0ZXh0KSB7XG5cdFx0dGV4dCA9IHRoaXMuZGF0YSt0ZXh0O1xuXHRcdHRoaXMubm9kZVZhbHVlID0gdGhpcy5kYXRhID0gdGV4dDtcblx0XHR0aGlzLmxlbmd0aCA9IHRleHQubGVuZ3RoO1xuXHR9LFxuXHRpbnNlcnREYXRhOiBmdW5jdGlvbihvZmZzZXQsdGV4dCkge1xuXHRcdHRoaXMucmVwbGFjZURhdGEob2Zmc2V0LDAsdGV4dCk7XG5cblx0fSxcblx0YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQpe1xuXHRcdHRocm93IG5ldyBFcnJvcihFeGNlcHRpb25NZXNzYWdlW0hJRVJBUkNIWV9SRVFVRVNUX0VSUl0pXG5cdH0sXG5cdGRlbGV0ZURhdGE6IGZ1bmN0aW9uKG9mZnNldCwgY291bnQpIHtcblx0XHR0aGlzLnJlcGxhY2VEYXRhKG9mZnNldCxjb3VudCxcIlwiKTtcblx0fSxcblx0cmVwbGFjZURhdGE6IGZ1bmN0aW9uKG9mZnNldCwgY291bnQsIHRleHQpIHtcblx0XHR2YXIgc3RhcnQgPSB0aGlzLmRhdGEuc3Vic3RyaW5nKDAsb2Zmc2V0KTtcblx0XHR2YXIgZW5kID0gdGhpcy5kYXRhLnN1YnN0cmluZyhvZmZzZXQrY291bnQpO1xuXHRcdHRleHQgPSBzdGFydCArIHRleHQgKyBlbmQ7XG5cdFx0dGhpcy5ub2RlVmFsdWUgPSB0aGlzLmRhdGEgPSB0ZXh0O1xuXHRcdHRoaXMubGVuZ3RoID0gdGV4dC5sZW5ndGg7XG5cdH1cbn1cbl9leHRlbmRzKENoYXJhY3RlckRhdGEsTm9kZSk7XG5mdW5jdGlvbiBUZXh0KCkge1xufTtcblRleHQucHJvdG90eXBlID0ge1xuXHRub2RlTmFtZSA6IFwiI3RleHRcIixcblx0bm9kZVR5cGUgOiBURVhUX05PREUsXG5cdHNwbGl0VGV4dCA6IGZ1bmN0aW9uKG9mZnNldCkge1xuXHRcdHZhciB0ZXh0ID0gdGhpcy5kYXRhO1xuXHRcdHZhciBuZXdUZXh0ID0gdGV4dC5zdWJzdHJpbmcob2Zmc2V0KTtcblx0XHR0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgb2Zmc2V0KTtcblx0XHR0aGlzLmRhdGEgPSB0aGlzLm5vZGVWYWx1ZSA9IHRleHQ7XG5cdFx0dGhpcy5sZW5ndGggPSB0ZXh0Lmxlbmd0aDtcblx0XHR2YXIgbmV3Tm9kZSA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXdUZXh0KTtcblx0XHRpZih0aGlzLnBhcmVudE5vZGUpe1xuXHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCB0aGlzLm5leHRTaWJsaW5nKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ld05vZGU7XG5cdH1cbn1cbl9leHRlbmRzKFRleHQsQ2hhcmFjdGVyRGF0YSk7XG5mdW5jdGlvbiBDb21tZW50KCkge1xufTtcbkNvbW1lbnQucHJvdG90eXBlID0ge1xuXHRub2RlTmFtZSA6IFwiI2NvbW1lbnRcIixcblx0bm9kZVR5cGUgOiBDT01NRU5UX05PREVcbn1cbl9leHRlbmRzKENvbW1lbnQsQ2hhcmFjdGVyRGF0YSk7XG5cbmZ1bmN0aW9uIENEQVRBU2VjdGlvbigpIHtcbn07XG5DREFUQVNlY3Rpb24ucHJvdG90eXBlID0ge1xuXHRub2RlTmFtZSA6IFwiI2NkYXRhLXNlY3Rpb25cIixcblx0bm9kZVR5cGUgOiBDREFUQV9TRUNUSU9OX05PREVcbn1cbl9leHRlbmRzKENEQVRBU2VjdGlvbixDaGFyYWN0ZXJEYXRhKTtcblxuXG5mdW5jdGlvbiBEb2N1bWVudFR5cGUoKSB7XG59O1xuRG9jdW1lbnRUeXBlLnByb3RvdHlwZS5ub2RlVHlwZSA9IERPQ1VNRU5UX1RZUEVfTk9ERTtcbl9leHRlbmRzKERvY3VtZW50VHlwZSxOb2RlKTtcblxuZnVuY3Rpb24gTm90YXRpb24oKSB7XG59O1xuTm90YXRpb24ucHJvdG90eXBlLm5vZGVUeXBlID0gTk9UQVRJT05fTk9ERTtcbl9leHRlbmRzKE5vdGF0aW9uLE5vZGUpO1xuXG5mdW5jdGlvbiBFbnRpdHkoKSB7XG59O1xuRW50aXR5LnByb3RvdHlwZS5ub2RlVHlwZSA9IEVOVElUWV9OT0RFO1xuX2V4dGVuZHMoRW50aXR5LE5vZGUpO1xuXG5mdW5jdGlvbiBFbnRpdHlSZWZlcmVuY2UoKSB7XG59O1xuRW50aXR5UmVmZXJlbmNlLnByb3RvdHlwZS5ub2RlVHlwZSA9IEVOVElUWV9SRUZFUkVOQ0VfTk9ERTtcbl9leHRlbmRzKEVudGl0eVJlZmVyZW5jZSxOb2RlKTtcblxuZnVuY3Rpb24gRG9jdW1lbnRGcmFnbWVudCgpIHtcbn07XG5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5ub2RlTmFtZSA9XHRcIiNkb2N1bWVudC1mcmFnbWVudFwiO1xuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUubm9kZVR5cGUgPVx0RE9DVU1FTlRfRlJBR01FTlRfTk9ERTtcbl9leHRlbmRzKERvY3VtZW50RnJhZ21lbnQsTm9kZSk7XG5cblxuZnVuY3Rpb24gUHJvY2Vzc2luZ0luc3RydWN0aW9uKCkge1xufVxuUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5ub2RlVHlwZSA9IFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTtcbl9leHRlbmRzKFByb2Nlc3NpbmdJbnN0cnVjdGlvbixOb2RlKTtcbmZ1bmN0aW9uIFhNTFNlcmlhbGl6ZXIoKXt9XG5YTUxTZXJpYWxpemVyLnByb3RvdHlwZS5zZXJpYWxpemVUb1N0cmluZyA9IGZ1bmN0aW9uKG5vZGUsaXNIdG1sLG5vZGVGaWx0ZXIpe1xuXHRyZXR1cm4gbm9kZVNlcmlhbGl6ZVRvU3RyaW5nLmNhbGwobm9kZSxpc0h0bWwsbm9kZUZpbHRlcik7XG59XG5Ob2RlLnByb3RvdHlwZS50b1N0cmluZyA9IG5vZGVTZXJpYWxpemVUb1N0cmluZztcbmZ1bmN0aW9uIG5vZGVTZXJpYWxpemVUb1N0cmluZyhpc0h0bWwsbm9kZUZpbHRlcil7XG5cdHZhciBidWYgPSBbXTtcblx0dmFyIHJlZk5vZGUgPSB0aGlzLm5vZGVUeXBlID09IDkgJiYgdGhpcy5kb2N1bWVudEVsZW1lbnQgfHwgdGhpcztcblx0dmFyIHByZWZpeCA9IHJlZk5vZGUucHJlZml4O1xuXHR2YXIgdXJpID0gcmVmTm9kZS5uYW1lc3BhY2VVUkk7XG5cblx0aWYodXJpICYmIHByZWZpeCA9PSBudWxsKXtcblx0XHQvL2NvbnNvbGUubG9nKHByZWZpeClcblx0XHR2YXIgcHJlZml4ID0gcmVmTm9kZS5sb29rdXBQcmVmaXgodXJpKTtcblx0XHRpZihwcmVmaXggPT0gbnVsbCl7XG5cdFx0XHQvL2lzSFRNTCA9IHRydWU7XG5cdFx0XHR2YXIgdmlzaWJsZU5hbWVzcGFjZXM9W1xuXHRcdFx0e25hbWVzcGFjZTp1cmkscHJlZml4Om51bGx9XG5cdFx0XHQvL3tuYW1lc3BhY2U6dXJpLHByZWZpeDonJ31cblx0XHRcdF1cblx0XHR9XG5cdH1cblx0c2VyaWFsaXplVG9TdHJpbmcodGhpcyxidWYsaXNIdG1sLG5vZGVGaWx0ZXIsdmlzaWJsZU5hbWVzcGFjZXMpO1xuXHQvL2NvbnNvbGUubG9nKCcjIyMnLHRoaXMubm9kZVR5cGUsdXJpLHByZWZpeCxidWYuam9pbignJykpXG5cdHJldHVybiBidWYuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIG5lZWROYW1lc3BhY2VEZWZpbmUobm9kZSwgaXNIVE1MLCB2aXNpYmxlTmFtZXNwYWNlcykge1xuXHR2YXIgcHJlZml4ID0gbm9kZS5wcmVmaXggfHwgJyc7XG5cdHZhciB1cmkgPSBub2RlLm5hbWVzcGFjZVVSSTtcblx0Ly8gQWNjb3JkaW5nIHRvIFtOYW1lc3BhY2VzIGluIFhNTCAxLjBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLW5hbWVzLyNucy11c2luZykgLFxuXHQvLyBhbmQgbW9yZSBzcGVjaWZpY2FsbHkgaHR0cHM6Ly93d3cudzMub3JnL1RSL1JFQy14bWwtbmFtZXMvI25zYy1Ob1ByZWZpeFVuZGVjbCA6XG5cdC8vID4gSW4gYSBuYW1lc3BhY2UgZGVjbGFyYXRpb24gZm9yIGEgcHJlZml4IFsuLi5dLCB0aGUgYXR0cmlidXRlIHZhbHVlIE1VU1QgTk9UIGJlIGVtcHR5LlxuXHQvLyBpbiBhIHNpbWlsYXIgbWFubmVyIFtOYW1lc3BhY2VzIGluIFhNTCAxLjFdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwtbmFtZXMxMS8jbnMtdXNpbmcpXG5cdC8vIGFuZCBtb3JlIHNwZWNpZmljYWxseSBodHRwczovL3d3dy53My5vcmcvVFIveG1sLW5hbWVzMTEvI25zYy1OU0RlY2xhcmVkIDpcblx0Ly8gPiBbLi4uXSBGdXJ0aGVybW9yZSwgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBbLi4uXSBtdXN0IG5vdCBiZSBhbiBlbXB0eSBzdHJpbmcuXG5cdC8vIHNvIHNlcmlhbGl6aW5nIGVtcHR5IG5hbWVzcGFjZSB2YWx1ZSBsaWtlIHhtbG5zOmRzPVwiXCIgd291bGQgcHJvZHVjZSBhbiBpbnZhbGlkIFhNTCBkb2N1bWVudC5cblx0aWYgKCF1cmkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHByZWZpeCA9PT0gXCJ4bWxcIiAmJiB1cmkgPT09IE5BTUVTUEFDRS5YTUwgfHwgdXJpID09PSBOQU1FU1BBQ0UuWE1MTlMpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaSA9IHZpc2libGVOYW1lc3BhY2VzLmxlbmd0aFxuXHR3aGlsZSAoaS0tKSB7XG5cdFx0dmFyIG5zID0gdmlzaWJsZU5hbWVzcGFjZXNbaV07XG5cdFx0Ly8gZ2V0IG5hbWVzcGFjZSBwcmVmaXhcblx0XHRpZiAobnMucHJlZml4ID09PSBwcmVmaXgpIHtcblx0XHRcdHJldHVybiBucy5uYW1lc3BhY2UgIT09IHVyaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRydWU7XG59XG4vKipcbiAqIFdlbGwtZm9ybWVkIGNvbnN0cmFpbnQ6IE5vIDwgaW4gQXR0cmlidXRlIFZhbHVlc1xuICogPiBUaGUgcmVwbGFjZW1lbnQgdGV4dCBvZiBhbnkgZW50aXR5IHJlZmVycmVkIHRvIGRpcmVjdGx5IG9yIGluZGlyZWN0bHlcbiAqID4gaW4gYW4gYXR0cmlidXRlIHZhbHVlIG11c3Qgbm90IGNvbnRhaW4gYSA8LlxuICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIveG1sMTEvI0NsZWFuQXR0clZhbHNcbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNOVC1BdHRWYWx1ZVxuICpcbiAqIExpdGVyYWwgd2hpdGVzcGFjZSBvdGhlciB0aGFuIHNwYWNlIHRoYXQgYXBwZWFyIGluIGF0dHJpYnV0ZSB2YWx1ZXNcbiAqIGFyZSBzZXJpYWxpemVkIGFzIHRoZWlyIGVudGl0eSByZWZlcmVuY2VzLCBzbyB0aGV5IHdpbGwgYmUgcHJlc2VydmVkLlxuICogKEluIGNvbnRyYXN0IHRvIHdoaXRlc3BhY2UgbGl0ZXJhbHMgaW4gdGhlIGlucHV0IHdoaWNoIGFyZSBub3JtYWxpemVkIHRvIHNwYWNlcylcbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbDExLyNBVk5vcm1hbGl6ZVxuICogQHNlZSBodHRwczovL3czYy5naXRodWIuaW8vRE9NLVBhcnNpbmcvI3NlcmlhbGl6aW5nLWFuLWVsZW1lbnQtcy1hdHRyaWJ1dGVzXG4gKi9cbmZ1bmN0aW9uIGFkZFNlcmlhbGl6ZWRBdHRyaWJ1dGUoYnVmLCBxdWFsaWZpZWROYW1lLCB2YWx1ZSkge1xuXHRidWYucHVzaCgnICcsIHF1YWxpZmllZE5hbWUsICc9XCInLCB2YWx1ZS5yZXBsYWNlKC9bPD4mXCJcXHRcXG5cXHJdL2csIF94bWxFbmNvZGVyKSwgJ1wiJylcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplVG9TdHJpbmcobm9kZSxidWYsaXNIVE1MLG5vZGVGaWx0ZXIsdmlzaWJsZU5hbWVzcGFjZXMpe1xuXHRpZiAoIXZpc2libGVOYW1lc3BhY2VzKSB7XG5cdFx0dmlzaWJsZU5hbWVzcGFjZXMgPSBbXTtcblx0fVxuXG5cdGlmKG5vZGVGaWx0ZXIpe1xuXHRcdG5vZGUgPSBub2RlRmlsdGVyKG5vZGUpO1xuXHRcdGlmKG5vZGUpe1xuXHRcdFx0aWYodHlwZW9mIG5vZGUgPT0gJ3N0cmluZycpe1xuXHRcdFx0XHRidWYucHVzaChub2RlKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1lbHNle1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQvL2J1Zi5zb3J0LmFwcGx5KGF0dHJzLCBhdHRyaWJ1dGVTb3J0ZXIpO1xuXHR9XG5cblx0c3dpdGNoKG5vZGUubm9kZVR5cGUpe1xuXHRjYXNlIEVMRU1FTlRfTk9ERTpcblx0XHR2YXIgYXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7XG5cdFx0dmFyIGxlbiA9IGF0dHJzLmxlbmd0aDtcblx0XHR2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cdFx0dmFyIG5vZGVOYW1lID0gbm9kZS50YWdOYW1lO1xuXG5cdFx0aXNIVE1MID0gTkFNRVNQQUNFLmlzSFRNTChub2RlLm5hbWVzcGFjZVVSSSkgfHwgaXNIVE1MXG5cblx0XHR2YXIgcHJlZml4ZWROb2RlTmFtZSA9IG5vZGVOYW1lXG5cdFx0aWYgKCFpc0hUTUwgJiYgIW5vZGUucHJlZml4ICYmIG5vZGUubmFtZXNwYWNlVVJJKSB7XG5cdFx0XHR2YXIgZGVmYXVsdE5TXG5cdFx0XHQvLyBsb29rdXAgY3VycmVudCBkZWZhdWx0IG5zIGZyb20gYHhtbG5zYCBhdHRyaWJ1dGVcblx0XHRcdGZvciAodmFyIGFpID0gMDsgYWkgPCBhdHRycy5sZW5ndGg7IGFpKyspIHtcblx0XHRcdFx0aWYgKGF0dHJzLml0ZW0oYWkpLm5hbWUgPT09ICd4bWxucycpIHtcblx0XHRcdFx0XHRkZWZhdWx0TlMgPSBhdHRycy5pdGVtKGFpKS52YWx1ZVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghZGVmYXVsdE5TKSB7XG5cdFx0XHRcdC8vIGxvb2t1cCBjdXJyZW50IGRlZmF1bHQgbnMgaW4gdmlzaWJsZU5hbWVzcGFjZXNcblx0XHRcdFx0Zm9yICh2YXIgbnNpID0gdmlzaWJsZU5hbWVzcGFjZXMubGVuZ3RoIC0gMTsgbnNpID49IDA7IG5zaS0tKSB7XG5cdFx0XHRcdFx0dmFyIG5hbWVzcGFjZSA9IHZpc2libGVOYW1lc3BhY2VzW25zaV1cblx0XHRcdFx0XHRpZiAobmFtZXNwYWNlLnByZWZpeCA9PT0gJycgJiYgbmFtZXNwYWNlLm5hbWVzcGFjZSA9PT0gbm9kZS5uYW1lc3BhY2VVUkkpIHtcblx0XHRcdFx0XHRcdGRlZmF1bHROUyA9IG5hbWVzcGFjZS5uYW1lc3BhY2Vcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZGVmYXVsdE5TICE9PSBub2RlLm5hbWVzcGFjZVVSSSkge1xuXHRcdFx0XHRmb3IgKHZhciBuc2kgPSB2aXNpYmxlTmFtZXNwYWNlcy5sZW5ndGggLSAxOyBuc2kgPj0gMDsgbnNpLS0pIHtcblx0XHRcdFx0XHR2YXIgbmFtZXNwYWNlID0gdmlzaWJsZU5hbWVzcGFjZXNbbnNpXVxuXHRcdFx0XHRcdGlmIChuYW1lc3BhY2UubmFtZXNwYWNlID09PSBub2RlLm5hbWVzcGFjZVVSSSkge1xuXHRcdFx0XHRcdFx0aWYgKG5hbWVzcGFjZS5wcmVmaXgpIHtcblx0XHRcdFx0XHRcdFx0cHJlZml4ZWROb2RlTmFtZSA9IG5hbWVzcGFjZS5wcmVmaXggKyAnOicgKyBub2RlTmFtZVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRidWYucHVzaCgnPCcsIHByZWZpeGVkTm9kZU5hbWUpO1xuXG5cdFx0Zm9yKHZhciBpPTA7aTxsZW47aSsrKXtcblx0XHRcdC8vIGFkZCBuYW1lc3BhY2VzIGZvciBhdHRyaWJ1dGVzXG5cdFx0XHR2YXIgYXR0ciA9IGF0dHJzLml0ZW0oaSk7XG5cdFx0XHRpZiAoYXR0ci5wcmVmaXggPT0gJ3htbG5zJykge1xuXHRcdFx0XHR2aXNpYmxlTmFtZXNwYWNlcy5wdXNoKHsgcHJlZml4OiBhdHRyLmxvY2FsTmFtZSwgbmFtZXNwYWNlOiBhdHRyLnZhbHVlIH0pO1xuXHRcdFx0fWVsc2UgaWYoYXR0ci5ub2RlTmFtZSA9PSAneG1sbnMnKXtcblx0XHRcdFx0dmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7IHByZWZpeDogJycsIG5hbWVzcGFjZTogYXR0ci52YWx1ZSB9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IodmFyIGk9MDtpPGxlbjtpKyspe1xuXHRcdFx0dmFyIGF0dHIgPSBhdHRycy5pdGVtKGkpO1xuXHRcdFx0aWYgKG5lZWROYW1lc3BhY2VEZWZpbmUoYXR0cixpc0hUTUwsIHZpc2libGVOYW1lc3BhY2VzKSkge1xuXHRcdFx0XHR2YXIgcHJlZml4ID0gYXR0ci5wcmVmaXh8fCcnO1xuXHRcdFx0XHR2YXIgdXJpID0gYXR0ci5uYW1lc3BhY2VVUkk7XG5cdFx0XHRcdGFkZFNlcmlhbGl6ZWRBdHRyaWJ1dGUoYnVmLCBwcmVmaXggPyAneG1sbnM6JyArIHByZWZpeCA6IFwieG1sbnNcIiwgdXJpKTtcblx0XHRcdFx0dmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7IHByZWZpeDogcHJlZml4LCBuYW1lc3BhY2U6dXJpIH0pO1xuXHRcdFx0fVxuXHRcdFx0c2VyaWFsaXplVG9TdHJpbmcoYXR0cixidWYsaXNIVE1MLG5vZGVGaWx0ZXIsdmlzaWJsZU5hbWVzcGFjZXMpO1xuXHRcdH1cblxuXHRcdC8vIGFkZCBuYW1lc3BhY2UgZm9yIGN1cnJlbnQgbm9kZVxuXHRcdGlmIChub2RlTmFtZSA9PT0gcHJlZml4ZWROb2RlTmFtZSAmJiBuZWVkTmFtZXNwYWNlRGVmaW5lKG5vZGUsIGlzSFRNTCwgdmlzaWJsZU5hbWVzcGFjZXMpKSB7XG5cdFx0XHR2YXIgcHJlZml4ID0gbm9kZS5wcmVmaXh8fCcnO1xuXHRcdFx0dmFyIHVyaSA9IG5vZGUubmFtZXNwYWNlVVJJO1xuXHRcdFx0YWRkU2VyaWFsaXplZEF0dHJpYnV0ZShidWYsIHByZWZpeCA/ICd4bWxuczonICsgcHJlZml4IDogXCJ4bWxuc1wiLCB1cmkpO1xuXHRcdFx0dmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7IHByZWZpeDogcHJlZml4LCBuYW1lc3BhY2U6dXJpIH0pO1xuXHRcdH1cblxuXHRcdGlmKGNoaWxkIHx8IGlzSFRNTCAmJiAhL14oPzptZXRhfGxpbmt8aW1nfGJyfGhyfGlucHV0KSQvaS50ZXN0KG5vZGVOYW1lKSl7XG5cdFx0XHRidWYucHVzaCgnPicpO1xuXHRcdFx0Ly9pZiBpcyBjZGF0YSBjaGlsZCBub2RlXG5cdFx0XHRpZihpc0hUTUwgJiYgL15zY3JpcHQkL2kudGVzdChub2RlTmFtZSkpe1xuXHRcdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdFx0aWYoY2hpbGQuZGF0YSl7XG5cdFx0XHRcdFx0XHRidWYucHVzaChjaGlsZC5kYXRhKTtcblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdHNlcmlhbGl6ZVRvU3RyaW5nKGNoaWxkLCBidWYsIGlzSFRNTCwgbm9kZUZpbHRlciwgdmlzaWJsZU5hbWVzcGFjZXMuc2xpY2UoKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdFx0XHRzZXJpYWxpemVUb1N0cmluZyhjaGlsZCwgYnVmLCBpc0hUTUwsIG5vZGVGaWx0ZXIsIHZpc2libGVOYW1lc3BhY2VzLnNsaWNlKCkpO1xuXHRcdFx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGJ1Zi5wdXNoKCc8LycscHJlZml4ZWROb2RlTmFtZSwnPicpO1xuXHRcdH1lbHNle1xuXHRcdFx0YnVmLnB1c2goJy8+Jyk7XG5cdFx0fVxuXHRcdC8vIHJlbW92ZSBhZGRlZCB2aXNpYmxlIG5hbWVzcGFjZXNcblx0XHQvL3Zpc2libGVOYW1lc3BhY2VzLmxlbmd0aCA9IHN0YXJ0VmlzaWJsZU5hbWVzcGFjZXM7XG5cdFx0cmV0dXJuO1xuXHRjYXNlIERPQ1VNRU5UX05PREU6XG5cdGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcblx0XHR2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0c2VyaWFsaXplVG9TdHJpbmcoY2hpbGQsIGJ1ZiwgaXNIVE1MLCBub2RlRmlsdGVyLCB2aXNpYmxlTmFtZXNwYWNlcy5zbGljZSgpKTtcblx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0Y2FzZSBBVFRSSUJVVEVfTk9ERTpcblx0XHRyZXR1cm4gYWRkU2VyaWFsaXplZEF0dHJpYnV0ZShidWYsIG5vZGUubmFtZSwgbm9kZS52YWx1ZSk7XG5cdGNhc2UgVEVYVF9OT0RFOlxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbXBlcnNhbmQgY2hhcmFjdGVyICgmKSBhbmQgdGhlIGxlZnQgYW5nbGUgYnJhY2tldCAoPCkgbXVzdCBub3QgYXBwZWFyIGluIHRoZWlyIGxpdGVyYWwgZm9ybSxcblx0XHQgKiBleGNlcHQgd2hlbiB1c2VkIGFzIG1hcmt1cCBkZWxpbWl0ZXJzLCBvciB3aXRoaW4gYSBjb21tZW50LCBhIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24sIG9yIGEgQ0RBVEEgc2VjdGlvbi5cblx0XHQgKiBJZiB0aGV5IGFyZSBuZWVkZWQgZWxzZXdoZXJlLCB0aGV5IG11c3QgYmUgZXNjYXBlZCB1c2luZyBlaXRoZXIgbnVtZXJpYyBjaGFyYWN0ZXIgcmVmZXJlbmNlcyBvciB0aGUgc3RyaW5nc1xuXHRcdCAqIGAmYW1wO2AgYW5kIGAmbHQ7YCByZXNwZWN0aXZlbHkuXG5cdFx0ICogVGhlIHJpZ2h0IGFuZ2xlIGJyYWNrZXQgKD4pIG1heSBiZSByZXByZXNlbnRlZCB1c2luZyB0aGUgc3RyaW5nIFwiICZndDsgXCIsIGFuZCBtdXN0LCBmb3IgY29tcGF0aWJpbGl0eSxcblx0XHQgKiBiZSBlc2NhcGVkIHVzaW5nIGVpdGhlciBgJmd0O2Agb3IgYSBjaGFyYWN0ZXIgcmVmZXJlbmNlIHdoZW4gaXQgYXBwZWFycyBpbiB0aGUgc3RyaW5nIGBdXT5gIGluIGNvbnRlbnQsXG5cdFx0ICogd2hlbiB0aGF0IHN0cmluZyBpcyBub3QgbWFya2luZyB0aGUgZW5kIG9mIGEgQ0RBVEEgc2VjdGlvbi5cblx0XHQgKlxuXHRcdCAqIEluIHRoZSBjb250ZW50IG9mIGVsZW1lbnRzLCBjaGFyYWN0ZXIgZGF0YSBpcyBhbnkgc3RyaW5nIG9mIGNoYXJhY3RlcnNcblx0XHQgKiB3aGljaCBkb2VzIG5vdCBjb250YWluIHRoZSBzdGFydC1kZWxpbWl0ZXIgb2YgYW55IG1hcmt1cFxuXHRcdCAqIGFuZCBkb2VzIG5vdCBpbmNsdWRlIHRoZSBDREFUQS1zZWN0aW9uLWNsb3NlIGRlbGltaXRlciwgYF1dPmAuXG5cdFx0ICpcblx0XHQgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwvI05ULUNoYXJEYXRhXG5cdFx0ICogQHNlZSBodHRwczovL3czYy5naXRodWIuaW8vRE9NLVBhcnNpbmcvI3htbC1zZXJpYWxpemluZy1hLXRleHQtbm9kZVxuXHRcdCAqL1xuXHRcdHJldHVybiBidWYucHVzaChub2RlLmRhdGFcblx0XHRcdC5yZXBsYWNlKC9bPCY+XS9nLF94bWxFbmNvZGVyKVxuXHRcdCk7XG5cdGNhc2UgQ0RBVEFfU0VDVElPTl9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggJzwhW0NEQVRBWycsbm9kZS5kYXRhLCddXT4nKTtcblx0Y2FzZSBDT01NRU5UX05PREU6XG5cdFx0cmV0dXJuIGJ1Zi5wdXNoKCBcIjwhLS1cIixub2RlLmRhdGEsXCItLT5cIik7XG5cdGNhc2UgRE9DVU1FTlRfVFlQRV9OT0RFOlxuXHRcdHZhciBwdWJpZCA9IG5vZGUucHVibGljSWQ7XG5cdFx0dmFyIHN5c2lkID0gbm9kZS5zeXN0ZW1JZDtcblx0XHRidWYucHVzaCgnPCFET0NUWVBFICcsbm9kZS5uYW1lKTtcblx0XHRpZihwdWJpZCl7XG5cdFx0XHRidWYucHVzaCgnIFBVQkxJQyAnLCBwdWJpZCk7XG5cdFx0XHRpZiAoc3lzaWQgJiYgc3lzaWQhPScuJykge1xuXHRcdFx0XHRidWYucHVzaCgnICcsIHN5c2lkKTtcblx0XHRcdH1cblx0XHRcdGJ1Zi5wdXNoKCc+Jyk7XG5cdFx0fWVsc2UgaWYoc3lzaWQgJiYgc3lzaWQhPScuJyl7XG5cdFx0XHRidWYucHVzaCgnIFNZU1RFTSAnLCBzeXNpZCwgJz4nKTtcblx0XHR9ZWxzZXtcblx0XHRcdHZhciBzdWIgPSBub2RlLmludGVybmFsU3Vic2V0O1xuXHRcdFx0aWYoc3ViKXtcblx0XHRcdFx0YnVmLnB1c2goXCIgW1wiLHN1YixcIl1cIik7XG5cdFx0XHR9XG5cdFx0XHRidWYucHVzaChcIj5cIik7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0Y2FzZSBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XG5cdFx0cmV0dXJuIGJ1Zi5wdXNoKCBcIjw/XCIsbm9kZS50YXJnZXQsXCIgXCIsbm9kZS5kYXRhLFwiPz5cIik7XG5cdGNhc2UgRU5USVRZX1JFRkVSRU5DRV9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggJyYnLG5vZGUubm9kZU5hbWUsJzsnKTtcblx0Ly9jYXNlIEVOVElUWV9OT0RFOlxuXHQvL2Nhc2UgTk9UQVRJT05fTk9ERTpcblx0ZGVmYXVsdDpcblx0XHRidWYucHVzaCgnPz8nLG5vZGUubm9kZU5hbWUpO1xuXHR9XG59XG5mdW5jdGlvbiBpbXBvcnROb2RlKGRvYyxub2RlLGRlZXApe1xuXHR2YXIgbm9kZTI7XG5cdHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuXHRjYXNlIEVMRU1FTlRfTk9ERTpcblx0XHRub2RlMiA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcblx0XHRub2RlMi5vd25lckRvY3VtZW50ID0gZG9jO1xuXHRcdC8vdmFyIGF0dHJzID0gbm9kZTIuYXR0cmlidXRlcztcblx0XHQvL3ZhciBsZW4gPSBhdHRycy5sZW5ndGg7XG5cdFx0Ly9mb3IodmFyIGk9MDtpPGxlbjtpKyspe1xuXHRcdFx0Ly9ub2RlMi5zZXRBdHRyaWJ1dGVOb2RlTlMoaW1wb3J0Tm9kZShkb2MsYXR0cnMuaXRlbShpKSxkZWVwKSk7XG5cdFx0Ly99XG5cdGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcblx0XHRicmVhaztcblx0Y2FzZSBBVFRSSUJVVEVfTk9ERTpcblx0XHRkZWVwID0gdHJ1ZTtcblx0XHRicmVhaztcblx0Ly9jYXNlIEVOVElUWV9SRUZFUkVOQ0VfTk9ERTpcblx0Ly9jYXNlIFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTpcblx0Ly8vL2Nhc2UgVEVYVF9OT0RFOlxuXHQvL2Nhc2UgQ0RBVEFfU0VDVElPTl9OT0RFOlxuXHQvL2Nhc2UgQ09NTUVOVF9OT0RFOlxuXHQvL1x0ZGVlcCA9IGZhbHNlO1xuXHQvL1x0YnJlYWs7XG5cdC8vY2FzZSBET0NVTUVOVF9OT0RFOlxuXHQvL2Nhc2UgRE9DVU1FTlRfVFlQRV9OT0RFOlxuXHQvL2Nhbm5vdCBiZSBpbXBvcnRlZC5cblx0Ly9jYXNlIEVOVElUWV9OT0RFOlxuXHQvL2Nhc2UgTk9UQVRJT05fTk9ERe+8mlxuXHQvL2NhbiBub3QgaGl0IGluIGxldmVsM1xuXHQvL2RlZmF1bHQ6dGhyb3cgZTtcblx0fVxuXHRpZighbm9kZTIpe1xuXHRcdG5vZGUyID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpOy8vZmFsc2Vcblx0fVxuXHRub2RlMi5vd25lckRvY3VtZW50ID0gZG9jO1xuXHRub2RlMi5wYXJlbnROb2RlID0gbnVsbDtcblx0aWYoZGVlcCl7XG5cdFx0dmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuXHRcdHdoaWxlKGNoaWxkKXtcblx0XHRcdG5vZGUyLmFwcGVuZENoaWxkKGltcG9ydE5vZGUoZG9jLGNoaWxkLGRlZXApKTtcblx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBub2RlMjtcbn1cbi8vXG4vL3ZhciBfcmVsYXRpb25NYXAgPSB7Zmlyc3RDaGlsZDoxLGxhc3RDaGlsZDoxLHByZXZpb3VzU2libGluZzoxLG5leHRTaWJsaW5nOjEsXG4vL1x0XHRcdFx0XHRhdHRyaWJ1dGVzOjEsY2hpbGROb2RlczoxLHBhcmVudE5vZGU6MSxkb2N1bWVudEVsZW1lbnQ6MSxkb2N0eXBlLH07XG5mdW5jdGlvbiBjbG9uZU5vZGUoZG9jLG5vZGUsZGVlcCl7XG5cdHZhciBub2RlMiA9IG5ldyBub2RlLmNvbnN0cnVjdG9yKCk7XG5cdGZvciAodmFyIG4gaW4gbm9kZSkge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobm9kZSwgbikpIHtcblx0XHRcdHZhciB2ID0gbm9kZVtuXTtcblx0XHRcdGlmICh0eXBlb2YgdiAhPSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdGlmICh2ICE9IG5vZGUyW25dKSB7XG5cdFx0XHRcdFx0bm9kZTJbbl0gPSB2O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGlmKG5vZGUuY2hpbGROb2Rlcyl7XG5cdFx0bm9kZTIuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHR9XG5cdG5vZGUyLm93bmVyRG9jdW1lbnQgPSBkb2M7XG5cdHN3aXRjaCAobm9kZTIubm9kZVR5cGUpIHtcblx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0dmFyIGF0dHJzXHQ9IG5vZGUuYXR0cmlidXRlcztcblx0XHR2YXIgYXR0cnMyXHQ9IG5vZGUyLmF0dHJpYnV0ZXMgPSBuZXcgTmFtZWROb2RlTWFwKCk7XG5cdFx0dmFyIGxlbiA9IGF0dHJzLmxlbmd0aFxuXHRcdGF0dHJzMi5fb3duZXJFbGVtZW50ID0gbm9kZTI7XG5cdFx0Zm9yKHZhciBpPTA7aTxsZW47aSsrKXtcblx0XHRcdG5vZGUyLnNldEF0dHJpYnV0ZU5vZGUoY2xvbmVOb2RlKGRvYyxhdHRycy5pdGVtKGkpLHRydWUpKTtcblx0XHR9XG5cdFx0YnJlYWs7O1xuXHRjYXNlIEFUVFJJQlVURV9OT0RFOlxuXHRcdGRlZXAgPSB0cnVlO1xuXHR9XG5cdGlmKGRlZXApe1xuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRub2RlMi5hcHBlbmRDaGlsZChjbG9uZU5vZGUoZG9jLGNoaWxkLGRlZXApKTtcblx0XHRcdGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBub2RlMjtcbn1cblxuZnVuY3Rpb24gX19zZXRfXyhvYmplY3Qsa2V5LHZhbHVlKXtcblx0b2JqZWN0W2tleV0gPSB2YWx1ZVxufVxuLy9kbyBkeW5hbWljXG50cnl7XG5cdGlmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSl7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KExpdmVOb2RlTGlzdC5wcm90b3R5cGUsJ2xlbmd0aCcse1xuXHRcdFx0Z2V0OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuJCRsZW5ndGg7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsJ3RleHRDb250ZW50Jyx7XG5cdFx0XHRnZXQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0cmV0dXJuIGdldFRleHRDb250ZW50KHRoaXMpO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OmZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRzd2l0Y2godGhpcy5ub2RlVHlwZSl7XG5cdFx0XHRcdGNhc2UgRUxFTUVOVF9OT0RFOlxuXHRcdFx0XHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0XHRcdFx0d2hpbGUodGhpcy5maXJzdENoaWxkKXtcblx0XHRcdFx0XHRcdHRoaXMucmVtb3ZlQ2hpbGQodGhpcy5maXJzdENoaWxkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoZGF0YSB8fCBTdHJpbmcoZGF0YSkpe1xuXHRcdFx0XHRcdFx0dGhpcy5hcHBlbmRDaGlsZCh0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0XHRcdFx0dGhpcy52YWx1ZSA9IGRhdGE7XG5cdFx0XHRcdFx0dGhpcy5ub2RlVmFsdWUgPSBkYXRhO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSlcblxuXHRcdGZ1bmN0aW9uIGdldFRleHRDb250ZW50KG5vZGUpe1xuXHRcdFx0c3dpdGNoKG5vZGUubm9kZVR5cGUpe1xuXHRcdFx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0XHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0XHRcdHZhciBidWYgPSBbXTtcblx0XHRcdFx0bm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHRcdFx0d2hpbGUobm9kZSl7XG5cdFx0XHRcdFx0aWYobm9kZS5ub2RlVHlwZSE9PTcgJiYgbm9kZS5ub2RlVHlwZSAhPT04KXtcblx0XHRcdFx0XHRcdGJ1Zi5wdXNoKGdldFRleHRDb250ZW50KG5vZGUpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGJ1Zi5qb2luKCcnKTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBub2RlLm5vZGVWYWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRfX3NldF9fID0gZnVuY3Rpb24ob2JqZWN0LGtleSx2YWx1ZSl7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHZhbHVlKVxuXHRcdFx0b2JqZWN0WyckJCcra2V5XSA9IHZhbHVlXG5cdFx0fVxuXHR9XG59Y2F0Y2goZSl7Ly9pZThcbn1cblxuLy9pZih0eXBlb2YgcmVxdWlyZSA9PSAnZnVuY3Rpb24nKXtcblx0ZXhwb3J0cy5Eb2N1bWVudFR5cGUgPSBEb2N1bWVudFR5cGU7XG5cdGV4cG9ydHMuRE9NRXhjZXB0aW9uID0gRE9NRXhjZXB0aW9uO1xuXHRleHBvcnRzLkRPTUltcGxlbWVudGF0aW9uID0gRE9NSW1wbGVtZW50YXRpb247XG5cdGV4cG9ydHMuRWxlbWVudCA9IEVsZW1lbnQ7XG5cdGV4cG9ydHMuTm9kZSA9IE5vZGU7XG5cdGV4cG9ydHMuTm9kZUxpc3QgPSBOb2RlTGlzdDtcblx0ZXhwb3J0cy5YTUxTZXJpYWxpemVyID0gWE1MU2VyaWFsaXplcjtcbi8vfVxuIl0sIm5hbWVzIjpbImNvbnZlbnRpb25zIiwicmVxdWlyZSIsImZpbmQiLCJOQU1FU1BBQ0UiLCJub3RFbXB0eVN0cmluZyIsImlucHV0Iiwic3BsaXRPbkFTQ0lJV2hpdGVzcGFjZSIsInNwbGl0IiwiZmlsdGVyIiwib3JkZXJlZFNldFJlZHVjZXIiLCJjdXJyZW50IiwiZWxlbWVudCIsImhhc093blByb3BlcnR5IiwidG9PcmRlcmVkU2V0IiwibGlzdCIsIk9iamVjdCIsImtleXMiLCJyZWR1Y2UiLCJhcnJheUluY2x1ZGVzIiwiaW5kZXhPZiIsImNvcHkiLCJzcmMiLCJkZXN0IiwicCIsInByb3RvdHlwZSIsImNhbGwiLCJfZXh0ZW5kcyIsIkNsYXNzIiwiU3VwZXIiLCJwdCIsInQiLCJjb25zdHJ1Y3RvciIsImNvbnNvbGUiLCJlcnJvciIsIk5vZGVUeXBlIiwiRUxFTUVOVF9OT0RFIiwiQVRUUklCVVRFX05PREUiLCJURVhUX05PREUiLCJDREFUQV9TRUNUSU9OX05PREUiLCJFTlRJVFlfUkVGRVJFTkNFX05PREUiLCJFTlRJVFlfTk9ERSIsIlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSIsIkNPTU1FTlRfTk9ERSIsIkRPQ1VNRU5UX05PREUiLCJET0NVTUVOVF9UWVBFX05PREUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwiTk9UQVRJT05fTk9ERSIsIkV4Y2VwdGlvbkNvZGUiLCJFeGNlcHRpb25NZXNzYWdlIiwiSU5ERVhfU0laRV9FUlIiLCJET01TVFJJTkdfU0laRV9FUlIiLCJISUVSQVJDSFlfUkVRVUVTVF9FUlIiLCJXUk9OR19ET0NVTUVOVF9FUlIiLCJJTlZBTElEX0NIQVJBQ1RFUl9FUlIiLCJOT19EQVRBX0FMTE9XRURfRVJSIiwiTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSIiwiTk9UX0ZPVU5EX0VSUiIsIk5PVF9TVVBQT1JURURfRVJSIiwiSU5VU0VfQVRUUklCVVRFX0VSUiIsIklOVkFMSURfU1RBVEVfRVJSIiwiU1lOVEFYX0VSUiIsIklOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiIsIk5BTUVTUEFDRV9FUlIiLCJJTlZBTElEX0FDQ0VTU19FUlIiLCJET01FeGNlcHRpb24iLCJjb2RlIiwibWVzc2FnZSIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJOb2RlTGlzdCIsImxlbmd0aCIsIml0ZW0iLCJpbmRleCIsInRvU3RyaW5nIiwiaXNIVE1MIiwibm9kZUZpbHRlciIsImJ1ZiIsImkiLCJzZXJpYWxpemVUb1N0cmluZyIsImpvaW4iLCJwcmVkaWNhdGUiLCJBcnJheSIsIkxpdmVOb2RlTGlzdCIsIm5vZGUiLCJyZWZyZXNoIiwiX25vZGUiLCJfcmVmcmVzaCIsIl91cGRhdGVMaXZlTGlzdCIsImluYyIsIl9pbmMiLCJvd25lckRvY3VtZW50IiwibHMiLCJfX3NldF9fIiwiJCRsZW5ndGgiLCJOYW1lZE5vZGVNYXAiLCJfZmluZE5vZGVJbmRleCIsIl9hZGROYW1lZE5vZGUiLCJlbCIsIm5ld0F0dHIiLCJvbGRBdHRyIiwib3duZXJFbGVtZW50IiwiZG9jIiwiX29uUmVtb3ZlQXR0cmlidXRlIiwiX29uQWRkQXR0cmlidXRlIiwiX3JlbW92ZU5hbWVkTm9kZSIsImF0dHIiLCJsYXN0SW5kZXgiLCJ0YWdOYW1lIiwiZ2V0TmFtZWRJdGVtIiwia2V5Iiwibm9kZU5hbWUiLCJzZXROYW1lZEl0ZW0iLCJfb3duZXJFbGVtZW50Iiwic2V0TmFtZWRJdGVtTlMiLCJnZXROYW1lZEl0ZW1OUyIsIm5hbWVzcGFjZVVSSSIsImxvY2FsTmFtZSIsInJlbW92ZU5hbWVkSXRlbSIsInJlbW92ZU5hbWVkSXRlbU5TIiwiRE9NSW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiZmVhdHVyZSIsInZlcnNpb24iLCJjcmVhdGVEb2N1bWVudCIsInF1YWxpZmllZE5hbWUiLCJkb2N0eXBlIiwiRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImNoaWxkTm9kZXMiLCJhcHBlbmRDaGlsZCIsInJvb3QiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVEb2N1bWVudFR5cGUiLCJwdWJsaWNJZCIsInN5c3RlbUlkIiwiRG9jdW1lbnRUeXBlIiwibmFtZSIsIk5vZGUiLCJmaXJzdENoaWxkIiwibGFzdENoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJhdHRyaWJ1dGVzIiwicGFyZW50Tm9kZSIsIm5vZGVWYWx1ZSIsInByZWZpeCIsImluc2VydEJlZm9yZSIsIm5ld0NoaWxkIiwicmVmQ2hpbGQiLCJfaW5zZXJ0QmVmb3JlIiwicmVwbGFjZUNoaWxkIiwib2xkQ2hpbGQiLCJhc3NlcnRQcmVSZXBsYWNlbWVudFZhbGlkaXR5SW5Eb2N1bWVudCIsInJlbW92ZUNoaWxkIiwiX3JlbW92ZUNoaWxkIiwiaGFzQ2hpbGROb2RlcyIsImNsb25lTm9kZSIsImRlZXAiLCJub3JtYWxpemUiLCJjaGlsZCIsIm5leHQiLCJub2RlVHlwZSIsImFwcGVuZERhdGEiLCJkYXRhIiwiaXNTdXBwb3J0ZWQiLCJoYXNBdHRyaWJ1dGVzIiwibG9va3VwUHJlZml4IiwibWFwIiwiX25zTWFwIiwibiIsImxvb2t1cE5hbWVzcGFjZVVSSSIsImlzRGVmYXVsdE5hbWVzcGFjZSIsIl94bWxFbmNvZGVyIiwiYyIsImNoYXJDb2RlQXQiLCJfdmlzaXROb2RlIiwiY2FsbGJhY2siLCJucyIsIlhNTE5TIiwidmFsdWUiLCJyZW1vdmUiLCJfb25VcGRhdGVDaGlsZCIsImNzIiwicHJldmlvdXMiLCJoYXNWYWxpZFBhcmVudE5vZGVUeXBlIiwiaGFzSW5zZXJ0YWJsZU5vZGVUeXBlIiwiaXNFbGVtZW50Tm9kZSIsImlzVGV4dE5vZGUiLCJpc0RvY1R5cGVOb2RlIiwiaXNFbGVtZW50SW5zZXJ0aW9uUG9zc2libGUiLCJwYXJlbnRDaGlsZE5vZGVzIiwiZG9jVHlwZU5vZGUiLCJpc0VsZW1lbnRSZXBsYWNlbWVudFBvc3NpYmxlIiwiaGFzRWxlbWVudENoaWxkVGhhdElzTm90Q2hpbGQiLCJhc3NlcnRQcmVJbnNlcnRpb25WYWxpZGl0eTF0bzUiLCJwYXJlbnQiLCJhc3NlcnRQcmVJbnNlcnRpb25WYWxpZGl0eUluRG9jdW1lbnQiLCJub2RlQ2hpbGROb2RlcyIsIm5vZGVDaGlsZEVsZW1lbnRzIiwicGFyZW50RWxlbWVudENoaWxkIiwiaGFzRG9jdHlwZUNoaWxkVGhhdElzTm90Q2hpbGQiLCJfaW5Eb2N1bWVudEFzc2VydGlvbiIsImNwIiwibmV3Rmlyc3QiLCJuZXdMYXN0IiwicHJlIiwiX2FwcGVuZFNpbmdsZUNoaWxkIiwiZG9jdW1lbnRFbGVtZW50IiwiaW1wb3J0Tm9kZSIsImltcG9ydGVkTm9kZSIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJydHYiLCJnZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY2xhc3NOYW1lcyIsImNsYXNzTmFtZXNTZXQiLCJiYXNlIiwibm9kZUNsYXNzTmFtZXMiLCJtYXRjaGVzIiwibm9kZUNsYXNzTmFtZXNTZXQiLCJldmVyeSIsInB1c2giLCJjcmVhdGVFbGVtZW50IiwiRWxlbWVudCIsImF0dHJzIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsIlRleHQiLCJjcmVhdGVDb21tZW50IiwiQ29tbWVudCIsImNyZWF0ZUNEQVRBU2VjdGlvbiIsIkNEQVRBU2VjdGlvbiIsImNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsInRhcmdldCIsIlByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsImNyZWF0ZUF0dHJpYnV0ZSIsIkF0dHIiLCJzcGVjaWZpZWQiLCJjcmVhdGVFbnRpdHlSZWZlcmVuY2UiLCJFbnRpdHlSZWZlcmVuY2UiLCJwbCIsImNyZWF0ZUF0dHJpYnV0ZU5TIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlTm9kZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5vZGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGVOb2RlIiwic2V0QXR0cmlidXRlTm9kZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJvbGQiLCJnZXRBdHRyaWJ1dGVOb2RlTlMiLCJoYXNBdHRyaWJ1dGVOUyIsImdldEF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lTlMiLCJDaGFyYWN0ZXJEYXRhIiwic3Vic3RyaW5nRGF0YSIsIm9mZnNldCIsImNvdW50Iiwic3Vic3RyaW5nIiwidGV4dCIsImluc2VydERhdGEiLCJyZXBsYWNlRGF0YSIsImRlbGV0ZURhdGEiLCJzdGFydCIsImVuZCIsInNwbGl0VGV4dCIsIm5ld1RleHQiLCJuZXdOb2RlIiwiTm90YXRpb24iLCJFbnRpdHkiLCJYTUxTZXJpYWxpemVyIiwiaXNIdG1sIiwibm9kZVNlcmlhbGl6ZVRvU3RyaW5nIiwicmVmTm9kZSIsInVyaSIsInZpc2libGVOYW1lc3BhY2VzIiwibmFtZXNwYWNlIiwibmVlZE5hbWVzcGFjZURlZmluZSIsIlhNTCIsImFkZFNlcmlhbGl6ZWRBdHRyaWJ1dGUiLCJyZXBsYWNlIiwibGVuIiwicHJlZml4ZWROb2RlTmFtZSIsImRlZmF1bHROUyIsImFpIiwibnNpIiwidGVzdCIsInNsaWNlIiwicHViaWQiLCJzeXNpZCIsInN1YiIsImludGVybmFsU3Vic2V0Iiwibm9kZTIiLCJ2IiwiYXR0cnMyIiwib2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJnZXRUZXh0Q29udGVudCIsInNldCIsIlN0cmluZyIsImUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/dom.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/entities.js":
/*!******************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/entities.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar freeze = (__webpack_require__(/*! ./conventions */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\").freeze);\n/**\n * The entities that are predefined in every XML document.\n *\n * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1\n * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia\n */ exports.XML_ENTITIES = freeze({\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    quot: '\"'\n});\n/**\n * A map of all entities that are detected in an HTML document.\n * They contain all entries from `XML_ENTITIES`.\n *\n * @see XML_ENTITIES\n * @see DOMParser.parseFromString\n * @see DOMImplementation.prototype.createHTMLDocument\n * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec\n * @see https://html.spec.whatwg.org/entities.json JSON\n * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names\n * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)\n */ exports.HTML_ENTITIES = freeze({\n    Aacute: \"\\xc1\",\n    aacute: \"\\xe1\",\n    Abreve: \"Ă\",\n    abreve: \"ă\",\n    ac: \"∾\",\n    acd: \"∿\",\n    acE: \"∾̳\",\n    Acirc: \"\\xc2\",\n    acirc: \"\\xe2\",\n    acute: \"\\xb4\",\n    Acy: \"А\",\n    acy: \"а\",\n    AElig: \"\\xc6\",\n    aelig: \"\\xe6\",\n    af: \"⁡\",\n    Afr: \"\\uD835\\uDD04\",\n    afr: \"\\uD835\\uDD1E\",\n    Agrave: \"\\xc0\",\n    agrave: \"\\xe0\",\n    alefsym: \"ℵ\",\n    aleph: \"ℵ\",\n    Alpha: \"Α\",\n    alpha: \"α\",\n    Amacr: \"Ā\",\n    amacr: \"ā\",\n    amalg: \"⨿\",\n    AMP: \"&\",\n    amp: \"&\",\n    And: \"⩓\",\n    and: \"∧\",\n    andand: \"⩕\",\n    andd: \"⩜\",\n    andslope: \"⩘\",\n    andv: \"⩚\",\n    ang: \"∠\",\n    ange: \"⦤\",\n    angle: \"∠\",\n    angmsd: \"∡\",\n    angmsdaa: \"⦨\",\n    angmsdab: \"⦩\",\n    angmsdac: \"⦪\",\n    angmsdad: \"⦫\",\n    angmsdae: \"⦬\",\n    angmsdaf: \"⦭\",\n    angmsdag: \"⦮\",\n    angmsdah: \"⦯\",\n    angrt: \"∟\",\n    angrtvb: \"⊾\",\n    angrtvbd: \"⦝\",\n    angsph: \"∢\",\n    angst: \"\\xc5\",\n    angzarr: \"⍼\",\n    Aogon: \"Ą\",\n    aogon: \"ą\",\n    Aopf: \"\\uD835\\uDD38\",\n    aopf: \"\\uD835\\uDD52\",\n    ap: \"≈\",\n    apacir: \"⩯\",\n    apE: \"⩰\",\n    ape: \"≊\",\n    apid: \"≋\",\n    apos: \"'\",\n    ApplyFunction: \"⁡\",\n    approx: \"≈\",\n    approxeq: \"≊\",\n    Aring: \"\\xc5\",\n    aring: \"\\xe5\",\n    Ascr: \"\\uD835\\uDC9C\",\n    ascr: \"\\uD835\\uDCB6\",\n    Assign: \"≔\",\n    ast: \"*\",\n    asymp: \"≈\",\n    asympeq: \"≍\",\n    Atilde: \"\\xc3\",\n    atilde: \"\\xe3\",\n    Auml: \"\\xc4\",\n    auml: \"\\xe4\",\n    awconint: \"∳\",\n    awint: \"⨑\",\n    backcong: \"≌\",\n    backepsilon: \"϶\",\n    backprime: \"‵\",\n    backsim: \"∽\",\n    backsimeq: \"⋍\",\n    Backslash: \"∖\",\n    Barv: \"⫧\",\n    barvee: \"⊽\",\n    Barwed: \"⌆\",\n    barwed: \"⌅\",\n    barwedge: \"⌅\",\n    bbrk: \"⎵\",\n    bbrktbrk: \"⎶\",\n    bcong: \"≌\",\n    Bcy: \"Б\",\n    bcy: \"б\",\n    bdquo: \"„\",\n    becaus: \"∵\",\n    Because: \"∵\",\n    because: \"∵\",\n    bemptyv: \"⦰\",\n    bepsi: \"϶\",\n    bernou: \"ℬ\",\n    Bernoullis: \"ℬ\",\n    Beta: \"Β\",\n    beta: \"β\",\n    beth: \"ℶ\",\n    between: \"≬\",\n    Bfr: \"\\uD835\\uDD05\",\n    bfr: \"\\uD835\\uDD1F\",\n    bigcap: \"⋂\",\n    bigcirc: \"◯\",\n    bigcup: \"⋃\",\n    bigodot: \"⨀\",\n    bigoplus: \"⨁\",\n    bigotimes: \"⨂\",\n    bigsqcup: \"⨆\",\n    bigstar: \"★\",\n    bigtriangledown: \"▽\",\n    bigtriangleup: \"△\",\n    biguplus: \"⨄\",\n    bigvee: \"⋁\",\n    bigwedge: \"⋀\",\n    bkarow: \"⤍\",\n    blacklozenge: \"⧫\",\n    blacksquare: \"▪\",\n    blacktriangle: \"▴\",\n    blacktriangledown: \"▾\",\n    blacktriangleleft: \"◂\",\n    blacktriangleright: \"▸\",\n    blank: \"␣\",\n    blk12: \"▒\",\n    blk14: \"░\",\n    blk34: \"▓\",\n    block: \"█\",\n    bne: \"=⃥\",\n    bnequiv: \"≡⃥\",\n    bNot: \"⫭\",\n    bnot: \"⌐\",\n    Bopf: \"\\uD835\\uDD39\",\n    bopf: \"\\uD835\\uDD53\",\n    bot: \"⊥\",\n    bottom: \"⊥\",\n    bowtie: \"⋈\",\n    boxbox: \"⧉\",\n    boxDL: \"╗\",\n    boxDl: \"╖\",\n    boxdL: \"╕\",\n    boxdl: \"┐\",\n    boxDR: \"╔\",\n    boxDr: \"╓\",\n    boxdR: \"╒\",\n    boxdr: \"┌\",\n    boxH: \"═\",\n    boxh: \"─\",\n    boxHD: \"╦\",\n    boxHd: \"╤\",\n    boxhD: \"╥\",\n    boxhd: \"┬\",\n    boxHU: \"╩\",\n    boxHu: \"╧\",\n    boxhU: \"╨\",\n    boxhu: \"┴\",\n    boxminus: \"⊟\",\n    boxplus: \"⊞\",\n    boxtimes: \"⊠\",\n    boxUL: \"╝\",\n    boxUl: \"╜\",\n    boxuL: \"╛\",\n    boxul: \"┘\",\n    boxUR: \"╚\",\n    boxUr: \"╙\",\n    boxuR: \"╘\",\n    boxur: \"└\",\n    boxV: \"║\",\n    boxv: \"│\",\n    boxVH: \"╬\",\n    boxVh: \"╫\",\n    boxvH: \"╪\",\n    boxvh: \"┼\",\n    boxVL: \"╣\",\n    boxVl: \"╢\",\n    boxvL: \"╡\",\n    boxvl: \"┤\",\n    boxVR: \"╠\",\n    boxVr: \"╟\",\n    boxvR: \"╞\",\n    boxvr: \"├\",\n    bprime: \"‵\",\n    Breve: \"˘\",\n    breve: \"˘\",\n    brvbar: \"\\xa6\",\n    Bscr: \"ℬ\",\n    bscr: \"\\uD835\\uDCB7\",\n    bsemi: \"⁏\",\n    bsim: \"∽\",\n    bsime: \"⋍\",\n    bsol: \"\\\\\",\n    bsolb: \"⧅\",\n    bsolhsub: \"⟈\",\n    bull: \"•\",\n    bullet: \"•\",\n    bump: \"≎\",\n    bumpE: \"⪮\",\n    bumpe: \"≏\",\n    Bumpeq: \"≎\",\n    bumpeq: \"≏\",\n    Cacute: \"Ć\",\n    cacute: \"ć\",\n    Cap: \"⋒\",\n    cap: \"∩\",\n    capand: \"⩄\",\n    capbrcup: \"⩉\",\n    capcap: \"⩋\",\n    capcup: \"⩇\",\n    capdot: \"⩀\",\n    CapitalDifferentialD: \"ⅅ\",\n    caps: \"∩︀\",\n    caret: \"⁁\",\n    caron: \"ˇ\",\n    Cayleys: \"ℭ\",\n    ccaps: \"⩍\",\n    Ccaron: \"Č\",\n    ccaron: \"č\",\n    Ccedil: \"\\xc7\",\n    ccedil: \"\\xe7\",\n    Ccirc: \"Ĉ\",\n    ccirc: \"ĉ\",\n    Cconint: \"∰\",\n    ccups: \"⩌\",\n    ccupssm: \"⩐\",\n    Cdot: \"Ċ\",\n    cdot: \"ċ\",\n    cedil: \"\\xb8\",\n    Cedilla: \"\\xb8\",\n    cemptyv: \"⦲\",\n    cent: \"\\xa2\",\n    CenterDot: \"\\xb7\",\n    centerdot: \"\\xb7\",\n    Cfr: \"ℭ\",\n    cfr: \"\\uD835\\uDD20\",\n    CHcy: \"Ч\",\n    chcy: \"ч\",\n    check: \"✓\",\n    checkmark: \"✓\",\n    Chi: \"Χ\",\n    chi: \"χ\",\n    cir: \"○\",\n    circ: \"ˆ\",\n    circeq: \"≗\",\n    circlearrowleft: \"↺\",\n    circlearrowright: \"↻\",\n    circledast: \"⊛\",\n    circledcirc: \"⊚\",\n    circleddash: \"⊝\",\n    CircleDot: \"⊙\",\n    circledR: \"\\xae\",\n    circledS: \"Ⓢ\",\n    CircleMinus: \"⊖\",\n    CirclePlus: \"⊕\",\n    CircleTimes: \"⊗\",\n    cirE: \"⧃\",\n    cire: \"≗\",\n    cirfnint: \"⨐\",\n    cirmid: \"⫯\",\n    cirscir: \"⧂\",\n    ClockwiseContourIntegral: \"∲\",\n    CloseCurlyDoubleQuote: \"”\",\n    CloseCurlyQuote: \"’\",\n    clubs: \"♣\",\n    clubsuit: \"♣\",\n    Colon: \"∷\",\n    colon: \":\",\n    Colone: \"⩴\",\n    colone: \"≔\",\n    coloneq: \"≔\",\n    comma: \",\",\n    commat: \"@\",\n    comp: \"∁\",\n    compfn: \"∘\",\n    complement: \"∁\",\n    complexes: \"ℂ\",\n    cong: \"≅\",\n    congdot: \"⩭\",\n    Congruent: \"≡\",\n    Conint: \"∯\",\n    conint: \"∮\",\n    ContourIntegral: \"∮\",\n    Copf: \"ℂ\",\n    copf: \"\\uD835\\uDD54\",\n    coprod: \"∐\",\n    Coproduct: \"∐\",\n    COPY: \"\\xa9\",\n    copy: \"\\xa9\",\n    copysr: \"℗\",\n    CounterClockwiseContourIntegral: \"∳\",\n    crarr: \"↵\",\n    Cross: \"⨯\",\n    cross: \"✗\",\n    Cscr: \"\\uD835\\uDC9E\",\n    cscr: \"\\uD835\\uDCB8\",\n    csub: \"⫏\",\n    csube: \"⫑\",\n    csup: \"⫐\",\n    csupe: \"⫒\",\n    ctdot: \"⋯\",\n    cudarrl: \"⤸\",\n    cudarrr: \"⤵\",\n    cuepr: \"⋞\",\n    cuesc: \"⋟\",\n    cularr: \"↶\",\n    cularrp: \"⤽\",\n    Cup: \"⋓\",\n    cup: \"∪\",\n    cupbrcap: \"⩈\",\n    CupCap: \"≍\",\n    cupcap: \"⩆\",\n    cupcup: \"⩊\",\n    cupdot: \"⊍\",\n    cupor: \"⩅\",\n    cups: \"∪︀\",\n    curarr: \"↷\",\n    curarrm: \"⤼\",\n    curlyeqprec: \"⋞\",\n    curlyeqsucc: \"⋟\",\n    curlyvee: \"⋎\",\n    curlywedge: \"⋏\",\n    curren: \"\\xa4\",\n    curvearrowleft: \"↶\",\n    curvearrowright: \"↷\",\n    cuvee: \"⋎\",\n    cuwed: \"⋏\",\n    cwconint: \"∲\",\n    cwint: \"∱\",\n    cylcty: \"⌭\",\n    Dagger: \"‡\",\n    dagger: \"†\",\n    daleth: \"ℸ\",\n    Darr: \"↡\",\n    dArr: \"⇓\",\n    darr: \"↓\",\n    dash: \"‐\",\n    Dashv: \"⫤\",\n    dashv: \"⊣\",\n    dbkarow: \"⤏\",\n    dblac: \"˝\",\n    Dcaron: \"Ď\",\n    dcaron: \"ď\",\n    Dcy: \"Д\",\n    dcy: \"д\",\n    DD: \"ⅅ\",\n    dd: \"ⅆ\",\n    ddagger: \"‡\",\n    ddarr: \"⇊\",\n    DDotrahd: \"⤑\",\n    ddotseq: \"⩷\",\n    deg: \"\\xb0\",\n    Del: \"∇\",\n    Delta: \"Δ\",\n    delta: \"δ\",\n    demptyv: \"⦱\",\n    dfisht: \"⥿\",\n    Dfr: \"\\uD835\\uDD07\",\n    dfr: \"\\uD835\\uDD21\",\n    dHar: \"⥥\",\n    dharl: \"⇃\",\n    dharr: \"⇂\",\n    DiacriticalAcute: \"\\xb4\",\n    DiacriticalDot: \"˙\",\n    DiacriticalDoubleAcute: \"˝\",\n    DiacriticalGrave: \"`\",\n    DiacriticalTilde: \"˜\",\n    diam: \"⋄\",\n    Diamond: \"⋄\",\n    diamond: \"⋄\",\n    diamondsuit: \"♦\",\n    diams: \"♦\",\n    die: \"\\xa8\",\n    DifferentialD: \"ⅆ\",\n    digamma: \"ϝ\",\n    disin: \"⋲\",\n    div: \"\\xf7\",\n    divide: \"\\xf7\",\n    divideontimes: \"⋇\",\n    divonx: \"⋇\",\n    DJcy: \"Ђ\",\n    djcy: \"ђ\",\n    dlcorn: \"⌞\",\n    dlcrop: \"⌍\",\n    dollar: \"$\",\n    Dopf: \"\\uD835\\uDD3B\",\n    dopf: \"\\uD835\\uDD55\",\n    Dot: \"\\xa8\",\n    dot: \"˙\",\n    DotDot: \"⃜\",\n    doteq: \"≐\",\n    doteqdot: \"≑\",\n    DotEqual: \"≐\",\n    dotminus: \"∸\",\n    dotplus: \"∔\",\n    dotsquare: \"⊡\",\n    doublebarwedge: \"⌆\",\n    DoubleContourIntegral: \"∯\",\n    DoubleDot: \"\\xa8\",\n    DoubleDownArrow: \"⇓\",\n    DoubleLeftArrow: \"⇐\",\n    DoubleLeftRightArrow: \"⇔\",\n    DoubleLeftTee: \"⫤\",\n    DoubleLongLeftArrow: \"⟸\",\n    DoubleLongLeftRightArrow: \"⟺\",\n    DoubleLongRightArrow: \"⟹\",\n    DoubleRightArrow: \"⇒\",\n    DoubleRightTee: \"⊨\",\n    DoubleUpArrow: \"⇑\",\n    DoubleUpDownArrow: \"⇕\",\n    DoubleVerticalBar: \"∥\",\n    DownArrow: \"↓\",\n    Downarrow: \"⇓\",\n    downarrow: \"↓\",\n    DownArrowBar: \"⤓\",\n    DownArrowUpArrow: \"⇵\",\n    DownBreve: \"̑\",\n    downdownarrows: \"⇊\",\n    downharpoonleft: \"⇃\",\n    downharpoonright: \"⇂\",\n    DownLeftRightVector: \"⥐\",\n    DownLeftTeeVector: \"⥞\",\n    DownLeftVector: \"↽\",\n    DownLeftVectorBar: \"⥖\",\n    DownRightTeeVector: \"⥟\",\n    DownRightVector: \"⇁\",\n    DownRightVectorBar: \"⥗\",\n    DownTee: \"⊤\",\n    DownTeeArrow: \"↧\",\n    drbkarow: \"⤐\",\n    drcorn: \"⌟\",\n    drcrop: \"⌌\",\n    Dscr: \"\\uD835\\uDC9F\",\n    dscr: \"\\uD835\\uDCB9\",\n    DScy: \"Ѕ\",\n    dscy: \"ѕ\",\n    dsol: \"⧶\",\n    Dstrok: \"Đ\",\n    dstrok: \"đ\",\n    dtdot: \"⋱\",\n    dtri: \"▿\",\n    dtrif: \"▾\",\n    duarr: \"⇵\",\n    duhar: \"⥯\",\n    dwangle: \"⦦\",\n    DZcy: \"Џ\",\n    dzcy: \"џ\",\n    dzigrarr: \"⟿\",\n    Eacute: \"\\xc9\",\n    eacute: \"\\xe9\",\n    easter: \"⩮\",\n    Ecaron: \"Ě\",\n    ecaron: \"ě\",\n    ecir: \"≖\",\n    Ecirc: \"\\xca\",\n    ecirc: \"\\xea\",\n    ecolon: \"≕\",\n    Ecy: \"Э\",\n    ecy: \"э\",\n    eDDot: \"⩷\",\n    Edot: \"Ė\",\n    eDot: \"≑\",\n    edot: \"ė\",\n    ee: \"ⅇ\",\n    efDot: \"≒\",\n    Efr: \"\\uD835\\uDD08\",\n    efr: \"\\uD835\\uDD22\",\n    eg: \"⪚\",\n    Egrave: \"\\xc8\",\n    egrave: \"\\xe8\",\n    egs: \"⪖\",\n    egsdot: \"⪘\",\n    el: \"⪙\",\n    Element: \"∈\",\n    elinters: \"⏧\",\n    ell: \"ℓ\",\n    els: \"⪕\",\n    elsdot: \"⪗\",\n    Emacr: \"Ē\",\n    emacr: \"ē\",\n    empty: \"∅\",\n    emptyset: \"∅\",\n    EmptySmallSquare: \"◻\",\n    emptyv: \"∅\",\n    EmptyVerySmallSquare: \"▫\",\n    emsp: \" \",\n    emsp13: \" \",\n    emsp14: \" \",\n    ENG: \"Ŋ\",\n    eng: \"ŋ\",\n    ensp: \" \",\n    Eogon: \"Ę\",\n    eogon: \"ę\",\n    Eopf: \"\\uD835\\uDD3C\",\n    eopf: \"\\uD835\\uDD56\",\n    epar: \"⋕\",\n    eparsl: \"⧣\",\n    eplus: \"⩱\",\n    epsi: \"ε\",\n    Epsilon: \"Ε\",\n    epsilon: \"ε\",\n    epsiv: \"ϵ\",\n    eqcirc: \"≖\",\n    eqcolon: \"≕\",\n    eqsim: \"≂\",\n    eqslantgtr: \"⪖\",\n    eqslantless: \"⪕\",\n    Equal: \"⩵\",\n    equals: \"=\",\n    EqualTilde: \"≂\",\n    equest: \"≟\",\n    Equilibrium: \"⇌\",\n    equiv: \"≡\",\n    equivDD: \"⩸\",\n    eqvparsl: \"⧥\",\n    erarr: \"⥱\",\n    erDot: \"≓\",\n    Escr: \"ℰ\",\n    escr: \"ℯ\",\n    esdot: \"≐\",\n    Esim: \"⩳\",\n    esim: \"≂\",\n    Eta: \"Η\",\n    eta: \"η\",\n    ETH: \"\\xd0\",\n    eth: \"\\xf0\",\n    Euml: \"\\xcb\",\n    euml: \"\\xeb\",\n    euro: \"€\",\n    excl: \"!\",\n    exist: \"∃\",\n    Exists: \"∃\",\n    expectation: \"ℰ\",\n    ExponentialE: \"ⅇ\",\n    exponentiale: \"ⅇ\",\n    fallingdotseq: \"≒\",\n    Fcy: \"Ф\",\n    fcy: \"ф\",\n    female: \"♀\",\n    ffilig: \"ﬃ\",\n    fflig: \"ﬀ\",\n    ffllig: \"ﬄ\",\n    Ffr: \"\\uD835\\uDD09\",\n    ffr: \"\\uD835\\uDD23\",\n    filig: \"ﬁ\",\n    FilledSmallSquare: \"◼\",\n    FilledVerySmallSquare: \"▪\",\n    fjlig: \"fj\",\n    flat: \"♭\",\n    fllig: \"ﬂ\",\n    fltns: \"▱\",\n    fnof: \"ƒ\",\n    Fopf: \"\\uD835\\uDD3D\",\n    fopf: \"\\uD835\\uDD57\",\n    ForAll: \"∀\",\n    forall: \"∀\",\n    fork: \"⋔\",\n    forkv: \"⫙\",\n    Fouriertrf: \"ℱ\",\n    fpartint: \"⨍\",\n    frac12: \"\\xbd\",\n    frac13: \"⅓\",\n    frac14: \"\\xbc\",\n    frac15: \"⅕\",\n    frac16: \"⅙\",\n    frac18: \"⅛\",\n    frac23: \"⅔\",\n    frac25: \"⅖\",\n    frac34: \"\\xbe\",\n    frac35: \"⅗\",\n    frac38: \"⅜\",\n    frac45: \"⅘\",\n    frac56: \"⅚\",\n    frac58: \"⅝\",\n    frac78: \"⅞\",\n    frasl: \"⁄\",\n    frown: \"⌢\",\n    Fscr: \"ℱ\",\n    fscr: \"\\uD835\\uDCBB\",\n    gacute: \"ǵ\",\n    Gamma: \"Γ\",\n    gamma: \"γ\",\n    Gammad: \"Ϝ\",\n    gammad: \"ϝ\",\n    gap: \"⪆\",\n    Gbreve: \"Ğ\",\n    gbreve: \"ğ\",\n    Gcedil: \"Ģ\",\n    Gcirc: \"Ĝ\",\n    gcirc: \"ĝ\",\n    Gcy: \"Г\",\n    gcy: \"г\",\n    Gdot: \"Ġ\",\n    gdot: \"ġ\",\n    gE: \"≧\",\n    ge: \"≥\",\n    gEl: \"⪌\",\n    gel: \"⋛\",\n    geq: \"≥\",\n    geqq: \"≧\",\n    geqslant: \"⩾\",\n    ges: \"⩾\",\n    gescc: \"⪩\",\n    gesdot: \"⪀\",\n    gesdoto: \"⪂\",\n    gesdotol: \"⪄\",\n    gesl: \"⋛︀\",\n    gesles: \"⪔\",\n    Gfr: \"\\uD835\\uDD0A\",\n    gfr: \"\\uD835\\uDD24\",\n    Gg: \"⋙\",\n    gg: \"≫\",\n    ggg: \"⋙\",\n    gimel: \"ℷ\",\n    GJcy: \"Ѓ\",\n    gjcy: \"ѓ\",\n    gl: \"≷\",\n    gla: \"⪥\",\n    glE: \"⪒\",\n    glj: \"⪤\",\n    gnap: \"⪊\",\n    gnapprox: \"⪊\",\n    gnE: \"≩\",\n    gne: \"⪈\",\n    gneq: \"⪈\",\n    gneqq: \"≩\",\n    gnsim: \"⋧\",\n    Gopf: \"\\uD835\\uDD3E\",\n    gopf: \"\\uD835\\uDD58\",\n    grave: \"`\",\n    GreaterEqual: \"≥\",\n    GreaterEqualLess: \"⋛\",\n    GreaterFullEqual: \"≧\",\n    GreaterGreater: \"⪢\",\n    GreaterLess: \"≷\",\n    GreaterSlantEqual: \"⩾\",\n    GreaterTilde: \"≳\",\n    Gscr: \"\\uD835\\uDCA2\",\n    gscr: \"ℊ\",\n    gsim: \"≳\",\n    gsime: \"⪎\",\n    gsiml: \"⪐\",\n    Gt: \"≫\",\n    GT: \">\",\n    gt: \">\",\n    gtcc: \"⪧\",\n    gtcir: \"⩺\",\n    gtdot: \"⋗\",\n    gtlPar: \"⦕\",\n    gtquest: \"⩼\",\n    gtrapprox: \"⪆\",\n    gtrarr: \"⥸\",\n    gtrdot: \"⋗\",\n    gtreqless: \"⋛\",\n    gtreqqless: \"⪌\",\n    gtrless: \"≷\",\n    gtrsim: \"≳\",\n    gvertneqq: \"≩︀\",\n    gvnE: \"≩︀\",\n    Hacek: \"ˇ\",\n    hairsp: \" \",\n    half: \"\\xbd\",\n    hamilt: \"ℋ\",\n    HARDcy: \"Ъ\",\n    hardcy: \"ъ\",\n    hArr: \"⇔\",\n    harr: \"↔\",\n    harrcir: \"⥈\",\n    harrw: \"↭\",\n    Hat: \"^\",\n    hbar: \"ℏ\",\n    Hcirc: \"Ĥ\",\n    hcirc: \"ĥ\",\n    hearts: \"♥\",\n    heartsuit: \"♥\",\n    hellip: \"…\",\n    hercon: \"⊹\",\n    Hfr: \"ℌ\",\n    hfr: \"\\uD835\\uDD25\",\n    HilbertSpace: \"ℋ\",\n    hksearow: \"⤥\",\n    hkswarow: \"⤦\",\n    hoarr: \"⇿\",\n    homtht: \"∻\",\n    hookleftarrow: \"↩\",\n    hookrightarrow: \"↪\",\n    Hopf: \"ℍ\",\n    hopf: \"\\uD835\\uDD59\",\n    horbar: \"―\",\n    HorizontalLine: \"─\",\n    Hscr: \"ℋ\",\n    hscr: \"\\uD835\\uDCBD\",\n    hslash: \"ℏ\",\n    Hstrok: \"Ħ\",\n    hstrok: \"ħ\",\n    HumpDownHump: \"≎\",\n    HumpEqual: \"≏\",\n    hybull: \"⁃\",\n    hyphen: \"‐\",\n    Iacute: \"\\xcd\",\n    iacute: \"\\xed\",\n    ic: \"⁣\",\n    Icirc: \"\\xce\",\n    icirc: \"\\xee\",\n    Icy: \"И\",\n    icy: \"и\",\n    Idot: \"İ\",\n    IEcy: \"Е\",\n    iecy: \"е\",\n    iexcl: \"\\xa1\",\n    iff: \"⇔\",\n    Ifr: \"ℑ\",\n    ifr: \"\\uD835\\uDD26\",\n    Igrave: \"\\xcc\",\n    igrave: \"\\xec\",\n    ii: \"ⅈ\",\n    iiiint: \"⨌\",\n    iiint: \"∭\",\n    iinfin: \"⧜\",\n    iiota: \"℩\",\n    IJlig: \"Ĳ\",\n    ijlig: \"ĳ\",\n    Im: \"ℑ\",\n    Imacr: \"Ī\",\n    imacr: \"ī\",\n    image: \"ℑ\",\n    ImaginaryI: \"ⅈ\",\n    imagline: \"ℐ\",\n    imagpart: \"ℑ\",\n    imath: \"ı\",\n    imof: \"⊷\",\n    imped: \"Ƶ\",\n    Implies: \"⇒\",\n    in: \"∈\",\n    incare: \"℅\",\n    infin: \"∞\",\n    infintie: \"⧝\",\n    inodot: \"ı\",\n    Int: \"∬\",\n    int: \"∫\",\n    intcal: \"⊺\",\n    integers: \"ℤ\",\n    Integral: \"∫\",\n    intercal: \"⊺\",\n    Intersection: \"⋂\",\n    intlarhk: \"⨗\",\n    intprod: \"⨼\",\n    InvisibleComma: \"⁣\",\n    InvisibleTimes: \"⁢\",\n    IOcy: \"Ё\",\n    iocy: \"ё\",\n    Iogon: \"Į\",\n    iogon: \"į\",\n    Iopf: \"\\uD835\\uDD40\",\n    iopf: \"\\uD835\\uDD5A\",\n    Iota: \"Ι\",\n    iota: \"ι\",\n    iprod: \"⨼\",\n    iquest: \"\\xbf\",\n    Iscr: \"ℐ\",\n    iscr: \"\\uD835\\uDCBE\",\n    isin: \"∈\",\n    isindot: \"⋵\",\n    isinE: \"⋹\",\n    isins: \"⋴\",\n    isinsv: \"⋳\",\n    isinv: \"∈\",\n    it: \"⁢\",\n    Itilde: \"Ĩ\",\n    itilde: \"ĩ\",\n    Iukcy: \"І\",\n    iukcy: \"і\",\n    Iuml: \"\\xcf\",\n    iuml: \"\\xef\",\n    Jcirc: \"Ĵ\",\n    jcirc: \"ĵ\",\n    Jcy: \"Й\",\n    jcy: \"й\",\n    Jfr: \"\\uD835\\uDD0D\",\n    jfr: \"\\uD835\\uDD27\",\n    jmath: \"ȷ\",\n    Jopf: \"\\uD835\\uDD41\",\n    jopf: \"\\uD835\\uDD5B\",\n    Jscr: \"\\uD835\\uDCA5\",\n    jscr: \"\\uD835\\uDCBF\",\n    Jsercy: \"Ј\",\n    jsercy: \"ј\",\n    Jukcy: \"Є\",\n    jukcy: \"є\",\n    Kappa: \"Κ\",\n    kappa: \"κ\",\n    kappav: \"ϰ\",\n    Kcedil: \"Ķ\",\n    kcedil: \"ķ\",\n    Kcy: \"К\",\n    kcy: \"к\",\n    Kfr: \"\\uD835\\uDD0E\",\n    kfr: \"\\uD835\\uDD28\",\n    kgreen: \"ĸ\",\n    KHcy: \"Х\",\n    khcy: \"х\",\n    KJcy: \"Ќ\",\n    kjcy: \"ќ\",\n    Kopf: \"\\uD835\\uDD42\",\n    kopf: \"\\uD835\\uDD5C\",\n    Kscr: \"\\uD835\\uDCA6\",\n    kscr: \"\\uD835\\uDCC0\",\n    lAarr: \"⇚\",\n    Lacute: \"Ĺ\",\n    lacute: \"ĺ\",\n    laemptyv: \"⦴\",\n    lagran: \"ℒ\",\n    Lambda: \"Λ\",\n    lambda: \"λ\",\n    Lang: \"⟪\",\n    lang: \"⟨\",\n    langd: \"⦑\",\n    langle: \"⟨\",\n    lap: \"⪅\",\n    Laplacetrf: \"ℒ\",\n    laquo: \"\\xab\",\n    Larr: \"↞\",\n    lArr: \"⇐\",\n    larr: \"←\",\n    larrb: \"⇤\",\n    larrbfs: \"⤟\",\n    larrfs: \"⤝\",\n    larrhk: \"↩\",\n    larrlp: \"↫\",\n    larrpl: \"⤹\",\n    larrsim: \"⥳\",\n    larrtl: \"↢\",\n    lat: \"⪫\",\n    lAtail: \"⤛\",\n    latail: \"⤙\",\n    late: \"⪭\",\n    lates: \"⪭︀\",\n    lBarr: \"⤎\",\n    lbarr: \"⤌\",\n    lbbrk: \"❲\",\n    lbrace: \"{\",\n    lbrack: \"[\",\n    lbrke: \"⦋\",\n    lbrksld: \"⦏\",\n    lbrkslu: \"⦍\",\n    Lcaron: \"Ľ\",\n    lcaron: \"ľ\",\n    Lcedil: \"Ļ\",\n    lcedil: \"ļ\",\n    lceil: \"⌈\",\n    lcub: \"{\",\n    Lcy: \"Л\",\n    lcy: \"л\",\n    ldca: \"⤶\",\n    ldquo: \"“\",\n    ldquor: \"„\",\n    ldrdhar: \"⥧\",\n    ldrushar: \"⥋\",\n    ldsh: \"↲\",\n    lE: \"≦\",\n    le: \"≤\",\n    LeftAngleBracket: \"⟨\",\n    LeftArrow: \"←\",\n    Leftarrow: \"⇐\",\n    leftarrow: \"←\",\n    LeftArrowBar: \"⇤\",\n    LeftArrowRightArrow: \"⇆\",\n    leftarrowtail: \"↢\",\n    LeftCeiling: \"⌈\",\n    LeftDoubleBracket: \"⟦\",\n    LeftDownTeeVector: \"⥡\",\n    LeftDownVector: \"⇃\",\n    LeftDownVectorBar: \"⥙\",\n    LeftFloor: \"⌊\",\n    leftharpoondown: \"↽\",\n    leftharpoonup: \"↼\",\n    leftleftarrows: \"⇇\",\n    LeftRightArrow: \"↔\",\n    Leftrightarrow: \"⇔\",\n    leftrightarrow: \"↔\",\n    leftrightarrows: \"⇆\",\n    leftrightharpoons: \"⇋\",\n    leftrightsquigarrow: \"↭\",\n    LeftRightVector: \"⥎\",\n    LeftTee: \"⊣\",\n    LeftTeeArrow: \"↤\",\n    LeftTeeVector: \"⥚\",\n    leftthreetimes: \"⋋\",\n    LeftTriangle: \"⊲\",\n    LeftTriangleBar: \"⧏\",\n    LeftTriangleEqual: \"⊴\",\n    LeftUpDownVector: \"⥑\",\n    LeftUpTeeVector: \"⥠\",\n    LeftUpVector: \"↿\",\n    LeftUpVectorBar: \"⥘\",\n    LeftVector: \"↼\",\n    LeftVectorBar: \"⥒\",\n    lEg: \"⪋\",\n    leg: \"⋚\",\n    leq: \"≤\",\n    leqq: \"≦\",\n    leqslant: \"⩽\",\n    les: \"⩽\",\n    lescc: \"⪨\",\n    lesdot: \"⩿\",\n    lesdoto: \"⪁\",\n    lesdotor: \"⪃\",\n    lesg: \"⋚︀\",\n    lesges: \"⪓\",\n    lessapprox: \"⪅\",\n    lessdot: \"⋖\",\n    lesseqgtr: \"⋚\",\n    lesseqqgtr: \"⪋\",\n    LessEqualGreater: \"⋚\",\n    LessFullEqual: \"≦\",\n    LessGreater: \"≶\",\n    lessgtr: \"≶\",\n    LessLess: \"⪡\",\n    lesssim: \"≲\",\n    LessSlantEqual: \"⩽\",\n    LessTilde: \"≲\",\n    lfisht: \"⥼\",\n    lfloor: \"⌊\",\n    Lfr: \"\\uD835\\uDD0F\",\n    lfr: \"\\uD835\\uDD29\",\n    lg: \"≶\",\n    lgE: \"⪑\",\n    lHar: \"⥢\",\n    lhard: \"↽\",\n    lharu: \"↼\",\n    lharul: \"⥪\",\n    lhblk: \"▄\",\n    LJcy: \"Љ\",\n    ljcy: \"љ\",\n    Ll: \"⋘\",\n    ll: \"≪\",\n    llarr: \"⇇\",\n    llcorner: \"⌞\",\n    Lleftarrow: \"⇚\",\n    llhard: \"⥫\",\n    lltri: \"◺\",\n    Lmidot: \"Ŀ\",\n    lmidot: \"ŀ\",\n    lmoust: \"⎰\",\n    lmoustache: \"⎰\",\n    lnap: \"⪉\",\n    lnapprox: \"⪉\",\n    lnE: \"≨\",\n    lne: \"⪇\",\n    lneq: \"⪇\",\n    lneqq: \"≨\",\n    lnsim: \"⋦\",\n    loang: \"⟬\",\n    loarr: \"⇽\",\n    lobrk: \"⟦\",\n    LongLeftArrow: \"⟵\",\n    Longleftarrow: \"⟸\",\n    longleftarrow: \"⟵\",\n    LongLeftRightArrow: \"⟷\",\n    Longleftrightarrow: \"⟺\",\n    longleftrightarrow: \"⟷\",\n    longmapsto: \"⟼\",\n    LongRightArrow: \"⟶\",\n    Longrightarrow: \"⟹\",\n    longrightarrow: \"⟶\",\n    looparrowleft: \"↫\",\n    looparrowright: \"↬\",\n    lopar: \"⦅\",\n    Lopf: \"\\uD835\\uDD43\",\n    lopf: \"\\uD835\\uDD5D\",\n    loplus: \"⨭\",\n    lotimes: \"⨴\",\n    lowast: \"∗\",\n    lowbar: \"_\",\n    LowerLeftArrow: \"↙\",\n    LowerRightArrow: \"↘\",\n    loz: \"◊\",\n    lozenge: \"◊\",\n    lozf: \"⧫\",\n    lpar: \"(\",\n    lparlt: \"⦓\",\n    lrarr: \"⇆\",\n    lrcorner: \"⌟\",\n    lrhar: \"⇋\",\n    lrhard: \"⥭\",\n    lrm: \"‎\",\n    lrtri: \"⊿\",\n    lsaquo: \"‹\",\n    Lscr: \"ℒ\",\n    lscr: \"\\uD835\\uDCC1\",\n    Lsh: \"↰\",\n    lsh: \"↰\",\n    lsim: \"≲\",\n    lsime: \"⪍\",\n    lsimg: \"⪏\",\n    lsqb: \"[\",\n    lsquo: \"‘\",\n    lsquor: \"‚\",\n    Lstrok: \"Ł\",\n    lstrok: \"ł\",\n    Lt: \"≪\",\n    LT: \"<\",\n    lt: \"<\",\n    ltcc: \"⪦\",\n    ltcir: \"⩹\",\n    ltdot: \"⋖\",\n    lthree: \"⋋\",\n    ltimes: \"⋉\",\n    ltlarr: \"⥶\",\n    ltquest: \"⩻\",\n    ltri: \"◃\",\n    ltrie: \"⊴\",\n    ltrif: \"◂\",\n    ltrPar: \"⦖\",\n    lurdshar: \"⥊\",\n    luruhar: \"⥦\",\n    lvertneqq: \"≨︀\",\n    lvnE: \"≨︀\",\n    macr: \"\\xaf\",\n    male: \"♂\",\n    malt: \"✠\",\n    maltese: \"✠\",\n    Map: \"⤅\",\n    map: \"↦\",\n    mapsto: \"↦\",\n    mapstodown: \"↧\",\n    mapstoleft: \"↤\",\n    mapstoup: \"↥\",\n    marker: \"▮\",\n    mcomma: \"⨩\",\n    Mcy: \"М\",\n    mcy: \"м\",\n    mdash: \"—\",\n    mDDot: \"∺\",\n    measuredangle: \"∡\",\n    MediumSpace: \" \",\n    Mellintrf: \"ℳ\",\n    Mfr: \"\\uD835\\uDD10\",\n    mfr: \"\\uD835\\uDD2A\",\n    mho: \"℧\",\n    micro: \"\\xb5\",\n    mid: \"∣\",\n    midast: \"*\",\n    midcir: \"⫰\",\n    middot: \"\\xb7\",\n    minus: \"−\",\n    minusb: \"⊟\",\n    minusd: \"∸\",\n    minusdu: \"⨪\",\n    MinusPlus: \"∓\",\n    mlcp: \"⫛\",\n    mldr: \"…\",\n    mnplus: \"∓\",\n    models: \"⊧\",\n    Mopf: \"\\uD835\\uDD44\",\n    mopf: \"\\uD835\\uDD5E\",\n    mp: \"∓\",\n    Mscr: \"ℳ\",\n    mscr: \"\\uD835\\uDCC2\",\n    mstpos: \"∾\",\n    Mu: \"Μ\",\n    mu: \"μ\",\n    multimap: \"⊸\",\n    mumap: \"⊸\",\n    nabla: \"∇\",\n    Nacute: \"Ń\",\n    nacute: \"ń\",\n    nang: \"∠⃒\",\n    nap: \"≉\",\n    napE: \"⩰̸\",\n    napid: \"≋̸\",\n    napos: \"ŉ\",\n    napprox: \"≉\",\n    natur: \"♮\",\n    natural: \"♮\",\n    naturals: \"ℕ\",\n    nbsp: \"\\xa0\",\n    nbump: \"≎̸\",\n    nbumpe: \"≏̸\",\n    ncap: \"⩃\",\n    Ncaron: \"Ň\",\n    ncaron: \"ň\",\n    Ncedil: \"Ņ\",\n    ncedil: \"ņ\",\n    ncong: \"≇\",\n    ncongdot: \"⩭̸\",\n    ncup: \"⩂\",\n    Ncy: \"Н\",\n    ncy: \"н\",\n    ndash: \"–\",\n    ne: \"≠\",\n    nearhk: \"⤤\",\n    neArr: \"⇗\",\n    nearr: \"↗\",\n    nearrow: \"↗\",\n    nedot: \"≐̸\",\n    NegativeMediumSpace: \"​\",\n    NegativeThickSpace: \"​\",\n    NegativeThinSpace: \"​\",\n    NegativeVeryThinSpace: \"​\",\n    nequiv: \"≢\",\n    nesear: \"⤨\",\n    nesim: \"≂̸\",\n    NestedGreaterGreater: \"≫\",\n    NestedLessLess: \"≪\",\n    NewLine: \"\\n\",\n    nexist: \"∄\",\n    nexists: \"∄\",\n    Nfr: \"\\uD835\\uDD11\",\n    nfr: \"\\uD835\\uDD2B\",\n    ngE: \"≧̸\",\n    nge: \"≱\",\n    ngeq: \"≱\",\n    ngeqq: \"≧̸\",\n    ngeqslant: \"⩾̸\",\n    nges: \"⩾̸\",\n    nGg: \"⋙̸\",\n    ngsim: \"≵\",\n    nGt: \"≫⃒\",\n    ngt: \"≯\",\n    ngtr: \"≯\",\n    nGtv: \"≫̸\",\n    nhArr: \"⇎\",\n    nharr: \"↮\",\n    nhpar: \"⫲\",\n    ni: \"∋\",\n    nis: \"⋼\",\n    nisd: \"⋺\",\n    niv: \"∋\",\n    NJcy: \"Њ\",\n    njcy: \"њ\",\n    nlArr: \"⇍\",\n    nlarr: \"↚\",\n    nldr: \"‥\",\n    nlE: \"≦̸\",\n    nle: \"≰\",\n    nLeftarrow: \"⇍\",\n    nleftarrow: \"↚\",\n    nLeftrightarrow: \"⇎\",\n    nleftrightarrow: \"↮\",\n    nleq: \"≰\",\n    nleqq: \"≦̸\",\n    nleqslant: \"⩽̸\",\n    nles: \"⩽̸\",\n    nless: \"≮\",\n    nLl: \"⋘̸\",\n    nlsim: \"≴\",\n    nLt: \"≪⃒\",\n    nlt: \"≮\",\n    nltri: \"⋪\",\n    nltrie: \"⋬\",\n    nLtv: \"≪̸\",\n    nmid: \"∤\",\n    NoBreak: \"⁠\",\n    NonBreakingSpace: \"\\xa0\",\n    Nopf: \"ℕ\",\n    nopf: \"\\uD835\\uDD5F\",\n    Not: \"⫬\",\n    not: \"\\xac\",\n    NotCongruent: \"≢\",\n    NotCupCap: \"≭\",\n    NotDoubleVerticalBar: \"∦\",\n    NotElement: \"∉\",\n    NotEqual: \"≠\",\n    NotEqualTilde: \"≂̸\",\n    NotExists: \"∄\",\n    NotGreater: \"≯\",\n    NotGreaterEqual: \"≱\",\n    NotGreaterFullEqual: \"≧̸\",\n    NotGreaterGreater: \"≫̸\",\n    NotGreaterLess: \"≹\",\n    NotGreaterSlantEqual: \"⩾̸\",\n    NotGreaterTilde: \"≵\",\n    NotHumpDownHump: \"≎̸\",\n    NotHumpEqual: \"≏̸\",\n    notin: \"∉\",\n    notindot: \"⋵̸\",\n    notinE: \"⋹̸\",\n    notinva: \"∉\",\n    notinvb: \"⋷\",\n    notinvc: \"⋶\",\n    NotLeftTriangle: \"⋪\",\n    NotLeftTriangleBar: \"⧏̸\",\n    NotLeftTriangleEqual: \"⋬\",\n    NotLess: \"≮\",\n    NotLessEqual: \"≰\",\n    NotLessGreater: \"≸\",\n    NotLessLess: \"≪̸\",\n    NotLessSlantEqual: \"⩽̸\",\n    NotLessTilde: \"≴\",\n    NotNestedGreaterGreater: \"⪢̸\",\n    NotNestedLessLess: \"⪡̸\",\n    notni: \"∌\",\n    notniva: \"∌\",\n    notnivb: \"⋾\",\n    notnivc: \"⋽\",\n    NotPrecedes: \"⊀\",\n    NotPrecedesEqual: \"⪯̸\",\n    NotPrecedesSlantEqual: \"⋠\",\n    NotReverseElement: \"∌\",\n    NotRightTriangle: \"⋫\",\n    NotRightTriangleBar: \"⧐̸\",\n    NotRightTriangleEqual: \"⋭\",\n    NotSquareSubset: \"⊏̸\",\n    NotSquareSubsetEqual: \"⋢\",\n    NotSquareSuperset: \"⊐̸\",\n    NotSquareSupersetEqual: \"⋣\",\n    NotSubset: \"⊂⃒\",\n    NotSubsetEqual: \"⊈\",\n    NotSucceeds: \"⊁\",\n    NotSucceedsEqual: \"⪰̸\",\n    NotSucceedsSlantEqual: \"⋡\",\n    NotSucceedsTilde: \"≿̸\",\n    NotSuperset: \"⊃⃒\",\n    NotSupersetEqual: \"⊉\",\n    NotTilde: \"≁\",\n    NotTildeEqual: \"≄\",\n    NotTildeFullEqual: \"≇\",\n    NotTildeTilde: \"≉\",\n    NotVerticalBar: \"∤\",\n    npar: \"∦\",\n    nparallel: \"∦\",\n    nparsl: \"⫽⃥\",\n    npart: \"∂̸\",\n    npolint: \"⨔\",\n    npr: \"⊀\",\n    nprcue: \"⋠\",\n    npre: \"⪯̸\",\n    nprec: \"⊀\",\n    npreceq: \"⪯̸\",\n    nrArr: \"⇏\",\n    nrarr: \"↛\",\n    nrarrc: \"⤳̸\",\n    nrarrw: \"↝̸\",\n    nRightarrow: \"⇏\",\n    nrightarrow: \"↛\",\n    nrtri: \"⋫\",\n    nrtrie: \"⋭\",\n    nsc: \"⊁\",\n    nsccue: \"⋡\",\n    nsce: \"⪰̸\",\n    Nscr: \"\\uD835\\uDCA9\",\n    nscr: \"\\uD835\\uDCC3\",\n    nshortmid: \"∤\",\n    nshortparallel: \"∦\",\n    nsim: \"≁\",\n    nsime: \"≄\",\n    nsimeq: \"≄\",\n    nsmid: \"∤\",\n    nspar: \"∦\",\n    nsqsube: \"⋢\",\n    nsqsupe: \"⋣\",\n    nsub: \"⊄\",\n    nsubE: \"⫅̸\",\n    nsube: \"⊈\",\n    nsubset: \"⊂⃒\",\n    nsubseteq: \"⊈\",\n    nsubseteqq: \"⫅̸\",\n    nsucc: \"⊁\",\n    nsucceq: \"⪰̸\",\n    nsup: \"⊅\",\n    nsupE: \"⫆̸\",\n    nsupe: \"⊉\",\n    nsupset: \"⊃⃒\",\n    nsupseteq: \"⊉\",\n    nsupseteqq: \"⫆̸\",\n    ntgl: \"≹\",\n    Ntilde: \"\\xd1\",\n    ntilde: \"\\xf1\",\n    ntlg: \"≸\",\n    ntriangleleft: \"⋪\",\n    ntrianglelefteq: \"⋬\",\n    ntriangleright: \"⋫\",\n    ntrianglerighteq: \"⋭\",\n    Nu: \"Ν\",\n    nu: \"ν\",\n    num: \"#\",\n    numero: \"№\",\n    numsp: \" \",\n    nvap: \"≍⃒\",\n    nVDash: \"⊯\",\n    nVdash: \"⊮\",\n    nvDash: \"⊭\",\n    nvdash: \"⊬\",\n    nvge: \"≥⃒\",\n    nvgt: \">⃒\",\n    nvHarr: \"⤄\",\n    nvinfin: \"⧞\",\n    nvlArr: \"⤂\",\n    nvle: \"≤⃒\",\n    nvlt: \"<⃒\",\n    nvltrie: \"⊴⃒\",\n    nvrArr: \"⤃\",\n    nvrtrie: \"⊵⃒\",\n    nvsim: \"∼⃒\",\n    nwarhk: \"⤣\",\n    nwArr: \"⇖\",\n    nwarr: \"↖\",\n    nwarrow: \"↖\",\n    nwnear: \"⤧\",\n    Oacute: \"\\xd3\",\n    oacute: \"\\xf3\",\n    oast: \"⊛\",\n    ocir: \"⊚\",\n    Ocirc: \"\\xd4\",\n    ocirc: \"\\xf4\",\n    Ocy: \"О\",\n    ocy: \"о\",\n    odash: \"⊝\",\n    Odblac: \"Ő\",\n    odblac: \"ő\",\n    odiv: \"⨸\",\n    odot: \"⊙\",\n    odsold: \"⦼\",\n    OElig: \"Œ\",\n    oelig: \"œ\",\n    ofcir: \"⦿\",\n    Ofr: \"\\uD835\\uDD12\",\n    ofr: \"\\uD835\\uDD2C\",\n    ogon: \"˛\",\n    Ograve: \"\\xd2\",\n    ograve: \"\\xf2\",\n    ogt: \"⧁\",\n    ohbar: \"⦵\",\n    ohm: \"Ω\",\n    oint: \"∮\",\n    olarr: \"↺\",\n    olcir: \"⦾\",\n    olcross: \"⦻\",\n    oline: \"‾\",\n    olt: \"⧀\",\n    Omacr: \"Ō\",\n    omacr: \"ō\",\n    Omega: \"Ω\",\n    omega: \"ω\",\n    Omicron: \"Ο\",\n    omicron: \"ο\",\n    omid: \"⦶\",\n    ominus: \"⊖\",\n    Oopf: \"\\uD835\\uDD46\",\n    oopf: \"\\uD835\\uDD60\",\n    opar: \"⦷\",\n    OpenCurlyDoubleQuote: \"“\",\n    OpenCurlyQuote: \"‘\",\n    operp: \"⦹\",\n    oplus: \"⊕\",\n    Or: \"⩔\",\n    or: \"∨\",\n    orarr: \"↻\",\n    ord: \"⩝\",\n    order: \"ℴ\",\n    orderof: \"ℴ\",\n    ordf: \"\\xaa\",\n    ordm: \"\\xba\",\n    origof: \"⊶\",\n    oror: \"⩖\",\n    orslope: \"⩗\",\n    orv: \"⩛\",\n    oS: \"Ⓢ\",\n    Oscr: \"\\uD835\\uDCAA\",\n    oscr: \"ℴ\",\n    Oslash: \"\\xd8\",\n    oslash: \"\\xf8\",\n    osol: \"⊘\",\n    Otilde: \"\\xd5\",\n    otilde: \"\\xf5\",\n    Otimes: \"⨷\",\n    otimes: \"⊗\",\n    otimesas: \"⨶\",\n    Ouml: \"\\xd6\",\n    ouml: \"\\xf6\",\n    ovbar: \"⌽\",\n    OverBar: \"‾\",\n    OverBrace: \"⏞\",\n    OverBracket: \"⎴\",\n    OverParenthesis: \"⏜\",\n    par: \"∥\",\n    para: \"\\xb6\",\n    parallel: \"∥\",\n    parsim: \"⫳\",\n    parsl: \"⫽\",\n    part: \"∂\",\n    PartialD: \"∂\",\n    Pcy: \"П\",\n    pcy: \"п\",\n    percnt: \"%\",\n    period: \".\",\n    permil: \"‰\",\n    perp: \"⊥\",\n    pertenk: \"‱\",\n    Pfr: \"\\uD835\\uDD13\",\n    pfr: \"\\uD835\\uDD2D\",\n    Phi: \"Φ\",\n    phi: \"φ\",\n    phiv: \"ϕ\",\n    phmmat: \"ℳ\",\n    phone: \"☎\",\n    Pi: \"Π\",\n    pi: \"π\",\n    pitchfork: \"⋔\",\n    piv: \"ϖ\",\n    planck: \"ℏ\",\n    planckh: \"ℎ\",\n    plankv: \"ℏ\",\n    plus: \"+\",\n    plusacir: \"⨣\",\n    plusb: \"⊞\",\n    pluscir: \"⨢\",\n    plusdo: \"∔\",\n    plusdu: \"⨥\",\n    pluse: \"⩲\",\n    PlusMinus: \"\\xb1\",\n    plusmn: \"\\xb1\",\n    plussim: \"⨦\",\n    plustwo: \"⨧\",\n    pm: \"\\xb1\",\n    Poincareplane: \"ℌ\",\n    pointint: \"⨕\",\n    Popf: \"ℙ\",\n    popf: \"\\uD835\\uDD61\",\n    pound: \"\\xa3\",\n    Pr: \"⪻\",\n    pr: \"≺\",\n    prap: \"⪷\",\n    prcue: \"≼\",\n    prE: \"⪳\",\n    pre: \"⪯\",\n    prec: \"≺\",\n    precapprox: \"⪷\",\n    preccurlyeq: \"≼\",\n    Precedes: \"≺\",\n    PrecedesEqual: \"⪯\",\n    PrecedesSlantEqual: \"≼\",\n    PrecedesTilde: \"≾\",\n    preceq: \"⪯\",\n    precnapprox: \"⪹\",\n    precneqq: \"⪵\",\n    precnsim: \"⋨\",\n    precsim: \"≾\",\n    Prime: \"″\",\n    prime: \"′\",\n    primes: \"ℙ\",\n    prnap: \"⪹\",\n    prnE: \"⪵\",\n    prnsim: \"⋨\",\n    prod: \"∏\",\n    Product: \"∏\",\n    profalar: \"⌮\",\n    profline: \"⌒\",\n    profsurf: \"⌓\",\n    prop: \"∝\",\n    Proportion: \"∷\",\n    Proportional: \"∝\",\n    propto: \"∝\",\n    prsim: \"≾\",\n    prurel: \"⊰\",\n    Pscr: \"\\uD835\\uDCAB\",\n    pscr: \"\\uD835\\uDCC5\",\n    Psi: \"Ψ\",\n    psi: \"ψ\",\n    puncsp: \" \",\n    Qfr: \"\\uD835\\uDD14\",\n    qfr: \"\\uD835\\uDD2E\",\n    qint: \"⨌\",\n    Qopf: \"ℚ\",\n    qopf: \"\\uD835\\uDD62\",\n    qprime: \"⁗\",\n    Qscr: \"\\uD835\\uDCAC\",\n    qscr: \"\\uD835\\uDCC6\",\n    quaternions: \"ℍ\",\n    quatint: \"⨖\",\n    quest: \"?\",\n    questeq: \"≟\",\n    QUOT: '\"',\n    quot: '\"',\n    rAarr: \"⇛\",\n    race: \"∽̱\",\n    Racute: \"Ŕ\",\n    racute: \"ŕ\",\n    radic: \"√\",\n    raemptyv: \"⦳\",\n    Rang: \"⟫\",\n    rang: \"⟩\",\n    rangd: \"⦒\",\n    range: \"⦥\",\n    rangle: \"⟩\",\n    raquo: \"\\xbb\",\n    Rarr: \"↠\",\n    rArr: \"⇒\",\n    rarr: \"→\",\n    rarrap: \"⥵\",\n    rarrb: \"⇥\",\n    rarrbfs: \"⤠\",\n    rarrc: \"⤳\",\n    rarrfs: \"⤞\",\n    rarrhk: \"↪\",\n    rarrlp: \"↬\",\n    rarrpl: \"⥅\",\n    rarrsim: \"⥴\",\n    Rarrtl: \"⤖\",\n    rarrtl: \"↣\",\n    rarrw: \"↝\",\n    rAtail: \"⤜\",\n    ratail: \"⤚\",\n    ratio: \"∶\",\n    rationals: \"ℚ\",\n    RBarr: \"⤐\",\n    rBarr: \"⤏\",\n    rbarr: \"⤍\",\n    rbbrk: \"❳\",\n    rbrace: \"}\",\n    rbrack: \"]\",\n    rbrke: \"⦌\",\n    rbrksld: \"⦎\",\n    rbrkslu: \"⦐\",\n    Rcaron: \"Ř\",\n    rcaron: \"ř\",\n    Rcedil: \"Ŗ\",\n    rcedil: \"ŗ\",\n    rceil: \"⌉\",\n    rcub: \"}\",\n    Rcy: \"Р\",\n    rcy: \"р\",\n    rdca: \"⤷\",\n    rdldhar: \"⥩\",\n    rdquo: \"”\",\n    rdquor: \"”\",\n    rdsh: \"↳\",\n    Re: \"ℜ\",\n    real: \"ℜ\",\n    realine: \"ℛ\",\n    realpart: \"ℜ\",\n    reals: \"ℝ\",\n    rect: \"▭\",\n    REG: \"\\xae\",\n    reg: \"\\xae\",\n    ReverseElement: \"∋\",\n    ReverseEquilibrium: \"⇋\",\n    ReverseUpEquilibrium: \"⥯\",\n    rfisht: \"⥽\",\n    rfloor: \"⌋\",\n    Rfr: \"ℜ\",\n    rfr: \"\\uD835\\uDD2F\",\n    rHar: \"⥤\",\n    rhard: \"⇁\",\n    rharu: \"⇀\",\n    rharul: \"⥬\",\n    Rho: \"Ρ\",\n    rho: \"ρ\",\n    rhov: \"ϱ\",\n    RightAngleBracket: \"⟩\",\n    RightArrow: \"→\",\n    Rightarrow: \"⇒\",\n    rightarrow: \"→\",\n    RightArrowBar: \"⇥\",\n    RightArrowLeftArrow: \"⇄\",\n    rightarrowtail: \"↣\",\n    RightCeiling: \"⌉\",\n    RightDoubleBracket: \"⟧\",\n    RightDownTeeVector: \"⥝\",\n    RightDownVector: \"⇂\",\n    RightDownVectorBar: \"⥕\",\n    RightFloor: \"⌋\",\n    rightharpoondown: \"⇁\",\n    rightharpoonup: \"⇀\",\n    rightleftarrows: \"⇄\",\n    rightleftharpoons: \"⇌\",\n    rightrightarrows: \"⇉\",\n    rightsquigarrow: \"↝\",\n    RightTee: \"⊢\",\n    RightTeeArrow: \"↦\",\n    RightTeeVector: \"⥛\",\n    rightthreetimes: \"⋌\",\n    RightTriangle: \"⊳\",\n    RightTriangleBar: \"⧐\",\n    RightTriangleEqual: \"⊵\",\n    RightUpDownVector: \"⥏\",\n    RightUpTeeVector: \"⥜\",\n    RightUpVector: \"↾\",\n    RightUpVectorBar: \"⥔\",\n    RightVector: \"⇀\",\n    RightVectorBar: \"⥓\",\n    ring: \"˚\",\n    risingdotseq: \"≓\",\n    rlarr: \"⇄\",\n    rlhar: \"⇌\",\n    rlm: \"‏\",\n    rmoust: \"⎱\",\n    rmoustache: \"⎱\",\n    rnmid: \"⫮\",\n    roang: \"⟭\",\n    roarr: \"⇾\",\n    robrk: \"⟧\",\n    ropar: \"⦆\",\n    Ropf: \"ℝ\",\n    ropf: \"\\uD835\\uDD63\",\n    roplus: \"⨮\",\n    rotimes: \"⨵\",\n    RoundImplies: \"⥰\",\n    rpar: \")\",\n    rpargt: \"⦔\",\n    rppolint: \"⨒\",\n    rrarr: \"⇉\",\n    Rrightarrow: \"⇛\",\n    rsaquo: \"›\",\n    Rscr: \"ℛ\",\n    rscr: \"\\uD835\\uDCC7\",\n    Rsh: \"↱\",\n    rsh: \"↱\",\n    rsqb: \"]\",\n    rsquo: \"’\",\n    rsquor: \"’\",\n    rthree: \"⋌\",\n    rtimes: \"⋊\",\n    rtri: \"▹\",\n    rtrie: \"⊵\",\n    rtrif: \"▸\",\n    rtriltri: \"⧎\",\n    RuleDelayed: \"⧴\",\n    ruluhar: \"⥨\",\n    rx: \"℞\",\n    Sacute: \"Ś\",\n    sacute: \"ś\",\n    sbquo: \"‚\",\n    Sc: \"⪼\",\n    sc: \"≻\",\n    scap: \"⪸\",\n    Scaron: \"Š\",\n    scaron: \"š\",\n    sccue: \"≽\",\n    scE: \"⪴\",\n    sce: \"⪰\",\n    Scedil: \"Ş\",\n    scedil: \"ş\",\n    Scirc: \"Ŝ\",\n    scirc: \"ŝ\",\n    scnap: \"⪺\",\n    scnE: \"⪶\",\n    scnsim: \"⋩\",\n    scpolint: \"⨓\",\n    scsim: \"≿\",\n    Scy: \"С\",\n    scy: \"с\",\n    sdot: \"⋅\",\n    sdotb: \"⊡\",\n    sdote: \"⩦\",\n    searhk: \"⤥\",\n    seArr: \"⇘\",\n    searr: \"↘\",\n    searrow: \"↘\",\n    sect: \"\\xa7\",\n    semi: \";\",\n    seswar: \"⤩\",\n    setminus: \"∖\",\n    setmn: \"∖\",\n    sext: \"✶\",\n    Sfr: \"\\uD835\\uDD16\",\n    sfr: \"\\uD835\\uDD30\",\n    sfrown: \"⌢\",\n    sharp: \"♯\",\n    SHCHcy: \"Щ\",\n    shchcy: \"щ\",\n    SHcy: \"Ш\",\n    shcy: \"ш\",\n    ShortDownArrow: \"↓\",\n    ShortLeftArrow: \"←\",\n    shortmid: \"∣\",\n    shortparallel: \"∥\",\n    ShortRightArrow: \"→\",\n    ShortUpArrow: \"↑\",\n    shy: \"\\xad\",\n    Sigma: \"Σ\",\n    sigma: \"σ\",\n    sigmaf: \"ς\",\n    sigmav: \"ς\",\n    sim: \"∼\",\n    simdot: \"⩪\",\n    sime: \"≃\",\n    simeq: \"≃\",\n    simg: \"⪞\",\n    simgE: \"⪠\",\n    siml: \"⪝\",\n    simlE: \"⪟\",\n    simne: \"≆\",\n    simplus: \"⨤\",\n    simrarr: \"⥲\",\n    slarr: \"←\",\n    SmallCircle: \"∘\",\n    smallsetminus: \"∖\",\n    smashp: \"⨳\",\n    smeparsl: \"⧤\",\n    smid: \"∣\",\n    smile: \"⌣\",\n    smt: \"⪪\",\n    smte: \"⪬\",\n    smtes: \"⪬︀\",\n    SOFTcy: \"Ь\",\n    softcy: \"ь\",\n    sol: \"/\",\n    solb: \"⧄\",\n    solbar: \"⌿\",\n    Sopf: \"\\uD835\\uDD4A\",\n    sopf: \"\\uD835\\uDD64\",\n    spades: \"♠\",\n    spadesuit: \"♠\",\n    spar: \"∥\",\n    sqcap: \"⊓\",\n    sqcaps: \"⊓︀\",\n    sqcup: \"⊔\",\n    sqcups: \"⊔︀\",\n    Sqrt: \"√\",\n    sqsub: \"⊏\",\n    sqsube: \"⊑\",\n    sqsubset: \"⊏\",\n    sqsubseteq: \"⊑\",\n    sqsup: \"⊐\",\n    sqsupe: \"⊒\",\n    sqsupset: \"⊐\",\n    sqsupseteq: \"⊒\",\n    squ: \"□\",\n    Square: \"□\",\n    square: \"□\",\n    SquareIntersection: \"⊓\",\n    SquareSubset: \"⊏\",\n    SquareSubsetEqual: \"⊑\",\n    SquareSuperset: \"⊐\",\n    SquareSupersetEqual: \"⊒\",\n    SquareUnion: \"⊔\",\n    squarf: \"▪\",\n    squf: \"▪\",\n    srarr: \"→\",\n    Sscr: \"\\uD835\\uDCAE\",\n    sscr: \"\\uD835\\uDCC8\",\n    ssetmn: \"∖\",\n    ssmile: \"⌣\",\n    sstarf: \"⋆\",\n    Star: \"⋆\",\n    star: \"☆\",\n    starf: \"★\",\n    straightepsilon: \"ϵ\",\n    straightphi: \"ϕ\",\n    strns: \"\\xaf\",\n    Sub: \"⋐\",\n    sub: \"⊂\",\n    subdot: \"⪽\",\n    subE: \"⫅\",\n    sube: \"⊆\",\n    subedot: \"⫃\",\n    submult: \"⫁\",\n    subnE: \"⫋\",\n    subne: \"⊊\",\n    subplus: \"⪿\",\n    subrarr: \"⥹\",\n    Subset: \"⋐\",\n    subset: \"⊂\",\n    subseteq: \"⊆\",\n    subseteqq: \"⫅\",\n    SubsetEqual: \"⊆\",\n    subsetneq: \"⊊\",\n    subsetneqq: \"⫋\",\n    subsim: \"⫇\",\n    subsub: \"⫕\",\n    subsup: \"⫓\",\n    succ: \"≻\",\n    succapprox: \"⪸\",\n    succcurlyeq: \"≽\",\n    Succeeds: \"≻\",\n    SucceedsEqual: \"⪰\",\n    SucceedsSlantEqual: \"≽\",\n    SucceedsTilde: \"≿\",\n    succeq: \"⪰\",\n    succnapprox: \"⪺\",\n    succneqq: \"⪶\",\n    succnsim: \"⋩\",\n    succsim: \"≿\",\n    SuchThat: \"∋\",\n    Sum: \"∑\",\n    sum: \"∑\",\n    sung: \"♪\",\n    Sup: \"⋑\",\n    sup: \"⊃\",\n    sup1: \"\\xb9\",\n    sup2: \"\\xb2\",\n    sup3: \"\\xb3\",\n    supdot: \"⪾\",\n    supdsub: \"⫘\",\n    supE: \"⫆\",\n    supe: \"⊇\",\n    supedot: \"⫄\",\n    Superset: \"⊃\",\n    SupersetEqual: \"⊇\",\n    suphsol: \"⟉\",\n    suphsub: \"⫗\",\n    suplarr: \"⥻\",\n    supmult: \"⫂\",\n    supnE: \"⫌\",\n    supne: \"⊋\",\n    supplus: \"⫀\",\n    Supset: \"⋑\",\n    supset: \"⊃\",\n    supseteq: \"⊇\",\n    supseteqq: \"⫆\",\n    supsetneq: \"⊋\",\n    supsetneqq: \"⫌\",\n    supsim: \"⫈\",\n    supsub: \"⫔\",\n    supsup: \"⫖\",\n    swarhk: \"⤦\",\n    swArr: \"⇙\",\n    swarr: \"↙\",\n    swarrow: \"↙\",\n    swnwar: \"⤪\",\n    szlig: \"\\xdf\",\n    Tab: \"\t\",\n    target: \"⌖\",\n    Tau: \"Τ\",\n    tau: \"τ\",\n    tbrk: \"⎴\",\n    Tcaron: \"Ť\",\n    tcaron: \"ť\",\n    Tcedil: \"Ţ\",\n    tcedil: \"ţ\",\n    Tcy: \"Т\",\n    tcy: \"т\",\n    tdot: \"⃛\",\n    telrec: \"⌕\",\n    Tfr: \"\\uD835\\uDD17\",\n    tfr: \"\\uD835\\uDD31\",\n    there4: \"∴\",\n    Therefore: \"∴\",\n    therefore: \"∴\",\n    Theta: \"Θ\",\n    theta: \"θ\",\n    thetasym: \"ϑ\",\n    thetav: \"ϑ\",\n    thickapprox: \"≈\",\n    thicksim: \"∼\",\n    ThickSpace: \"  \",\n    thinsp: \" \",\n    ThinSpace: \" \",\n    thkap: \"≈\",\n    thksim: \"∼\",\n    THORN: \"\\xde\",\n    thorn: \"\\xfe\",\n    Tilde: \"∼\",\n    tilde: \"˜\",\n    TildeEqual: \"≃\",\n    TildeFullEqual: \"≅\",\n    TildeTilde: \"≈\",\n    times: \"\\xd7\",\n    timesb: \"⊠\",\n    timesbar: \"⨱\",\n    timesd: \"⨰\",\n    tint: \"∭\",\n    toea: \"⤨\",\n    top: \"⊤\",\n    topbot: \"⌶\",\n    topcir: \"⫱\",\n    Topf: \"\\uD835\\uDD4B\",\n    topf: \"\\uD835\\uDD65\",\n    topfork: \"⫚\",\n    tosa: \"⤩\",\n    tprime: \"‴\",\n    TRADE: \"™\",\n    trade: \"™\",\n    triangle: \"▵\",\n    triangledown: \"▿\",\n    triangleleft: \"◃\",\n    trianglelefteq: \"⊴\",\n    triangleq: \"≜\",\n    triangleright: \"▹\",\n    trianglerighteq: \"⊵\",\n    tridot: \"◬\",\n    trie: \"≜\",\n    triminus: \"⨺\",\n    TripleDot: \"⃛\",\n    triplus: \"⨹\",\n    trisb: \"⧍\",\n    tritime: \"⨻\",\n    trpezium: \"⏢\",\n    Tscr: \"\\uD835\\uDCAF\",\n    tscr: \"\\uD835\\uDCC9\",\n    TScy: \"Ц\",\n    tscy: \"ц\",\n    TSHcy: \"Ћ\",\n    tshcy: \"ћ\",\n    Tstrok: \"Ŧ\",\n    tstrok: \"ŧ\",\n    twixt: \"≬\",\n    twoheadleftarrow: \"↞\",\n    twoheadrightarrow: \"↠\",\n    Uacute: \"\\xda\",\n    uacute: \"\\xfa\",\n    Uarr: \"↟\",\n    uArr: \"⇑\",\n    uarr: \"↑\",\n    Uarrocir: \"⥉\",\n    Ubrcy: \"Ў\",\n    ubrcy: \"ў\",\n    Ubreve: \"Ŭ\",\n    ubreve: \"ŭ\",\n    Ucirc: \"\\xdb\",\n    ucirc: \"\\xfb\",\n    Ucy: \"У\",\n    ucy: \"у\",\n    udarr: \"⇅\",\n    Udblac: \"Ű\",\n    udblac: \"ű\",\n    udhar: \"⥮\",\n    ufisht: \"⥾\",\n    Ufr: \"\\uD835\\uDD18\",\n    ufr: \"\\uD835\\uDD32\",\n    Ugrave: \"\\xd9\",\n    ugrave: \"\\xf9\",\n    uHar: \"⥣\",\n    uharl: \"↿\",\n    uharr: \"↾\",\n    uhblk: \"▀\",\n    ulcorn: \"⌜\",\n    ulcorner: \"⌜\",\n    ulcrop: \"⌏\",\n    ultri: \"◸\",\n    Umacr: \"Ū\",\n    umacr: \"ū\",\n    uml: \"\\xa8\",\n    UnderBar: \"_\",\n    UnderBrace: \"⏟\",\n    UnderBracket: \"⎵\",\n    UnderParenthesis: \"⏝\",\n    Union: \"⋃\",\n    UnionPlus: \"⊎\",\n    Uogon: \"Ų\",\n    uogon: \"ų\",\n    Uopf: \"\\uD835\\uDD4C\",\n    uopf: \"\\uD835\\uDD66\",\n    UpArrow: \"↑\",\n    Uparrow: \"⇑\",\n    uparrow: \"↑\",\n    UpArrowBar: \"⤒\",\n    UpArrowDownArrow: \"⇅\",\n    UpDownArrow: \"↕\",\n    Updownarrow: \"⇕\",\n    updownarrow: \"↕\",\n    UpEquilibrium: \"⥮\",\n    upharpoonleft: \"↿\",\n    upharpoonright: \"↾\",\n    uplus: \"⊎\",\n    UpperLeftArrow: \"↖\",\n    UpperRightArrow: \"↗\",\n    Upsi: \"ϒ\",\n    upsi: \"υ\",\n    upsih: \"ϒ\",\n    Upsilon: \"Υ\",\n    upsilon: \"υ\",\n    UpTee: \"⊥\",\n    UpTeeArrow: \"↥\",\n    upuparrows: \"⇈\",\n    urcorn: \"⌝\",\n    urcorner: \"⌝\",\n    urcrop: \"⌎\",\n    Uring: \"Ů\",\n    uring: \"ů\",\n    urtri: \"◹\",\n    Uscr: \"\\uD835\\uDCB0\",\n    uscr: \"\\uD835\\uDCCA\",\n    utdot: \"⋰\",\n    Utilde: \"Ũ\",\n    utilde: \"ũ\",\n    utri: \"▵\",\n    utrif: \"▴\",\n    uuarr: \"⇈\",\n    Uuml: \"\\xdc\",\n    uuml: \"\\xfc\",\n    uwangle: \"⦧\",\n    vangrt: \"⦜\",\n    varepsilon: \"ϵ\",\n    varkappa: \"ϰ\",\n    varnothing: \"∅\",\n    varphi: \"ϕ\",\n    varpi: \"ϖ\",\n    varpropto: \"∝\",\n    vArr: \"⇕\",\n    varr: \"↕\",\n    varrho: \"ϱ\",\n    varsigma: \"ς\",\n    varsubsetneq: \"⊊︀\",\n    varsubsetneqq: \"⫋︀\",\n    varsupsetneq: \"⊋︀\",\n    varsupsetneqq: \"⫌︀\",\n    vartheta: \"ϑ\",\n    vartriangleleft: \"⊲\",\n    vartriangleright: \"⊳\",\n    Vbar: \"⫫\",\n    vBar: \"⫨\",\n    vBarv: \"⫩\",\n    Vcy: \"В\",\n    vcy: \"в\",\n    VDash: \"⊫\",\n    Vdash: \"⊩\",\n    vDash: \"⊨\",\n    vdash: \"⊢\",\n    Vdashl: \"⫦\",\n    Vee: \"⋁\",\n    vee: \"∨\",\n    veebar: \"⊻\",\n    veeeq: \"≚\",\n    vellip: \"⋮\",\n    Verbar: \"‖\",\n    verbar: \"|\",\n    Vert: \"‖\",\n    vert: \"|\",\n    VerticalBar: \"∣\",\n    VerticalLine: \"|\",\n    VerticalSeparator: \"❘\",\n    VerticalTilde: \"≀\",\n    VeryThinSpace: \" \",\n    Vfr: \"\\uD835\\uDD19\",\n    vfr: \"\\uD835\\uDD33\",\n    vltri: \"⊲\",\n    vnsub: \"⊂⃒\",\n    vnsup: \"⊃⃒\",\n    Vopf: \"\\uD835\\uDD4D\",\n    vopf: \"\\uD835\\uDD67\",\n    vprop: \"∝\",\n    vrtri: \"⊳\",\n    Vscr: \"\\uD835\\uDCB1\",\n    vscr: \"\\uD835\\uDCCB\",\n    vsubnE: \"⫋︀\",\n    vsubne: \"⊊︀\",\n    vsupnE: \"⫌︀\",\n    vsupne: \"⊋︀\",\n    Vvdash: \"⊪\",\n    vzigzag: \"⦚\",\n    Wcirc: \"Ŵ\",\n    wcirc: \"ŵ\",\n    wedbar: \"⩟\",\n    Wedge: \"⋀\",\n    wedge: \"∧\",\n    wedgeq: \"≙\",\n    weierp: \"℘\",\n    Wfr: \"\\uD835\\uDD1A\",\n    wfr: \"\\uD835\\uDD34\",\n    Wopf: \"\\uD835\\uDD4E\",\n    wopf: \"\\uD835\\uDD68\",\n    wp: \"℘\",\n    wr: \"≀\",\n    wreath: \"≀\",\n    Wscr: \"\\uD835\\uDCB2\",\n    wscr: \"\\uD835\\uDCCC\",\n    xcap: \"⋂\",\n    xcirc: \"◯\",\n    xcup: \"⋃\",\n    xdtri: \"▽\",\n    Xfr: \"\\uD835\\uDD1B\",\n    xfr: \"\\uD835\\uDD35\",\n    xhArr: \"⟺\",\n    xharr: \"⟷\",\n    Xi: \"Ξ\",\n    xi: \"ξ\",\n    xlArr: \"⟸\",\n    xlarr: \"⟵\",\n    xmap: \"⟼\",\n    xnis: \"⋻\",\n    xodot: \"⨀\",\n    Xopf: \"\\uD835\\uDD4F\",\n    xopf: \"\\uD835\\uDD69\",\n    xoplus: \"⨁\",\n    xotime: \"⨂\",\n    xrArr: \"⟹\",\n    xrarr: \"⟶\",\n    Xscr: \"\\uD835\\uDCB3\",\n    xscr: \"\\uD835\\uDCCD\",\n    xsqcup: \"⨆\",\n    xuplus: \"⨄\",\n    xutri: \"△\",\n    xvee: \"⋁\",\n    xwedge: \"⋀\",\n    Yacute: \"\\xdd\",\n    yacute: \"\\xfd\",\n    YAcy: \"Я\",\n    yacy: \"я\",\n    Ycirc: \"Ŷ\",\n    ycirc: \"ŷ\",\n    Ycy: \"Ы\",\n    ycy: \"ы\",\n    yen: \"\\xa5\",\n    Yfr: \"\\uD835\\uDD1C\",\n    yfr: \"\\uD835\\uDD36\",\n    YIcy: \"Ї\",\n    yicy: \"ї\",\n    Yopf: \"\\uD835\\uDD50\",\n    yopf: \"\\uD835\\uDD6A\",\n    Yscr: \"\\uD835\\uDCB4\",\n    yscr: \"\\uD835\\uDCCE\",\n    YUcy: \"Ю\",\n    yucy: \"ю\",\n    Yuml: \"Ÿ\",\n    yuml: \"\\xff\",\n    Zacute: \"Ź\",\n    zacute: \"ź\",\n    Zcaron: \"Ž\",\n    zcaron: \"ž\",\n    Zcy: \"З\",\n    zcy: \"з\",\n    Zdot: \"Ż\",\n    zdot: \"ż\",\n    zeetrf: \"ℨ\",\n    ZeroWidthSpace: \"​\",\n    Zeta: \"Ζ\",\n    zeta: \"ζ\",\n    Zfr: \"ℨ\",\n    zfr: \"\\uD835\\uDD37\",\n    ZHcy: \"Ж\",\n    zhcy: \"ж\",\n    zigrarr: \"⇝\",\n    Zopf: \"ℤ\",\n    zopf: \"\\uD835\\uDD6B\",\n    Zscr: \"\\uD835\\uDCB5\",\n    zscr: \"\\uD835\\uDCCF\",\n    zwj: \"‍\",\n    zwnj: \"‌\"\n});\n/**\n * @deprecated use `HTML_ENTITIES` instead\n * @see HTML_ENTITIES\n */ exports.entityMap = exports.HTML_ENTITIES;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/entities.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/index.js":
/*!***************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var dom = __webpack_require__(/*! ./dom */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/dom.js\");\nexports.DOMImplementation = dom.DOMImplementation;\nexports.XMLSerializer = dom.XMLSerializer;\nexports.DOMParser = __webpack_require__(/*! ./dom-parser */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/dom-parser.js\").DOMParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B4bWxkb20veG1sZG9tL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxNQUFNQyxtQkFBT0EsQ0FBQztBQUNsQkMseUJBQXlCLEdBQUdGLElBQUlHLGlCQUFpQjtBQUNqREQscUJBQXFCLEdBQUdGLElBQUlJLGFBQWE7QUFDekNGLCtIQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL2V0cy1hZXJvLWlzby1mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvQHhtbGRvbS94bWxkb20vbGliL2luZGV4LmpzP2NmMWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRvbSA9IHJlcXVpcmUoJy4vZG9tJylcbmV4cG9ydHMuRE9NSW1wbGVtZW50YXRpb24gPSBkb20uRE9NSW1wbGVtZW50YXRpb25cbmV4cG9ydHMuWE1MU2VyaWFsaXplciA9IGRvbS5YTUxTZXJpYWxpemVyXG5leHBvcnRzLkRPTVBhcnNlciA9IHJlcXVpcmUoJy4vZG9tLXBhcnNlcicpLkRPTVBhcnNlclxuIl0sIm5hbWVzIjpbImRvbSIsInJlcXVpcmUiLCJleHBvcnRzIiwiRE9NSW1wbGVtZW50YXRpb24iLCJYTUxTZXJpYWxpemVyIiwiRE9NUGFyc2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/sax.js":
/*!*************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/sax.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var NAMESPACE = (__webpack_require__(/*! ./conventions */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\").NAMESPACE);\n//[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/ //\\u10000-\\uEFFFF\n;\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\" + nameStartChar.source.slice(1, -1) + \"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");\nvar tagNamePattern = new RegExp(\"^\" + nameStartChar.source + nameChar.source + \"*(?::\" + nameStartChar.source + nameChar.source + \"*)?$\");\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\nvar S_TAG = 0; //tag name offerring\nvar S_ATTR = 1; //attr name offerring\nvar S_ATTR_SPACE = 2; //attr name end and space offer\nvar S_EQ = 3; //=space?\nvar S_ATTR_NOQUOT_VALUE = 4; //attr value(no quot value only)\nvar S_ATTR_END = 5; //attr value end and no space(quot end)\nvar S_TAG_SPACE = 6; //(attr value end || tag end ) && (space offer)\nvar S_TAG_CLOSE = 7; //closed el<el />\n/**\n * Creates an error that will not be caught by XMLReader aka the SAX parser.\n *\n * @param {string} message\n * @param {any?} locator Optional, can provide details about the location in the source\n * @constructor\n */ function ParseError(message, locator) {\n    this.message = message;\n    this.locator = locator;\n    if (Error.captureStackTrace) Error.captureStackTrace(this, ParseError);\n}\nParseError.prototype = new Error();\nParseError.prototype.name = ParseError.name;\nfunction XMLReader() {}\nXMLReader.prototype = {\n    parse: function(source, defaultNSMap, entityMap) {\n        var domBuilder = this.domBuilder;\n        domBuilder.startDocument();\n        _copy(defaultNSMap, defaultNSMap = {});\n        parse(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);\n        domBuilder.endDocument();\n    }\n};\nfunction parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {\n    function fixedFromCharCode(code) {\n        // String.prototype.fromCharCode does not supports\n        // > 2 bytes unicode chars directly\n        if (code > 0xffff) {\n            code -= 0x10000;\n            var surrogate1 = 0xd800 + (code >> 10), surrogate2 = 0xdc00 + (code & 0x3ff);\n            return String.fromCharCode(surrogate1, surrogate2);\n        } else {\n            return String.fromCharCode(code);\n        }\n    }\n    function entityReplacer(a) {\n        var k = a.slice(1, -1);\n        if (Object.hasOwnProperty.call(entityMap, k)) {\n            return entityMap[k];\n        } else if (k.charAt(0) === \"#\") {\n            return fixedFromCharCode(parseInt(k.substr(1).replace(\"x\", \"0x\")));\n        } else {\n            errorHandler.error(\"entity not found:\" + a);\n            return a;\n        }\n    }\n    function appendText(end) {\n        if (end > start) {\n            var xt = source.substring(start, end).replace(/&#?\\w+;/g, entityReplacer);\n            locator && position(start);\n            domBuilder.characters(xt, 0, end - start);\n            start = end;\n        }\n    }\n    function position(p, m) {\n        while(p >= lineEnd && (m = linePattern.exec(source))){\n            lineStart = m.index;\n            lineEnd = lineStart + m[0].length;\n            locator.lineNumber++;\n        //console.log('line++:',locator,startPos,endPos)\n        }\n        locator.columnNumber = p - lineStart + 1;\n    }\n    var lineStart = 0;\n    var lineEnd = 0;\n    var linePattern = /.*(?:\\r\\n?|\\n)|.*$/g;\n    var locator = domBuilder.locator;\n    var parseStack = [\n        {\n            currentNSMap: defaultNSMapCopy\n        }\n    ];\n    var closeMap = {};\n    var start = 0;\n    while(true){\n        try {\n            var tagStart = source.indexOf(\"<\", start);\n            if (tagStart < 0) {\n                if (!source.substr(start).match(/^\\s*$/)) {\n                    var doc = domBuilder.doc;\n                    var text = doc.createTextNode(source.substr(start));\n                    doc.appendChild(text);\n                    domBuilder.currentElement = text;\n                }\n                return;\n            }\n            if (tagStart > start) {\n                appendText(tagStart);\n            }\n            switch(source.charAt(tagStart + 1)){\n                case \"/\":\n                    var end = source.indexOf(\">\", tagStart + 3);\n                    var tagName = source.substring(tagStart + 2, end).replace(/[ \\t\\n\\r]+$/g, \"\");\n                    var config = parseStack.pop();\n                    if (end < 0) {\n                        tagName = source.substring(tagStart + 2).replace(/[\\s<].*/, \"\");\n                        errorHandler.error(\"end tag name: \" + tagName + \" is not complete:\" + config.tagName);\n                        end = tagStart + 1 + tagName.length;\n                    } else if (tagName.match(/\\s</)) {\n                        tagName = tagName.replace(/[\\s<].*/, \"\");\n                        errorHandler.error(\"end tag name: \" + tagName + \" maybe not complete\");\n                        end = tagStart + 1 + tagName.length;\n                    }\n                    var localNSMap = config.localNSMap;\n                    var endMatch = config.tagName == tagName;\n                    var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();\n                    if (endIgnoreCaseMach) {\n                        domBuilder.endElement(config.uri, config.localName, tagName);\n                        if (localNSMap) {\n                            for(var prefix in localNSMap){\n                                if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\n                                    domBuilder.endPrefixMapping(prefix);\n                                }\n                            }\n                        }\n                        if (!endMatch) {\n                            errorHandler.fatalError(\"end tag name: \" + tagName + \" is not match the current start tagName:\" + config.tagName); // No known test case\n                        }\n                    } else {\n                        parseStack.push(config);\n                    }\n                    end++;\n                    break;\n                // end elment\n                case \"?\":\n                    locator && position(tagStart);\n                    end = parseInstruction(source, tagStart, domBuilder);\n                    break;\n                case \"!\":\n                    locator && position(tagStart);\n                    end = parseDCC(source, tagStart, domBuilder, errorHandler);\n                    break;\n                default:\n                    locator && position(tagStart);\n                    var el = new ElementAttributes();\n                    var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;\n                    //elStartEnd\n                    var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);\n                    var len = el.length;\n                    if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {\n                        el.closed = true;\n                        if (!entityMap.nbsp) {\n                            errorHandler.warning(\"unclosed xml attribute\");\n                        }\n                    }\n                    if (locator && len) {\n                        var locator2 = copyLocator(locator, {});\n                        //try{//attribute position fixed\n                        for(var i = 0; i < len; i++){\n                            var a = el[i];\n                            position(a.offset);\n                            a.locator = copyLocator(locator, {});\n                        }\n                        domBuilder.locator = locator2;\n                        if (appendElement(el, domBuilder, currentNSMap)) {\n                            parseStack.push(el);\n                        }\n                        domBuilder.locator = locator;\n                    } else {\n                        if (appendElement(el, domBuilder, currentNSMap)) {\n                            parseStack.push(el);\n                        }\n                    }\n                    if (NAMESPACE.isHTML(el.uri) && !el.closed) {\n                        end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);\n                    } else {\n                        end++;\n                    }\n            }\n        } catch (e) {\n            if (e instanceof ParseError) {\n                throw e;\n            }\n            errorHandler.error(\"element parse error: \" + e);\n            end = -1;\n        }\n        if (end > start) {\n            start = end;\n        } else {\n            //TODO: 这里有可能sax回退，有位置错误风险\n            appendText(Math.max(tagStart, start) + 1);\n        }\n    }\n}\nfunction copyLocator(f, t) {\n    t.lineNumber = f.lineNumber;\n    t.columnNumber = f.columnNumber;\n    return t;\n}\n/**\n * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\n */ function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {\n    /**\n\t * @param {string} qname\n\t * @param {string} value\n\t * @param {number} startIndex\n\t */ function addAttribute(qname, value, startIndex) {\n        if (el.attributeNames.hasOwnProperty(qname)) {\n            errorHandler.fatalError(\"Attribute \" + qname + \" redefined\");\n        }\n        el.addValue(qname, // @see https://www.w3.org/TR/xml/#AVNormalize\n        // since the xmldom sax parser does not \"interpret\" DTD the following is not implemented:\n        // - recursive replacement of (DTD) entity references\n        // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA\n        value.replace(/[\\t\\n\\r]/g, \" \").replace(/&#?\\w+;/g, entityReplacer), startIndex);\n    }\n    var attrName;\n    var value;\n    var p = ++start;\n    var s = S_TAG; //status\n    while(true){\n        var c = source.charAt(p);\n        switch(c){\n            case \"=\":\n                if (s === S_ATTR) {\n                    attrName = source.slice(start, p);\n                    s = S_EQ;\n                } else if (s === S_ATTR_SPACE) {\n                    s = S_EQ;\n                } else {\n                    //fatalError: equal must after attrName or space after attrName\n                    throw new Error(\"attribute equal must after attrName\"); // No known test case\n                }\n                break;\n            case \"'\":\n            case '\"':\n                if (s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE\n                ) {\n                    if (s === S_ATTR) {\n                        errorHandler.warning('attribute value must after \"=\"');\n                        attrName = source.slice(start, p);\n                    }\n                    start = p + 1;\n                    p = source.indexOf(c, start);\n                    if (p > 0) {\n                        value = source.slice(start, p);\n                        addAttribute(attrName, value, start - 1);\n                        s = S_ATTR_END;\n                    } else {\n                        //fatalError: no end quot match\n                        throw new Error(\"attribute value no end '\" + c + \"' match\");\n                    }\n                } else if (s == S_ATTR_NOQUOT_VALUE) {\n                    value = source.slice(start, p);\n                    addAttribute(attrName, value, start);\n                    errorHandler.warning('attribute \"' + attrName + '\" missed start quot(' + c + \")!!\");\n                    start = p + 1;\n                    s = S_ATTR_END;\n                } else {\n                    //fatalError: no equal before\n                    throw new Error('attribute value must after \"=\"'); // No known test case\n                }\n                break;\n            case \"/\":\n                switch(s){\n                    case S_TAG:\n                        el.setTagName(source.slice(start, p));\n                    case S_ATTR_END:\n                    case S_TAG_SPACE:\n                    case S_TAG_CLOSE:\n                        s = S_TAG_CLOSE;\n                        el.closed = true;\n                    case S_ATTR_NOQUOT_VALUE:\n                    case S_ATTR:\n                        break;\n                    case S_ATTR_SPACE:\n                        el.closed = true;\n                        break;\n                    //case S_EQ:\n                    default:\n                        throw new Error(\"attribute invalid close char('/')\") // No known test case\n                        ;\n                }\n                break;\n            case \"\":\n                errorHandler.error(\"unexpected end of input\");\n                if (s == S_TAG) {\n                    el.setTagName(source.slice(start, p));\n                }\n                return p;\n            case \">\":\n                switch(s){\n                    case S_TAG:\n                        el.setTagName(source.slice(start, p));\n                    case S_ATTR_END:\n                    case S_TAG_SPACE:\n                    case S_TAG_CLOSE:\n                        break; //normal\n                    case S_ATTR_NOQUOT_VALUE:\n                    case S_ATTR:\n                        value = source.slice(start, p);\n                        if (value.slice(-1) === \"/\") {\n                            el.closed = true;\n                            value = value.slice(0, -1);\n                        }\n                    case S_ATTR_SPACE:\n                        if (s === S_ATTR_SPACE) {\n                            value = attrName;\n                        }\n                        if (s == S_ATTR_NOQUOT_VALUE) {\n                            errorHandler.warning('attribute \"' + value + '\" missed quot(\")!');\n                            addAttribute(attrName, value, start);\n                        } else {\n                            if (!NAMESPACE.isHTML(currentNSMap[\"\"]) || !value.match(/^(?:disabled|checked|selected)$/i)) {\n                                errorHandler.warning('attribute \"' + value + '\" missed value!! \"' + value + '\" instead!!');\n                            }\n                            addAttribute(value, value, start);\n                        }\n                        break;\n                    case S_EQ:\n                        throw new Error(\"attribute value missed!!\");\n                }\n                //\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\n                return p;\n            /*xml space '\\x20' | #x9 | #xD | #xA; */ case \"\\x80\":\n                c = \" \";\n            default:\n                if (c <= \" \") {\n                    switch(s){\n                        case S_TAG:\n                            el.setTagName(source.slice(start, p)); //tagName\n                            s = S_TAG_SPACE;\n                            break;\n                        case S_ATTR:\n                            attrName = source.slice(start, p);\n                            s = S_ATTR_SPACE;\n                            break;\n                        case S_ATTR_NOQUOT_VALUE:\n                            var value = source.slice(start, p);\n                            errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n                            addAttribute(attrName, value, start);\n                        case S_ATTR_END:\n                            s = S_TAG_SPACE;\n                            break;\n                    }\n                } else {\n                    //S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n                    //S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\n                    switch(s){\n                        //case S_TAG:void();break;\n                        //case S_ATTR:void();break;\n                        //case S_ATTR_NOQUOT_VALUE:void();break;\n                        case S_ATTR_SPACE:\n                            var tagName = el.tagName;\n                            if (!NAMESPACE.isHTML(currentNSMap[\"\"]) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {\n                                errorHandler.warning('attribute \"' + attrName + '\" missed value!! \"' + attrName + '\" instead2!!');\n                            }\n                            addAttribute(attrName, attrName, start);\n                            start = p;\n                            s = S_ATTR;\n                            break;\n                        case S_ATTR_END:\n                            errorHandler.warning('attribute space is required\"' + attrName + '\"!!');\n                        case S_TAG_SPACE:\n                            s = S_ATTR;\n                            start = p;\n                            break;\n                        case S_EQ:\n                            s = S_ATTR_NOQUOT_VALUE;\n                            start = p;\n                            break;\n                        case S_TAG_CLOSE:\n                            throw new Error(\"elements closed character '/' and '>' must be connected to\");\n                    }\n                }\n        } //end outer switch\n        //console.log('p++',p)\n        p++;\n    }\n}\n/**\n * @return true if has new namespace define\n */ function appendElement(el, domBuilder, currentNSMap) {\n    var tagName = el.tagName;\n    var localNSMap = null;\n    //var currentNSMap = parseStack[parseStack.length-1].currentNSMap;\n    var i = el.length;\n    while(i--){\n        var a = el[i];\n        var qName = a.qName;\n        var value = a.value;\n        var nsp = qName.indexOf(\":\");\n        if (nsp > 0) {\n            var prefix = a.prefix = qName.slice(0, nsp);\n            var localName = qName.slice(nsp + 1);\n            var nsPrefix = prefix === \"xmlns\" && localName;\n        } else {\n            localName = qName;\n            prefix = null;\n            nsPrefix = qName === \"xmlns\" && \"\";\n        }\n        //can not set prefix,because prefix !== ''\n        a.localName = localName;\n        //prefix == null for no ns prefix attribute\n        if (nsPrefix !== false) {\n            if (localNSMap == null) {\n                localNSMap = {};\n                //console.log(currentNSMap,0)\n                _copy(currentNSMap, currentNSMap = {});\n            //console.log(currentNSMap,1)\n            }\n            currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\n            a.uri = NAMESPACE.XMLNS;\n            domBuilder.startPrefixMapping(nsPrefix, value);\n        }\n    }\n    var i = el.length;\n    while(i--){\n        a = el[i];\n        var prefix = a.prefix;\n        if (prefix) {\n            if (prefix === \"xml\") {\n                a.uri = NAMESPACE.XML;\n            }\n            if (prefix !== \"xmlns\") {\n                a.uri = currentNSMap[prefix || \"\"];\n            //{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\n            }\n        }\n    }\n    var nsp = tagName.indexOf(\":\");\n    if (nsp > 0) {\n        prefix = el.prefix = tagName.slice(0, nsp);\n        localName = el.localName = tagName.slice(nsp + 1);\n    } else {\n        prefix = null; //important!!\n        localName = el.localName = tagName;\n    }\n    //no prefix element has default namespace\n    var ns = el.uri = currentNSMap[prefix || \"\"];\n    domBuilder.startElement(ns, localName, tagName, el);\n    //endPrefixMapping and startPrefixMapping have not any help for dom builder\n    //localNSMap = null\n    if (el.closed) {\n        domBuilder.endElement(ns, localName, tagName);\n        if (localNSMap) {\n            for(prefix in localNSMap){\n                if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\n                    domBuilder.endPrefixMapping(prefix);\n                }\n            }\n        }\n    } else {\n        el.currentNSMap = currentNSMap;\n        el.localNSMap = localNSMap;\n        //parseStack.push(el);\n        return true;\n    }\n}\nfunction parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {\n    if (/^(?:script|textarea)$/i.test(tagName)) {\n        var elEndStart = source.indexOf(\"</\" + tagName + \">\", elStartEnd);\n        var text = source.substring(elStartEnd + 1, elEndStart);\n        if (/[&<]/.test(text)) {\n            if (/^script$/i.test(tagName)) {\n                //if(!/\\]\\]>/.test(text)){\n                //lexHandler.startCDATA();\n                domBuilder.characters(text, 0, text.length);\n                //lexHandler.endCDATA();\n                return elEndStart;\n            //}\n            } //}else{//text area\n            text = text.replace(/&#?\\w+;/g, entityReplacer);\n            domBuilder.characters(text, 0, text.length);\n            return elEndStart;\n        //}\n        }\n    }\n    return elStartEnd + 1;\n}\nfunction fixSelfClosed(source, elStartEnd, tagName, closeMap) {\n    //if(tagName in closeMap){\n    var pos = closeMap[tagName];\n    if (pos == null) {\n        //console.log(tagName)\n        pos = source.lastIndexOf(\"</\" + tagName + \">\");\n        if (pos < elStartEnd) {\n            pos = source.lastIndexOf(\"</\" + tagName);\n        }\n        closeMap[tagName] = pos;\n    }\n    return pos < elStartEnd;\n//}\n}\nfunction _copy(source, target) {\n    for(var n in source){\n        if (Object.prototype.hasOwnProperty.call(source, n)) {\n            target[n] = source[n];\n        }\n    }\n}\nfunction parseDCC(source, start, domBuilder, errorHandler) {\n    var next = source.charAt(start + 2);\n    switch(next){\n        case \"-\":\n            if (source.charAt(start + 3) === \"-\") {\n                var end = source.indexOf(\"-->\", start + 4);\n                //append comment source.substring(4,end)//<!--\n                if (end > start) {\n                    domBuilder.comment(source, start + 4, end - start - 4);\n                    return end + 3;\n                } else {\n                    errorHandler.error(\"Unclosed comment\");\n                    return -1;\n                }\n            } else {\n                //error\n                return -1;\n            }\n        default:\n            if (source.substr(start + 3, 6) == \"CDATA[\") {\n                var end = source.indexOf(\"]]>\", start + 9);\n                domBuilder.startCDATA();\n                domBuilder.characters(source, start + 9, end - start - 9);\n                domBuilder.endCDATA();\n                return end + 3;\n            }\n            //<!DOCTYPE\n            //startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)\n            var matchs = split(source, start);\n            var len = matchs.length;\n            if (len > 1 && /!doctype/i.test(matchs[0][0])) {\n                var name = matchs[1][0];\n                var pubid = false;\n                var sysid = false;\n                if (len > 3) {\n                    if (/^public$/i.test(matchs[2][0])) {\n                        pubid = matchs[3][0];\n                        sysid = len > 4 && matchs[4][0];\n                    } else if (/^system$/i.test(matchs[2][0])) {\n                        sysid = matchs[3][0];\n                    }\n                }\n                var lastMatch = matchs[len - 1];\n                domBuilder.startDTD(name, pubid, sysid);\n                domBuilder.endDTD();\n                return lastMatch.index + lastMatch[0].length;\n            }\n    }\n    return -1;\n}\nfunction parseInstruction(source, start, domBuilder) {\n    var end = source.indexOf(\"?>\", start);\n    if (end) {\n        var match = source.substring(start, end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\n        if (match) {\n            var len = match[0].length;\n            domBuilder.processingInstruction(match[1], match[2]);\n            return end + 2;\n        } else {\n            return -1;\n        }\n    }\n    return -1;\n}\nfunction ElementAttributes() {\n    this.attributeNames = {};\n}\nElementAttributes.prototype = {\n    setTagName: function(tagName) {\n        if (!tagNamePattern.test(tagName)) {\n            throw new Error(\"invalid tagName:\" + tagName);\n        }\n        this.tagName = tagName;\n    },\n    addValue: function(qName, value, offset) {\n        if (!tagNamePattern.test(qName)) {\n            throw new Error(\"invalid attribute:\" + qName);\n        }\n        this.attributeNames[qName] = this.length;\n        this[this.length++] = {\n            qName: qName,\n            value: value,\n            offset: offset\n        };\n    },\n    length: 0,\n    getLocalName: function(i) {\n        return this[i].localName;\n    },\n    getLocator: function(i) {\n        return this[i].locator;\n    },\n    getQName: function(i) {\n        return this[i].qName;\n    },\n    getURI: function(i) {\n        return this[i].uri;\n    },\n    getValue: function(i) {\n        return this[i].value;\n    }\n};\nfunction split(source, start) {\n    var match;\n    var buf = [];\n    var reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\n    reg.lastIndex = start;\n    reg.exec(source); //skip <\n    while(match = reg.exec(source)){\n        buf.push(match);\n        if (match[1]) return buf;\n    }\n}\nexports.XMLReader = XMLReader;\nexports.ParseError = ParseError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/sax.js\n");

/***/ })

};
;